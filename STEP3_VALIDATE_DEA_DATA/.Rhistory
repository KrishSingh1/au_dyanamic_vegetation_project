site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]])
# +100 to SW to get NE
offset.NE.components <- c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]])
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(as.data.frame(cbind(c("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row['site_location_name'] <- site.location
offset.data <- rbind(offset.data, offset.data.row)
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- as.data.frame(check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y))
offset.data.row['site_location_name'] <- site.location
offset.data <- rbind(offset.data, )
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- data.frame(check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y))
#offset.data.row['site_location_name'] <- site.location
#offset.data <- rbind(offset.data, )
break
}
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- t(data.frame(check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)))
#offset.data.row['site_location_name'] <- site.location
#offset.data <- rbind(offset.data, )
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- t(data.frame(check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)))
offset.data.row['site_location_name'] <- site.location
#offset.data <- rbind(offset.data, )
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offset.data.row <- t(data.frame(check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)))
offset.data.row$site_location_name <- site.location
#offset.data <- rbind(offset.data, )
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
#offset.data <- rbind(offset.data, )
break
}
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]])
# +100 to SW to get NE
offset.NE.components <- c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]])
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
#offset.data <- rbind(offset.data, )
break
}
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]])
# +100 to SW to get NE
offset.NE.components <- c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]])
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
offset.data <- rbind(offset.data, offset.data.row)
break
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
site.location <- sites.query$site_location_name[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
offset.data <- rbind(offset.data, offset.data.row)
}
View(offset.data)
# check if the satellite imaging captured the right coordinates
# algorithm:
#   1. get coords (x,y of both site and sat)
#   2. get mid.coords for site
#   2. get largest values of sat x and y
#   3. condition checks:
#       a) site.mid.x > sat.x_min & site.mid.x < sat.X
#       b) site.mid.y > sat.y_min & site.mid.y < sat.y
#   4. If both are true, then the mid-point of the site lies within the site image
#   5. Calculate the offsets of the SW and NE borders
#   6. Return (True/false for midpoint, offset.x, offset.y)
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]])
# +100 to SW to get NE
offset.NE.components <- c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]])
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
print(RI)
site.location <- sites.query$site_location_name[RI]
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
# Get DEA dataset
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
# Check if the dataset is empty
if(nrow(dea.data) > 0) {
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
} else {
offset.data.row <- data.frame(site_location_name = site.location,
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
}
offset.data <- rbind(offset.data, offset.data.row)
}
# Test if FC data maps correctly to ausplots coordinates ------------------
# check if the satellite imaging captured the right coordinates
# algorithm:
#   1. get coords (x,y of both site and sat)
#   2. get mid.coords for site
#   2. get largest values of sat x and y
#   3. condition checks:
#       a) site.mid.x > sat.x_min & site.mid.x < sat.X
#       b) site.mid.y > sat.y_min & site.mid.y < sat.y
#   4. If both are true, then the mid-point of the site lies within the site image
#   5. Calculate the offsets of the SW and NE borders
#   6. Return (True/false for midpoint, offset.x, offset.y)
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]])
# +100 to SW to get NE
offset.NE.components <- c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]])
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
print(RI)
site.location <- sites.query$site_location_name[RI]
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
# Get DEA dataset
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
# Check if the dataset is empty
if(nrow(dea.data) > 0) {
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
} else {
offset.data.row <- data.frame(site_location_name = site.location,
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
}
offset.data <- rbind(offset.data, offset.data.row)
}
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- abs(c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]]))
# +100 to SW to get NE
offset.NE.components <- abs(c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]]))
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
print(RI)
site.location <- sites.query$site_location_name[RI]
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
# Get DEA dataset
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
# Check if the dataset is empty
if(nrow(dea.data) > 0) {
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
} else {
offset.data.row <- data.frame(site_location_name = site.location,
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
}
offset.data <- rbind(offset.data, offset.data.row)
}
View(offset.data)
abs(c(-1,2,-23))
# Test if FC data maps correctly to ausplots coordinates ------------------
# check if the satellite imaging captured the right coordinates
# algorithm:
#   1. get coords (x,y of both site and sat)
#   2. get mid.coords for site
#   2. get largest values of sat x and y
#   3. condition checks:
#       a) site.mid.x > sat.x_min & site.mid.x < sat.X
#       b) site.mid.y > sat.y_min & site.mid.y < sat.y
#   4. If both are true, then the mid-point of the site lies within the site image
#   5. Calculate the offsets of the SW and NE borders
#   6. Return (True/false for midpoint, offset.x, offset.y)
check.sat.position <- function(site.x.coord, site.y.coord, sat.x.coord, sat.y.coord){
# Get mid coordinates from the site itself
site.mid.x <- site.x.coord+50
site.mid.y <- site.y.coord+50
# get the minimum and maximum of the satelite pixel coordinates
sat.min.max.x.y.coords <- c("x.min" = min(sat.x.coord), "x.max" = max(sat.x.coord),
"y.min" = min(sat.y.coord), "y.max" = max(sat.y.coord))
#print(sat.min.max.x.y.coords)
# Check if the mid coordinates from the site lies within the boundaries of the sattelite coordinates
is.witin.x <- site.mid.x > sat.min.max.x.y.coords["x.min"] & site.mid.x < sat.min.max.x.y.coords["x.max"]
is.witin.y <- site.mid.y > sat.min.max.x.y.coords["y.min"] & site.mid.y < sat.min.max.x.y.coords["y.max"]
is.within.coords <- is.witin.x & is.witin.y
## Get offsets for the corner points (SW, NE)
offsets.SW.components <- abs(c(site.x.coord - sat.min.max.x.y.coords[["x.min"]],
site.y.coord - sat.min.max.x.y.coords[["y.min"]]))
# +100 to SW to get NE
offset.NE.components <- abs(c(site.x.coord + 100 - sat.min.max.x.y.coords[["x.max"]],
site.y.coord + 100 - sat.min.max.x.y.coords[["y.max"]]))
# Calculate the distance of the offsets
offset.SW <- sqrt(sum(offsets.SW.components^2))
offset.NE <- sqrt(sum(offset.NE.components^2))
return(cbind("is.within.coords" = is.within.coords,
"offset.SW" = offset.SW,
"offset.NE" = offset.NE))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
offset.data <- data.frame(site_location_name = as.character(NA),
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
for(RI in 1:nrow(sites.query)){
print(RI)
site.location <- sites.query$site_location_name[RI]
site.x.coord <- sites.query$pit_marker_easting[RI]
site.y.coord <- sites.query$pit_marker_northing[RI]
# Get DEA dataset
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
# Check if the dataset is empty
if(nrow(dea.data) > 0) {
offsets <- check.sat.position(site.x.coord,site.y.coord,dea.data$x, dea.data$y)
offset.data.row <- data.frame(site_location_name = site.location,offsets)
} else {
offset.data.row <- data.frame(site_location_name = site.location,
is.within.coords = as.numeric(NA),
offset.SW = as.numeric(NA),
offset.NE = as.numeric(NA))
}
offset.data <- rbind(offset.data, offset.data.row)
}
View(offset.data)
offset.data <- offset.data[-1,]
save(offset.data, 'dea_validation.RData')
save(... = offset.data, 'dea_validation.RData')
save(... = offset.data,file =  'dea_validation.RData')
View(offset.data)
offset.data$is.within.coords == 0
offset.data[offset.data$is.within.coords == 0,]
View(sites.query)
