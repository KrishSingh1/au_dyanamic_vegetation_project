temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
View(one.veg.fcs)
one.veg.info <- get_ausplots(all.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in all.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
View(one.veg.fcs)
print(empty.locations)
library(ausplotsR)
# Obtain site names
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
one.site <- subset.names[1] # grab the first site
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
saveRDS(subset.veg.info, 'subset_veg_info.RDS')
subset.veg.info <- readRDS('subset_veg_info.RDS')
#one.veg.info <- get_ausplots(one.site, veg.PI = T, site_info = T)
#saveRDS(one.veg.info, 'one_veg_info.RDS')
one.veg.info <- readRDS('one_veg_info.RDS')
all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
View(all.veg.fc.test)
function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
get.individual.fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
get.individual.fcs(subset.sites)
subset.sites
get.individual.fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
get.individual.fcs(subset.names)
library(ausplotsR)
get.individual.fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
# Obtain site names
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
saveRDS(subset.veg.info, 'subset_veg_info.RDS')
subset.veg.info <- readRDS('subset_veg_info.RDS')
all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get.individual.fcs(subset.names)
#all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
saveRDS(all.veg.fc, 'all_veg_fc.RDS')
View(one.veg.fcs)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
View(all.veg.fc.test)
get_individual_fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
get_fc_retrival_methods <- function(subset.names, all.veg.fc, one.veg.fcs){
subset.veg.info <- get_ausplots(subset.names,
veg.PI = T, site_info = T)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
return(all.veg.fc.test)
}
get_fc_retrival_methods(subset.names, all.veg.fc)
get_individual_fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
get_fc_retrival_methods <- function(subset.names, all.veg.fc, one.veg.fcs){
subset.veg.info <- get_ausplots(subset.names,
veg.PI = T, site_info = T)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
return(list(fcs = all.veg.fc.test, missing_fc = one.veg.fcs$missing_fc))
}
subset.names <- sample(all.names, size = 20)
get_fc_retrival_methods(subset.names, all.veg.fc)
one.veg.info <- get_ausplots('NSABHC0016', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0002', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('NSABHC0014', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0002', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('NSABHC0016', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0002', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('NSABHC0014', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0001', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0001', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0001', veg.PI = T, site_info = T)
one.veg.info <- get_ausplots('QDAMGD0017', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('NTASSD0018', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMGD0008', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMGD0009', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMGD0024', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMGD0003', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('SASMDD0010', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
View(one.veg.info)
one.veg.info <- get_ausplots('NSABHC0016', veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
View(one.veg.info)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP3_VALIDATE_AUSPLOTS/Validate_AusPlots.R")
View(all.veg.fc)
one.veg.info <- get_ausplots('NTASSD0018', veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDAMUL0001', veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots(['SASMDD0010',
one.veg.info <- get_ausplots(['SASMDD0010',
one.veg.info <- get_ausplots(c('SASMDD0010',
'NSABHC0016',
'NSABHC0014',
'QDAMUL0001',
'QDAMGD0017',
'NTASSD0018',
'QDAMGD0008',
'QDAMGD0009',
'QDAMGD0024',
'QDAMGD0003'), veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
View(one.veg.info)
library(ausplotsR)
get_individual_fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
#
get_fc_retrieval_methods <- function(subset.names, all.veg.fc, one.veg.fcs){
subset.veg.info <- get_ausplots(subset.names,
veg.PI = T, site_info = T)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
return(list(fcs = all.veg.fc.test, missing_fc = one.veg.fcs$missing_fc))
}
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
saveRDS(subset.veg.info, 'subset_veg_info.RDS')
subset.veg.info <- readRDS('subset_veg_info.RDS')
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
#saveRDS(all.veg.fc, 'all_veg_fc.RDS')
all.veg.fc <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_fc.RDS')
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
subset.veg.info
subset.veg.info$site.info$site_unique
all.sites$site.info$site_unique
all.veg.info$site.info$site_unique
unique(all.veg.info$site.info$site_unique) %in%
unique(all.veg.info$site.info$site_unique)
unique(all.veg.info$site.info$site_unique) %in% all.veg.fc$site_unique
all.veg.info$site.info$site_unique %in% all.veg.fc$site_unique
setdiff(all.veg.info$site.info$site_unique, all.veg.fc$site_unique)
setdiff(all.veg.info$site.info$site_unique, all.veg.fc$site_unique)
NSABHC0016
'NSABHC0016'
one.veg.info <- get_ausplots("NSABHC0016", veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
View(all.sites)
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
all.names
one.veg.info <- get_ausplots('NSABHC0014', veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
library(ausplotsR)
get_individual_fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
#
get_fc_retrieval_methods <- function(subset.names, all.veg.fc, one.veg.fcs){
subset.veg.info <- get_ausplots(subset.names,
veg.PI = T, site_info = T)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
return(list(fcs = all.veg.fc.test, missing_fc = one.veg.fcs$missing_fc))
}
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
saveRDS(subset.veg.info, 'subset_veg_info.RDS')
subset.veg.info <- readRDS('subset_veg_info.RDS')
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
#saveRDS(all.veg.fc, 'all_veg_fc.RDS')
all.veg.fc <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_fc.RDS')
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
View(one.veg.fcs)
View(all.veg.fc.test)
subset.names.2 <- sample(all.names, size = 20)
test.2 <- get_fc_retrieval_methods(subset.names.2, all.veg.fc)
View(test.2)
test.2$fcs
View(test.2$fcs)
one.veg.info <- get_ausplots("NSABHC0016", veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
one.veg.info <- get_ausplots('QDASEQ0001', veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
subset(all.veg.info$site.info, subset = (site_location_name = 'QDASEQ0001'))
subset(all.veg.info$site.info, subset = (site_location_name == 'QDASEQ0001'))
View(subset(all.veg.info$site.info, subset = (site_location_name == 'QDASEQ0001')))
one.veg.info <- get_ausplots('QDASEQ0001', veg.PI = T, site_info = T)
fractional_cover(one.veg.info$veg.PI)
package_version(ausplotsR)
ausplotsR
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
library(dplyr)
library(zoo)
library(plotly)
site.subset.names <- read.csv('../STEP2_NDVI_EXTRACTION/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv')
site.subset.names <- unique(site.subset.names$site_location_name)
# Select main site
focus.site.name <- site.subset.names[2]
site.subset.names
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
library(dplyr)
library(zoo)
library(plotly)
site.subset.names <- read.csv('../STEP2_NDVI_EXTRACTION/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv')
site.subset.names <- unique(site.subset.names$site_location_name)
# Select main site
focus.site.name <- site.subset.names[11]
# Load NDVI
NDVIs.path <- '../STEP2_NDVI_EXTRACTION/EarthEngine/Output/NDVI_Extraction_2/'
focus.site.file.name <- paste0(focus.site.name, '_NDVI', '.csv')
focus.site.ndvi <- read.csv(paste0(NDVIs.path,focus.site.file.name))
## Need to extract the dates from system index (left of the last '_' seperator)
focus.site.ndvi$date <- unlist(lapply(focus.site.ndvi$system.index,
FUN = function(string){
splitted.str <- strsplit(string, '_')
return(splitted.str[[1]][[length(unlist(splitted.str)) - 1]])
}
))
focus.site.ndvi$date <- as.Date(focus.site.ndvi$date, format = '%Y%m%d')
focus.site.ndvi <- focus.site.ndvi[order(focus.site.ndvi$date),]
rownames(focus.site.ndvi) <- 1:nrow(focus.site.ndvi)
# Load SFC
SFC.path <- '../STEP2_FC_EXTRACTION/VegMachine/SFC/'
focus.site.file.name <- paste0(focus.site.name, '_SFC', '.csv')
focus.site.sfc <- readr::read_csv(paste0(SFC.path,focus.site.file.name))
# To convert to a date, I needed to append a day ('01') while in actuality
# there are no specific dates
focus.site.sfc$date <- as.Date(unlist(lapply(focus.site.sfc$date,
function(date)
{return(paste0(date, '-01'))}
)))
focus.site.sfc <- as.data.frame(focus.site.sfc) # note parsing issue with the last column
dea.path <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
focus.site.file.name <- paste0(focus.site.name, '.csv')
focus.site.dea <- read.csv(paste0(dea.path,focus.site.file.name))
focus.site.dea <- aggregate(focus.site.dea, by = list(focus.site.dea$time), FUN = mean, na.rm = T)
focus.site.dea$date <- as.Date(focus.site.dea$Group.1)
# Combine the datasets
focus.site.ndvi <- focus.site.ndvi[,c('date', 'NDVI')]
focus.site.sfc <- focus.site.sfc[,c('date', 'green_mean')]
focus.site.dea <- focus.site.dea[,c('date', 'pv')]
test <- focus.site.ndvi %>%
full_join(focus.site.sfc, by = 'date') %>%
full_join(focus.site.dea, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
gapfill.green_mean <- na.locf(test[,c("date", "green_mean")])
test <- test[, c("date", "NDVI", "pv")]
test <- test %>%
full_join(gapfill.green_mean, by = 'date')
test$NDVI <- test$NDVI*100
veg.info <- get_ausplots(focus.site.name, veg.PI = T, site_info = T)
insitu.fc <- fractional_cover(veg.info$veg.PI)
veg.info <- merge(as.data.frame(veg.info$site.info), insitu.fc, by = "site_unique")
veg.info.fc <- veg.info[,c("visit_start_date", "green")]
colnames(veg.info.fc)[1] <- 'date'
veg.info.fc$date <- as.Date(veg.info.fc$date)
test <- test %>% full_join(veg.info.fc, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
test.2 <- aggregate(test[,c("NDVI", "pv", "green_mean", "green")],
by = list(test$date),
FUN = mean, na.rm = T)
test.2 <- test.2[order(test.2$Group.1),]
rownames(test.2) <- 1:nrow(test.2)
colnames(test.2)[1] <- 'date'
## Using ggplotly
pl <- ggplot(test.2, aes(x = date)) +
geom_line(mapping = aes(y = NDVI, colour = "Landsat_NDVI")) +
geom_line(mapping = aes(y = pv, colour = "DEA_FC")) +
geom_line(mapping = aes(y = green_mean, colour = "VegMachine_SFC")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(focus.site.name) +
geom_point(mapping = aes(y = green, colour = "insitu_green")) +
scale_color_manual(
name = "Cover Types",
values = c("Landsat_NDVI" = "red", "DEA_FC" = "blue", "VegMachine_SFC" = "green",
"insitu_green" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%Y %b",
date_minor_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
ts_plot(na.locf(test.2), slider = T)
ts_plot(na.locf(test.2), slider = T)
ts_plot(test.2, slider = T)
p
site.subset.names
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP5_DATASETS_COMPARISON/Product_Subset_Timeseries_Visualisation.R")
p
I <- ausplotsR::get_ausplots("NSANSS0001", site_info = T)
View(I)
