# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
gc()
gc()
gc()
gc()
gc()
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', row.names = T)
library(ausplotsR)
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'), row.names = F)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', row.names = T)
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
View(growth.form)
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'), row.names = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', check.names = F)
View(growth.form)
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', check.names = F)
View(growth.form)
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
View(growth.form)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
View(growth.form)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
unique(growth.form$site_location_name)
length(unique(growth.form$site_location_name))
length(unique(growth.form$site_location_name)) == nrow(growth.form.agg)
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
View(growth.form.classification)
growth.form.classification <- na.omit(growth.form.classification)
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
View(growth.form.agg)
View(growth.form.agg)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
View(growth.form.agg)
colnames(growth.form.agg)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
growth.form.agg[,-c(1,2)]
View(growth.form.agg)
growth.form.agg[,-c("X","site_location_name.1")]
growth.form.agg[,!c("X","site_location_name.1")]
growth.form.agg[,!names(growth.form.agg) %in% c("X","site_location_name.1")]
growth.form.agg[,!(names(growth.form.agg) %in%
c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in%
c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name.1"))]
subset(growth.form.agg, subset = -c("X","site_location_name.1"))
View(growth.form.agg)
with(growth.form.agg, rm(X, site_location_name.1))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = site_location_name, FUN = mean, na.rm = T)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = 'site_location_name', FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
View(growth.form.agg)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
View(growth.form.agg)
View(growth.form)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
View(growth.form.agg)
library(ausplotsR)
package_version(ausplotsR)
packageVersion(ausplotsR)
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(paste0('../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(paste0(growth.form.agg, '../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(growth.form.agg,paste0('../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
# Libraries ---------------------------------------------------------------
library(ausplotsR)
library(Metrics)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
# Load AusPlots data
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0 # set NA to 0 for 'other'
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10)) # remove observations with 'other' at 10% or less
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826',]$bare = 0
# Load Preprocessed DEA Data
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
# Merge the data
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
# Generate Plots
## Evaluate green fractions
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
# Libraries ---------------------------------------------------------------
library(ausplotsR)
library(Metrics)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
library(tune)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
# Load AusPlots data
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0 # set NA to 0 for 'other'
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10)) # remove observations with 'other' at 10% or less
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826',]$bare = 0
# Load Preprocessed DEA Data
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
# Merge the data
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
# Generate Plots
## Evaluate green fractions
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
## Evaluate bare fractions
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
## Evaluate brown fractions
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)))
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
growth.form.agg <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
View(growth.form.agg)
growth.form.agg <- read.csv('../DATASETS/AusPlots_Sites_Classified_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
View(growth.form.essen)
View(growth.form.agg)
dea.fc.sites.plotting$site_location_name <- unlist(lapply(dea.fc.sites.plotting$site_unique, get_location_name))
dea.fc.sites.plotting <- merge(dea.fc.sites.plotting, growth.form.essen, by = 'site_location_name')
View(dea.fc.sites.plotting)
dea.fc.sites.plotting$site_location_name <- unlist(lapply(dea.fc.sites.plotting$site_unique, get_location_name))
# Libraries ---------------------------------------------------------------
library(ausplotsR)
library(Metrics)
library(ggplot2)
library(ggpubr)
library(ggpmisc)
library(tune)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
# Load AusPlots data
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0 # set NA to 0 for 'other'
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10)) # remove observations with 'other' at 10% or less
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826',]$bare = 0
# Load Preprocessed DEA Data
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
# Merge the data
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
# Generate Plots
## Evaluate green fractions
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
## Evaluate bare fractions
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
## Evaluate brown fractions
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)))
growth.form.agg <- read.csv('../DATASETS/AusPlots_Sites_Classified_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
dea.fc.sites.plotting$site_location_name <- unlist(lapply(dea.fc.sites.plotting$site_unique, get_location_name))
dea.fc.sites.plotting <- merge(dea.fc.sites.plotting, growth.form.essen, by = 'site_location_name')
View(dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = T)
cal.green
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm')
cal.green
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$green,
predicted = tree$pv)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$green,
predicted = shrub$pv)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$green,
predicted = grass$pv)
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + facet_wrap(~vegetation_type) + coord_obs_pred() + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm')
cal.bare
growth.form.agg <- read.csv('../DATASETS/AusPlots_Sites_Classified_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm')
cal.green
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + facet_wrap(~vegetation_type) + coord_obs_pred() + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm')
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$bare,
predicted = tree$bs)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$bare,
predicted = shrub$bs)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$bare,
predicted = grass$bs)
# Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + facet_wrap(~vegetation_type) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = T)
cal.brown
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$brown,
predicted = tree$npv)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$brown,
predicted = shrub$npv)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$brown,
predicted = grass$npv)
gridExtra::grid.arrange(cal.green, cal.brown, cal.bare)
