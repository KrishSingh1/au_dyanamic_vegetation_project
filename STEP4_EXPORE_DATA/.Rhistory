size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
library(data.table)
library(dplyr)
library(ggplot2)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
plot_distribution(fileNames[1], evaluation_df)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, group = time),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, group = time),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, group = time),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
plot_distribution(fileNames[1], evaluation_df)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, color = site_unique),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, color = site_unique),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, color = site_unique),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
plot_distribution(fileNames[1], evaluation_df)
dea_fc <- fread(paste0(directory, 'Input_DataSet_', fileNames[1], '.csv')) %>%
mutate(time =  as.Date(time))
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, color = site_unique),
size = 2) + labs(title = paste0(site)) + theme(legend.position = 'none')
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, color = site_unique),
size = 2) +labs(title = paste0(' ')) +
theme(legend.position = 'none')
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, color = site_unique),
size = 2) +
labs(title = paste0(' ')) +
theme(legend.position = 'none')
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
evaluation_df <- fread('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv')
plot_distribution(fileNames[1], evaluation_df)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, color = visit_start_date),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, color = visit_start_date),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, color = visit_start_date),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
evaluation_df <- fread('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv')
plot_distribution(fileNames[1], evaluation_df)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, color = as.factor(visit_start_date)),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, color = as.factor(visit_start_date)),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, color = as.factor(visit_start_date)),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
evaluation_df <- fread('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv')
plot_distribution(fileNames[1], evaluation_df)
plot_distribution <- function(site, evaluation_set) {
dea_fc <- fread(paste0(directory, 'Input_DataSet_', site, '.csv')) %>%
mutate(time =  as.Date(time))
# In mutate, I am fitting a function to dea_fc, then using the input from
#   the evaluation set to obtain the percentile, since we only need x
evaluation_set <-  evaluation_set %>%
subset(site_location_name == site) %>%
mutate(pv_filter_percentile = ecdf(dea_fc$pv_filter)(pv_filter),
npv_filter_percentile = ecdf(dea_fc$npv_filter)(npv_filter),
bs_filter_percentile = ecdf(dea_fc$bs_filter)(bs_filter),
time =  as.factor(time))
ecdf_green <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = pv_filter), color = 'darkgreen') +
geom_point(data = evaluation_set,
mapping = aes(x = pv_filter, y = pv_filter_percentile, color = time),
size = 2) + labs(title = paste0(site))
ecdf_brown <- ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = npv_filter), color = 'blue') +
geom_point(data = evaluation_set,
mapping = aes(x = npv_filter, y = npv_filter_percentile, color = time),
size = 2) +labs(title = paste0(' '))
ecdf_bare <-  ggplot(data = dea_fc) +
stat_ecdf(mapping = aes(x = bs_filter), color = 'red') +
geom_point(data = evaluation_set,
mapping = aes(x = bs_filter, y = bs_filter_percentile, color = time),
size = 2) +
labs(title = paste0(' '))
plot(cowplot::plot_grid(ecdf_green, ecdf_brown, ecdf_bare))
}
plot_distribution(fileNames[1], evaluation_df)
plot_distribution('WAAVIB0003', evaluation_df)
library(plotly)
library(ggplot2)
library(dplyr)
library(caret)
library(cowplot)
library(data.table)
library(tune)
library(ggpubr)
library(ggpmisc)
library(Matrix)
library(Metrics)
library(grid)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
# Get DEA file names
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
sites.query <- read.csv("../DATASETS/sites_info_query.csv")
# Load AusPlots data
evaluation_fc <- fread('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv') %>%
mutate(time = as.Date(time)) %>%
arrange(time)
# Looking at the varying number of NAs between in-situ for green, brown, bs
# Its best to calculate the change differently
# Additionally, we are not considering the length of time into our change calcs
evaluation_list <- list(green_fc = na.omit(evaluation_fc[,c('site_unique', 'site_location_name', 'green', 'pv_filter', 'time')]),
brown_fc = na.omit(evaluation_fc[,c('site_unique', 'site_location_name', 'brown', 'npv_filter', 'time')]),
bs_fc = na.omit(evaluation_fc[,c('site_unique', 'site_location_name', 'bare', 'bs_filter', 'time')]))
evaluation_list <- lapply(evaluation_list, FUN = function(x) {
counts.df <- as.data.frame(table(x$site_location_name)) %>%
subset(Freq >= 2)  # Remove sites that were not revisited
x <- subset(x, site_location_name %in% unique(counts.df$Var1)) # now subset the dataframe by sites with more than 1 visit
return(x)
})
change_list <- lapply(evaluation_list, FUN = function(one_fraction) {
one_fraction <- as.data.frame(one_fraction)
site_list <- unique(one_fraction$site_location_name)
temp <- c()
for(s in site_list) {
site_fc_information <- subset(one_fraction, site_location_name == s)
n_samples <- nrow(site_fc_information)
for (sample in 1:(n_samples-1)) {
# Sample 'a' and 'b' the first and second  time point, with the time points
essential_cols_names <- c('green', 'brown', 'bare', 'pv_filter', 'bs_filter', 'npv_filter', 'time')
essential_cols <- colnames(site_fc_information)[which(colnames(site_fc_information) %in% essential_cols_names)] # Extract by fraction type and 'time'
a <- site_fc_information[sample, essential_cols]
b <- site_fc_information[sample + 1, essential_cols]
time_a <- site_fc_information[['time']][sample]
time_b <- site_fc_information[['time']][sample + 1]
change <- b - a
change <- change %>%
mutate(time_a = time_a,
time_b = time_b,
site_location_name = s) %>%
rename(days_difference = time)
temp <- rbind(temp, change)
}
}
temp <- as.data.frame(temp)
rownames(temp) <- 1:nrow(temp)
return(temp)
})
green_change <- change_list$green_fc
bs.stats <- lm(bs_filter~bare, change_list$bs_fc)
bs.bare.pl <- ggplot(data = change_list$bs_fc, aes(x = bare, y = bs_filter)) +
labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$bs_fc$bare,
predicted = change_list$bs_fc$bs_filter),2)),
0.125, 0.9))
plot(bs.bare.pl)
green.stats <- lm(pv_filter~green, change_list$green_fc)
pv.green.pl <- ggplot(data = change_list$green_fc, aes(x = green, y = pv_filter)) +
labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = green.stats$coefficients[["green"]],
intercept = green.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))  +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$green_fc$green,
predicted = change_list$green_fc$pv_filter),2)),
0.125, 0.9))
plot(pv.green.pl)
brown.stats <- lm(npv_filter~brown, change_list$brown_fc)
npv.brown.pl <- ggplot(data = change_list$brown_fc, aes(x = brown, y = npv_filter)) +
labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = brown.stats$coefficients[["brown"]],
intercept = brown.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$brown_fc$brown,
predicted = change_list$brown_fc$npv_filter),2)),
0.125, 0.9))
plot(npv.brown.pl)
plot(cowplot::plot_grid(pv.green.pl, npv.brown.pl, bs.bare.pl))
bs.stats <- lm(bs_filter~bare, change_list$bs_fc)
bs.bare.pl <- ggplot(data = change_list$bs_fc, aes(x = bare, y = bs_filter)) +
labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$bs_fc$bare,
predicted = change_list$bs_fc$bs_filter),2)),
0.13, 0.8))
plot(bs.bare.pl)
green.stats <- lm(pv_filter~green, change_list$green_fc)
pv.green.pl <- ggplot(data = change_list$green_fc, aes(x = green, y = pv_filter)) +
labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = green.stats$coefficients[["green"]],
intercept = green.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))  +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$green_fc$green,
predicted = change_list$green_fc$pv_filter),2)),
0.13, 0.8))
plot(pv.green.pl)
brown.stats <- lm(npv_filter~brown, change_list$brown_fc)
npv.brown.pl <- ggplot(data = change_list$brown_fc, aes(x = brown, y = npv_filter)) +
labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = brown.stats$coefficients[["brown"]],
intercept = brown.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$brown_fc$brown,
predicted = change_list$brown_fc$npv_filter),2)),
0.13, 0.8))
plot(npv.brown.pl)
plot(cowplot::plot_grid(pv.green.pl, npv.brown.pl, bs.bare.pl))
bs.stats <- lm(bs_filter~bare, change_list$bs_fc)
bs.bare.pl <- ggplot(data = change_list$bs_fc, aes(x = bare, y = bs_filter)) +
labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$bs_fc$bare,
predicted = change_list$bs_fc$bs_filter),2)),
0.16, 0.8))
plot(bs.bare.pl)
green.stats <- lm(pv_filter~green, change_list$green_fc)
pv.green.pl <- ggplot(data = change_list$green_fc, aes(x = green, y = pv_filter)) +
labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = green.stats$coefficients[["green"]],
intercept = green.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))  +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$green_fc$green,
predicted = change_list$green_fc$pv_filter),2)),
0.16, 0.8))
plot(pv.green.pl)
brown.stats <- lm(npv_filter~brown, change_list$brown_fc)
npv.brown.pl <- ggplot(data = change_list$brown_fc, aes(x = brown, y = npv_filter)) +
labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) +
coord_obs_pred() + xlim(c(-100,100)) +
geom_abline(slope = brown.stats$coefficients[["brown"]],
intercept = brown.stats$coefficients[["(Intercept)"]]) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
annotation_custom(textGrob(paste0('RMSE: ',
round(rmse(actual = change_list$brown_fc$brown,
predicted = change_list$brown_fc$npv_filter),2)),
0.16, 0.8))
plot(npv.brown.pl)
plot(cowplot::plot_grid(pv.green.pl, npv.brown.pl, bs.bare.pl))
theil_sen_reg <- read.csv('../DATASETS/AusPlots_Theil_Sen_Regression_Stats/AusPlots_Theil_Sen_Regression_Stats.csv', )
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.max(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7)*100, '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
theil_sen_reg <- read.csv('../DATASETS/AusPlots_Theil_Sen_Regression_Stats/AusPlots_Theil_Sen_Regression_Stats.csv', )
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.max(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7)*100, '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/'
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
theil_sen_reg <- read.csv('../DATASETS/AusPlots_Theil_Sen_Regression_Stats/AusPlots_Theil_Sen_Regression_Stats.csv', )
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.max(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7)*100, '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.min(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7)*100, '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
View(theil_sen_reg)
theil_sen_reg <- read.csv('../DATASETS/AusPlots_Theil_Sen_Regression_Stats/AusPlots_Theil_Sen_Regression_Stats.csv', )
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.max(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7), '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.max(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7), '%/u'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.min(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7), '%'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
theil_sen_reg_copy <- theil_sen_reg
for(i in 1:20){
max_index <- which.min(theil_sen_reg_copy$slope)[1]
max_slope <- theil_sen_reg_copy[max_index,]
dea_fc <- read.csv(paste0(directory, 'Input_DataSet_', max_slope$site_location_name, '.csv'))
dea_fc$time <- as.Date(dea_fc$time)
p <- ggplot(data = dea_fc) + geom_line(mapping = aes(x = time, y = pv_filter)) +
geom_abline(intercept = max_slope$intercept[1], slope = max_slope$slope[1], color = 'red') +
ylim(c(0,100)) + ggtitle(paste0(max_slope$site_location_name, ' slope = ', round(max_slope$slope[1],7), '%/u'))
plot(p)
theil_sen_reg_copy <- theil_sen_reg_copy[-max_index,]
}
