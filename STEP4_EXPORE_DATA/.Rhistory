colnames(means)[which(colnames(means) == "Group.1")] = "time"
#print(means)
dea.fc.means.df <- rbind(dea.fc.means.df, means)
} else{
missing.data <- c(missing.data, site.location)
}
}
dea.fc.means.df <- dea.fc.means.df[-1,]
#save(dea.fc.means.df, file =  "dea.fc.means.df_23108.RData")
} else {
load('dea.fc.means.df_23108.RData')
}
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Data_Repeated_Sites_Change.R")
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover)) + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + facet_wrap(~variable)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_adjusted_spatial.csv")
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_adjusted_spatial.csv")
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)
library(ggplot2)
# Greenness
ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)")
cowplot::plot_grid(cal.green, cal.brown, cal.bare)
cowplot::plot_grid(cal.green, cal.brown, cal.bare)
# Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cowplot::plot_grid(cal.green, cal.brown, cal.bare)
View(dea.fc.sites.nearest)
ggplot(dea.fc.sites.plotting, aes(y = npv, x = c(green,brown, bare) )) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting, aes(y = (pv,npv,bs), x = c(green,brown, bare) )) + geom_point() + geom_abline() +
ggplot(dea.fc.sites.plotting, aes(y = c(pv,npv,bs), x = c(green,brown, bare) )) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs)) + geom_point(aes(x = green, y = pv)) + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs)) + geom_point(aes(x = green, y = pv)) + geom_point(aes(x = brown, y = npv)) + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
?geom_point
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = 'green') + geom_point(aes(x = brown, y = npv), colour = 'brown') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'darkred') + geom_point(aes(x = green, y = pv), colour = 'darkgreen') + geom_point(aes(x = brown, y = npv), colour = 'brown') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'darkred') + geom_point(aes(x = green, y = pv), colour = 'darkgreen') + geom_point(aes(x = brown, y = npv), colour = 'brown') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'darkred') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = 'brown') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#D55E00') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = 'blue') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)")
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
##### Load Essential Librarys ######
library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i ) {
# Site End Points:
W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][1]
S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][1]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
###### Load Dataset ######
# "NSTSYB0002" is 81
# 'NTABRT0001' is  94
RI = 81 # record index
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
site.path <- paste(directory,files[RI],sep = "")
dea.data <- read.csv(site.path)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
site.info.data <- veg.info$site.info
site.info.index <- which(site.info.data$site_location_name == file.names[RI])
site.info.data <- site.info.data[site.info.index,]
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
ausplots.fc <- insitu.fractional.cover[grep(file.names[RI], insitu.fractional.cover$site_unique),]
site.info.data <- merge(ausplots.fc, site.info.data, by = 'site_unique')
dea.data <- trim_to_nearest_coord(site.info.index, veg.info, dea.data)
###### Visualise The Data ######
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
posit.date <- as.POSIXlt(dea.data.agg$Group.1) # for use for a later section: smoothing time series
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
## Get essential data from Ausplots
site.info.data.essen <- site.info.data[,c("visit_start_date", "bare",
"brown", "green" )]
site.info.data.essen$visit_start_date <- as.Date(site.info.data.essen$visit_start_date)
colnames(site.info.data.essen) <- colnames(
dea.data.agg[,c("Group.1","bs","npv","pv")]
)
dea.data.agg.essen <- dea.data.agg[,c("Group.1","bs","npv","pv", "ue")]
time.sequence <- data.frame(Group.1 =  seq(from = min(dea.data.agg.essen$Group.1), to = max(dea.data.agg.essen$Group.1), by='8 days'))
#merged.data <- dea.data.agg.essen %>% full_join(time.sequence)
#merged.data$Group.1 <- as.Date(merged.data$Group.1)
#merged.data <- merged.data %>% arrange(Group.1)
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bs")) +
geom_line(mapping = aes(y = npv, colour = "npv")) +
geom_line(mapping = aes(y = pv, colour = "pv")) +
geom_line(mapping = aes(y = ue, colour = "ue")) +
xlab("Time") +
ylab("Colour Intensity") +
labs(title = file.names[RI]) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bs.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "npv.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "pv.obs")) +
scale_color_manual(
name = "Colour Bands",
values = c("bs" = "red", "npv" = "blue", "pv" = "green", "ue" = "yellow",
"bs.obs" = "darkred", "npv.obs" = "darkblue",
"pv.obs" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
p <- ggplotly(pl) %>%
rangeslider()
p
_Data_Repeated_Sites_Visualisation ######
library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
site.names <- unique(veg.info$site.info$site_location_name)
site.observations <- unique(veg.info$site.info$site_unique)
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
# Count the number of observations of each site
df <- as.data.frame(t(data.frame(purrr::flatten(lapply(site.observations, strsplit, '-')))))
counts <- c()
for (n in site.names){
counts <- c(counts, sum(df$V1 == n))
}
counts.df <- data.frame(site.names, counts)
sites.revisit.df <- subset(counts.df, counts > 1) # For all revisited data
#sites.revisit.2.df <- subset(counts.df, counts == 2) # For sites that were only visited twice
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
###### Load Dataset ######
# record index of the sites with multiple visits
#RI = 81# SATFLB0006 (2)
#RI = 82 # NTAMAC0002
#RI = 83 # WAAGES0003
#RI = 35 # NTABRT0002 (2)
RI = which(sites.revisit.df$site.names == 'NTAFIN0001') # A good triple one
which(fileNames == 'NTAFIN0001')
site.location <- sites.revisit.df$site.names[RI]
site.path <- paste(directory,paste0(site.location,".csv"), sep = "/")
dea.data <- read.csv(site.path)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
site.info.data <- veg.info$site.info
site.info.index <- which(site.info.data$site_location_name == site.location)
site.info.data <- site.info.data[site.info.index,]
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
ausplots.fc <- insitu.fractional.cover[grep(site.location, insitu.fractional.cover$site_unique),]
site.info.data <- merge(ausplots.fc, site.info.data, by = 'site_unique')
plot_site_markings <- function(easting.site, northing.site, dea.fc.i) {
MASS::eqscplot(dea.fc.i$x, dea.fc.i$y,tol = .5, xlab = "easting", ylab = "northing")
points(x = easting.site,y = northing.site, pch = 2, col = 'red')
points(x = easting.site+100,y = northing.site, pch = 2, col= 'red')
points(x = easting.site,y = northing.site+100, pch = 2, col= 'red')
points(x = easting.site+100,y = northing.site+100, pch = 2, col= 'red')
}
plot_site_markings(veg.info$site.info$pit_marker_easting[site.info.index][2],
veg.info$site.info$pit_marker_northing[site.info.index][2],
dea.data)
dea.data <- trim_to_nearest_coord(site.info.index, veg.info, dea.data, sites.query)
###### Visualise The Data ######
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
posit.date <- as.POSIXlt(dea.data.agg$Group.1) # for use for a later section: smoothing time series
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
## Get essential data from Ausplots
site.info.data.essen <- site.info.data[,c("visit_start_date", "bare",
"brown", "green" )]
site.info.data.essen$visit_start_date <- as.Date(site.info.data.essen$visit_start_date)
colnames(site.info.data.essen) <- colnames(
dea.data.agg[,c("Group.1","bs","npv","pv")]
)
site.info.data.essen$Group.1 <- as.Date(site.info.data.essen$Group.1)
dea.data.agg.essen <- dea.data.agg[,c("Group.1","bs","npv","pv", "ue")]
means <- data.frame(Group.1 = as.Date(NA), bs = NA, npv = NA, pv = NA, ue = NA)
for(i in 1:length(site.info.data.essen$Group.1)){
date <- site.info.data.essen$Group.1[i]
times.forwards <- seq(date, by='1 days', length = 31)
times.backwards <- seq(date, by='-1 days', length = 31)
closest.times <- rbind(dea.data.agg.essen[dea.data.agg.essen$Group.1 %in%times.forwards,],
dea.data.agg.essen[dea.data.agg.essen$Group.1 %in%times.backwards,])
means <- rbind(means,data.frame(Group.1 = date, lapply(closest.times[,c("bs","npv","pv","ue")], FUN = mean, na.rm = T)))
}
means <- means[-1,]
#time.sequence <- data.frame(Group.1 =  seq(from = min(dea.data.agg.essen$Group.1), to = max(dea.data.agg.essen$Group.1), by='8 days'))
#merged.data <- dea.data.agg.essen %>% full_join(time.sequence)
#merged.data$Group.1 <- as.Date(merged.data$Group.1)
#merged.data <- merged.data %>% arrange(Group.1)
## Add dates of obs to the dea datasets to visually see the na, if there is one
for(i in 1:length(means$Group.1) ) {
date <- means$Group.1[i]
if (sum(dea.data.agg.essen$Group.1 %in% date) == 0){
dea.data.agg.essen <- rbind(dea.data.agg.essen, data.frame(Group.1 = date, bs = NA, npv = NA, pv = NA, ue = NA))
}
}
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bs")) +
geom_line(mapping = aes(y = npv, colour = "npv")) +
geom_line(mapping = aes(y = pv, colour = "pv")) +
geom_line(mapping = aes(y = ue, colour = "ue")) +
geom_line(data = means, aes(x = Group.1, y = bs, colour = "bs.mean"))+
geom_line(data = means, aes(x = Group.1, y = npv, colour = "npv.mean"))+
geom_line(data = means, aes(x = Group.1, y = pv, colour = "pv.mean"))+
xlab("Time") +
ylab("Colour Intensity") +
labs(title = site.location) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bs.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "npv.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "pv.obs")) +
scale_color_manual(
name = "Colour Bands",
values = c("bs" = "red", "npv" = "blue", "pv" = "green", "ue" = "yellow",
"bs.obs" = "darkred", "npv.obs" = "darkblue",
"pv.obs" = "darkgreen", "bs.mean" = "darkred",
"npv.mean" = "darkblue", "pv.mean" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bs")) +
geom_line(mapping = aes(y = npv, colour = "npv")) +
geom_line(mapping = aes(y = pv, colour = "pv")) +
geom_line(mapping = aes(y = ue, colour = "ue")) +
geom_line(data = means, aes(x = Group.1, y = bs, colour = "bs.mean"))+
geom_line(data = means, aes(x = Group.1, y = npv, colour = "npv.mean"))+
geom_line(data = means, aes(x = Group.1, y = pv, colour = "pv.mean"))+
xlab("Time") +
ylab("Colour Intensity") +
labs(title = site.location) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bs.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "npv.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "pv.obs")) +
scale_color_manual(
name = "Colour Bands",
values = c("bs" = "red", "npv" = "blue", "pv" = "green", "ue" = "yellow",
"bs.obs" = "darkred", "npv.obs" = "darkblue",
"pv.obs" = "darkgreen", "bs.mean" = "darkred",
"npv.mean" = "darkblue", "pv.mean" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bs")) +
geom_line(mapping = aes(y = npv, colour = "npv")) +
geom_line(mapping = aes(y = pv, colour = "pv")) +
geom_line(mapping = aes(y = ue, colour = "ue")) +
geom_line(data = means, aes(x = Group.1, y = bs, colour = "bs.mean"))+
geom_line(data = means, aes(x = Group.1, y = npv, colour = "npv.mean"))+
geom_line(data = means, aes(x = Group.1, y = pv, colour = "pv.mean"))+
xlab("Time") +
ylab("Colour Intensity") +
labs(title = site.location) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bs.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "npv.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "pv.obs")) +
scale_color_manual(
name = "Colour Bands",
values = c("bs" = "red", "npv" = "blue", "pv" = "green", "ue" = "yellow",
"bs.obs" = "darkred", "npv.obs" = "darkblue",
"pv.obs" = "darkgreen", "bs.mean" = "darkred",
"npv.mean" = "darkblue", "pv.mean" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p <- ggplotly(pl) %>%
rangeslider()
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
View(dea.data.agg.essen)
View(dea.data)
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bs")) +
geom_line(mapping = aes(y = npv, colour = "npv")) +
geom_line(mapping = aes(y = pv, colour = "pv")) +
geom_line(mapping = aes(y = ue, colour = "ue")) +
geom_line(data = means, aes(x = Group.1, y = bs, colour = "bs.mean"))+
geom_line(data = means, aes(x = Group.1, y = npv, colour = "npv.mean"))+
geom_line(data = means, aes(x = Group.1, y = pv, colour = "pv.mean"))+
xlab("Time") +
ylab("Colour Intensity") +
labs(title = site.location) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bs.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "npv.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "pv.obs")) +
scale_color_manual(
name = "Colour Bands",
values = c("bs" = "red", "npv" = "blue", "pv" = "green", "ue" = "yellow",
"bs.obs" = "darkred", "npv.obs" = "darkblue",
"pv.obs" = "darkgreen", "bs.mean" = "darkred",
"npv.mean" = "darkblue", "pv.mean" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Dea_Data_Repeated_Sites_Visualisation.R")
p
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Data_Repeated_Sites_Change.R")
both.changs.df
aggregate(both.changs.df[,c("pv","npv","bs", "green", "brown", "bare")],
list(both.changs.df$site_location_name), FUN = mean, na.rm = T )
both.changes.agg <- aggregate(both.changs.df[,c("pv","npv","bs", "green", "brown", "bare")],
list(both.changs.df$site_location_name), FUN = mean, na.rm = T)
bs.bare.pl <- ggplot(data = both.changes.agg, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
pv.green.pl <- ggplot(data = both.changes.agg, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
npv.brown.pl <- ggplot(data = both.changes.agg, aes(x = brown, y = npv)) + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
bs.bare.pl
pv.green.pl
npv.brown.pl
all.pl <- ggplot(data = both.changes.agg) + geom_point(aes(x = brown, y = npv)) + geom_point(aes(x = green, y = pv)) +
geom_point(aes(x = bare, y = bs)) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.agg) + geom_point(aes(x = brown, y = npv), colour = 'blue') + geom_point(aes(x = green, y = pv), colour = 'green') +
geom_point(aes(x = bare, y = bs), colour = 'red') +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred()
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
