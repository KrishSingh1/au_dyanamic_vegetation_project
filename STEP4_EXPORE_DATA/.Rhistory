View(ausplots_site_fc)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
directory <- "../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
View(AusPlots_fc)
site <- 'NTAFIN0002'
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')
View(site_info)
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
View(AusPlots_fc)
colnames(site_info)
strsplit(colnames(site_info), '.')
strsplit(colnames(site_info), '\.')
strsplit(colnames(site_info), '\\.')
lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
})
unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
View(site_info)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(sites_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique')
library(dplyr)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(sites_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique')
library(dplyr)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique')
View(AusPlots_fc)
which(AusPlots_fc$site_location_name == site)
# Get indices of the site
site_ground_indices <- which(AusPlots_fc$site_location_name == site)
site <- 'NTAFIN0002'
dea_fc <- read.csv(paste0(directory, 'NTAFIN0002', '.csv'))
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
mutate(visit_start_date = as.Date(visit_start_date))
View(AusPlots_fc)
View(ausplots_site_fc)
View(AusPlots_fc)
site <- 'NTAFIN0002'
dea_fc <- read.csv(paste0(directory, 'NTAFIN0002', '.csv')) %>%
mutate(time =  as.Date(time))
View(dea_fc)
?difftime
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- which.min(difftime(on_ground_date, dea_fc$time))
print( dea_fc[closest_time_point_index,])
}
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- which.min(difftime(dea_fc$time, on_ground_date))
print( dea_fc[closest_time_point_index,])
}
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- which.min(difftime(dea_fc$time, on_ground_date, units = 'days'))
print( dea_fc[closest_time_point_index,])
}
dea_fc$time
closest_time_point_index <- abs((difftime(dea_fc$time, on_ground_date, units = 'days')))
closest_time_point_index <- abs((difftime(dea_fc$time, on_ground_date, units = 'secs')))
closest_time_point_index <- abs((difftime(dea_fc$time, on_ground_date, units = 'days')))
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
mutate(visit_start_date = as.Date(visit_start_date))
directory <- "../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
site <- 'NTAFIN0002'
dea_fc <- read.csv(paste0(directory, 'NTAFIN0002', '.csv')) %>%
mutate(time =  as.Date(time))
# Get indices of the site
site_ground_indices <- which(AusPlots_fc$site_location_name == site)
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- abs((difftime(dea_fc$time, on_ground_date, units = 'days')))
print( dea_fc[closest_time_point_index,])
}
closest_time_point_index <- abs(difftime(dea_fc$time, on_ground_date, units = 'days'))
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- abs(difftime(as.POSIXct(dea_fc$time), as.POSIXct(on_ground_date), units = 'days'))
print( dea_fc[closest_time_point_index,])
}
dea_fc$time
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[[i]]
closest_time_point_index <- abs(difftime(as.Date(dea_fc$time), on_ground_date, units = 'days'))
print( dea_fc[closest_time_point_index,])
}
closest_time_point_index <- abs(difftime(as.Date(dea_fc$time[1]), on_ground_date, units = 'days'))
closest_time_point_index <- abs(difftime(as.Date(dea_fc$time[1]), on_ground_date, units = 'days'))
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[i]
closest_time_point_index <- abs(difftime(as.Date(dea_fc$time[1]), on_ground_date, units = 'days'))
print( dea_fc[closest_time_point_index,])
}
on_ground_date <- AusPlots_fc$visit_start_date[i]
abs(difftime(as.Date(dea_fc$time[1]), on_ground_date, units = 'days'))
abs(difftime(on_ground_date, as.Date(dea_fc$time[1]), units = 'days'))
abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days'))
d <- abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days'))
class(abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days')))
as.numeric(abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days'))))
as.numeric(abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days'))))
as.numeric(abs(difftime(on_ground_date, as.Date(dea_fc$time), units = 'days')))
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[i]
closest_time_point_index <- abs(as.numeric(difftime(dea_fc$time, on_ground_date, units = 'days')))
print(dea_fc[closest_time_point_index,])
}
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[i]
closest_time_point_index <- which.min(abs(as.numeric(difftime(dea_fc$time, on_ground_date, units = 'days'))))
print(dea_fc[closest_time_point_index,])
}
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[i]
closest_time_point_index <- dea_fc$time %>%
difftime(on_ground_date, units = 'days') %>%
as.numeric() %>%
abs() %>%
which.min()
print(dea_fc[closest_time_point_index,])
}
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
mutate(visit_start_date = as.Date(visit_start_date))
directory <- "../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
site <- 'NTAFIN0002'
dea_fc <- read.csv(paste0(directory, 'NTAFIN0002', '.csv')) %>%
mutate(time =  as.Date(time)) %>% select(!c('X'))
View(dea_fc)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
mutate(visit_start_date = as.Date(visit_start_date)
time = NA,
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
mutate(visit_start_date = as.Date(visit_start_date),
time = NA,
pv = NA,
npv = NA,
bs = NA)
View(AusPlots_fc)
directory <- "../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
site <- 'NTAFIN0002'
# Get indices of the site
site_ground_indices <- which(AusPlots_fc$site_location_name == site)
for (i in site_ground_indices){
on_ground_date <- AusPlots_fc$visit_start_date[i]
closest_time_point_index <- dea_fc$time %>%
difftime(on_ground_date, units = 'days') %>%
as.numeric() %>% abs() %>% which.min()
AusPlots_fc[i, c('time', 'pv', 'npv', 'bs')] <- dea_fc[closest_time_point_index, c('time', 'pv', 'npv', 'bs')]
print(dea_fc[closest_time_point_index,])
}
View(AusPlots_fc)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(AusPlots_fc)
AusPlots_fc %>% mutate(time = as.Date(AusPlots_fc))
AusPlots_fc %>% mutate(time = as.Date(time))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
#### Plot Results
pv.stats <- lm(pv~green, AusPlots_fc)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
cal.green <- ggplot(AusPlots_fc, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
cal.green <- ggplot(AusPlots_fc, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
install.packages(tune)
install.packages('tune')
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(AusPlots_fc)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(AusPlots_fc)
bs.stats <- lm(bs~bare,AusPlots_fc)
cal.bare <- ggplot(AusPlots_fc, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
npv.stats <- lm(npv~brown,AusPlots_fc)
cal.brown <- ggplot(AusPlots_fc, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
dea.fc.sites.plotting.long <- reshape2::melt(AusPlots_fc[, c('site_unique','bs','npv','pv')],
id.vars = c('site_unique'), value.name ="remote.cover")
dea.fc.sites.plotting.long <- reshape2::melt(AusPlots_fc[, c('site_unique','bs','npv','pv')],
id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(AusPlots_fc[,c('site_unique','bare','brown','green')],
id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) +
geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(AusPlots_fc) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) +
geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) +
geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") +
scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(data = both.plotting.df.long, mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare, all.pl.validate) # check if all.pl.validate give same statistics as validation
cowplot::plot_grid(cal.green, cal.brown, cal.bare, cal.all) # Gives same statistics
growth.form.agg <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_classification_by_dom_species_final_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
dea.fc.sites.plotting$site_location_name <- unlist(lapply(dea.fc.sites.plotting$site_unique, get_location_name))
dea.fc.sites.plotting <- merge(AusPlots_fc, growth.form.essen, by = 'site_location_name')
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm',fullrange = F)
plot(cal.green)
## Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + facet_wrap(~vegetation_type) +
coord_obs_pred() + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm',fullrange = F)
plot(cal.bare)
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
## Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
facet_wrap(~vegetation_type) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = F)
plot(cal.brown)
gridExtra::grid.arrange(cal.green, cal.brown, cal.bare)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
plot(cal.green)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm',fullrange = F)
plot(cal.green)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(AusPlots_fc)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(dea_fc)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
View(AusPlots_fc)
View(dea_fc)
# Read site dea_fc
dea_fc <- read.csv(paste0(directory, site, '.csv')) %>%
mutate(time =  as.Date(time))
View(dea_fc)
dea_fc <- read.csv(paste0(directory, site, '.csv'))
View(dea_fc)
View(AusPlots_fc)
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
subset(site_location_name %in%  fileNames) %>%
mutate(visit_start_date = as.Date(visit_start_date),
time = NA,
pv_filter = NA,
npv_filter = NA,
bs_filter = NA)
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
View(AusPlots_fc)
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique')
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
subset(site_location_name %in%  fileNames) %>%
View(AusPlots_fc)
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
subset(site_location_name %in%  fileNames)
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
irectory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
AusPlots_fc <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')[,-1]
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')[,-1]
colnames(site_info) <- unlist(lapply(strsplit(colnames(site_info), '\\.'), FUN = function(x){
unlist(x)[3]
}))
AusPlots_fc <- AusPlots_fc %>%
left_join(site_info[,c('site_unique', 'site_location_name', 'visit_start_date')], by = 'site_unique') %>%
subset(site_location_name %in%  fileNames)
# We Perform the time point matching for each site with avaliable DEA FC
# To do that, we check our directory for downloaded DEA FC
directory <- "../DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
fileNames <- unlist(lapply(strsplit(fileNames, '_'), FUN = function(x){
unlist(x)[3]
}))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Evaluation_Nearest_Point.R")
# Greenness
pv_filter.stats <- lm(pv_filter~green, AusPlots_fc)
cal.green <- ggplot(AusPlots_fc, aes(y = pv_filter, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv_filter.stats$coefficients[["green"]],
intercept = pv_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
# Brownness
npv_filter.stats <- lm(npv_filter~brown,AusPlots_fc)
cal.brown <- ggplot(AusPlots_fc, aes(y = npv_filter, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv_filter.stats$coefficients[["brown"]],
intercept = npv_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
# Bareness
bs_filter.stats <- lm(bs_filter~bare,AusPlots_fc)
cal.bare <- ggplot(AusPlots_fc, aes(y = bs_filter, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs_filter.stats$coefficients[["bare"]],
intercept = bs_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
# Greenness
pv_filter.stats <- lm(pv_filter~green, AusPlots_fc)
cal.green <- ggplot(AusPlots_fc, aes(y = pv_filter, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = pv_filter.stats$coefficients[["green"]],
intercept = pv_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
# Brownness
npv_filter.stats <- lm(npv_filter~brown,AusPlots_fc)
cal.brown <- ggplot(AusPlots_fc, aes(y = npv_filter, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv_filter.stats$coefficients[["brown"]],
intercept = npv_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
# Bareness
bs_filter.stats <- lm(bs_filter~bare,AusPlots_fc)
cal.bare <- ggplot(AusPlots_fc, aes(y = bs_filter, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs_filter.stats$coefficients[["bare"]],
intercept = bs_filter.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
# Combine Plots
dea.fc.sites.plotting.long <- reshape2::melt(AusPlots_fc[, c('site_unique','bs_filter','npv_filter','pv_filter')],
id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(AusPlots_fc[,c('site_unique','bare','brown','green')],
id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv_filter')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv_filter')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs_filter')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) +
geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(AusPlots_fc) + geom_point(aes(x = bare, y = bs_filter, colour = 'bare'), alpha = 0.5) +
geom_point(aes(x = green, y = pv_filter, colour = 'green'), alpha = 0.5) +
geom_point(aes(x = brown, y = npv_filter, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") +
scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(data = both.plotting.df.long, mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare, all.pl.validate) # check if all.pl.validate give same statistics as validation
cowplot::plot_grid(cal.green, cal.brown, cal.bare, cal.all) # Gives same statistics
growth.form.agg <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_classification_by_dom_species_final_2-0-6.csv')
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
dea.fc.sites.plotting <- merge(AusPlots_fc, growth.form.essen, by = 'site_location_name')
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv_filter, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm',fullrange = F)
plot(cal.green)
