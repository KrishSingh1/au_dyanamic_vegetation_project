Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
View(dea.fc.sites.plotting)
dea.fc.sites.plotting$bare
dea.fc.sites.plotting$bs
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
library(Metrics)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
?rmse
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
rmse(actual = dea.fc.sites.plotting$bare, predicted = dea.fc.sites.plotting$bs)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
View(dea.fc.sites.plotting)
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
tcatch <- get_ausplots('TCATCH0010', veg.PI = T)
View(tcatch)
tcatch.fc <- fractional_cover(tcatch$veg.PI)
View(tcatch.fc)
tcatch[["site.info"]][["latitude"]]
tcatch[["site.info"]][["longitude"]]
View(dea.fc.sites.nearest)
tcatch <- get_ausplots(c('TCATCH0010','NSABBS0001'), veg.PI = T)
tcatch.fc <- fractional_cover(tcatch$veg.PI)
View(tcatch.fc)
library(ausplotsR)
library(Metrics)
# Load AusPlots data
veg.info <- readRDS("../STEP2_AUSPLOTS_EXTRACTION/site_veg_2-0-3.rds")
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0 # set NA to 0 for 'other'
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10)) # remove observations with 'other' at 10% or less
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826']$bare = 0
# Load Preprocessed DEA Data
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
# Merge the data
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
View(dea.fc.sites.plotting)
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826']
library(ausplotsR)
library(Metrics)
# Load AusPlots data
veg.info <- readRDS("../STEP2_AUSPLOTS_EXTRACTION/site_veg_2-0-3.rds")
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0 # set NA to 0 for 'other'
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10)) # remove observations with 'other' at 10% or less
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826',]$bare = 0
insitu.fractional.cover[insitu.fractional.cover$site_unique == 'TCATCH0010-58826',]$bare = 0
# Load Preprocessed DEA Data
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
# Merge the data
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.green)
print(paste0("Green Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)))
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
rmse(actual = dea.fc.sites.plotting$bare, predicted = dea.fc.sites.plotting$bs)
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.bare)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)))
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +
geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) +
stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
plot(cal.brown)
print(paste0("Bare Fraction RMSE: ", rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)))
library(ausplotsR)
version(ausplotsR)
?ausplots
library(ausplotsR)
packageVersion("ausplotsR")
modified_string <- gsub('\\.', '-', packageVersion("ausplotsR"))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
paste0("../DATASETS/","site_veg_", version, ".rds")
library(ausplotsR)
# Get list of sites
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
site.names <- tools::file_path_sans_ext(files)
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots(my.Plot_IDs = site.names, veg.PI = T, site_info = T, dictionary = T)
file <- paste0("../DATASETS/","site_veg_", version, ".rds")
saveRDS(my.data, file = file)
veg_info <- readRDS(file)
View(veg_info)
file
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
?growth_form_table
growth.forms <- growth_form_table(veg_info$veg.PI)
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover")
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
View(growth.forms)
fc <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
View(fc)
fc.pub <- subset(fc.pub, subset = (fc.pub$error != 3))
fc.pub <- subset(fc, subset = (fc.pub$error != 3))
fc.pub <- subset(fc, subset = (fc$error != 3))
View(fc)
which(is.na(fc$site_unique))
View(fc)
fc.batch <- readRDS('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/AusPlots_Query/Output/all_veg_fc.RDS')
fc.batch
setdif(fc.batch$site_unique, fc$site_unique)
setdiff(fc.batch$site_unique, fc$site_unique)
setdiff(fc$site_unique, fc.batch$site_unique)
# Between fc and fc.batch
setdiff(fc.batch$site_unique, fc$site_unique)
setdiff(fc.pub$site_unique, fc$site_unique)
setdiff(fc$site_unique, fc.pub$site_unique)
setdiff(setdiff(fc$site_unique, fc.batch$site_unique), setdiff(fc$site_unique, fc.pub$site_unique))
setdiff(setdiff(fc$site_unique, fc.pub$site_unique),
setdiff(fc$site_unique, fc.batch$site_unique))
veg_info$site.info[veg_info$site.info$site_unique == 'SASMDD0010-57064',]
fc$site_unique[fc$site_unique == 'SASMDD0010-57064',]
fc$site_unique[fc$site_unique == 'SASMDD0010-57064']
fc[fc$site_unique == 'SASMDD0010-57064',]
library(ausplotsR)
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
fc <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
fc.pub <- subset(fc, subset = (fc$error != 3 & fc$error != 1))
fc.batch <- readRDS('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/AusPlots_Query/Output/all_veg_fc.RDS')
# Between fc and fc.batch
setdiff(fc.batch$site_unique, fc$site_unique)
setdiff(fc$site_unique, fc.batch$site_unique)
setdiff(fc.pub$site_unique, fc$site_unique)
setdiff(fc$site_unique, fc.pub$site_unique)
# now check the difference between the two differences
setdiff(setdiff(fc$site_unique, fc.batch$site_unique),
setdiff(fc$site_unique, fc.pub$site_unique))
setdiff(setdiff(fc$site_unique, fc.pub$site_unique),
setdiff(fc$site_unique, fc.batch$site_unique))
veg_info$site.info[veg_info$site.info$site_unique == 'SASMDD0010-57064',]
fc[fc$site_unique == 'SASMDD0010-57064',]
setdiff(rownames(growth.forms), fc$site_unique)
rownames(growth.forms)
setdiff(fc$site_unique, rownames(growth.forms))
setdiff(fc.pub$site_unique, rownames(growth.forms))
View(growth.forms)
subset(fc.batch, subset = (site_unique %in%
setdiff(fc.pub$site_unique, rownames(growth.forms))))
subset(veg_info$site.info, subset = (site_unique %in%
setdiff(fc.pub$site_unique, rownames(growth.forms))))
subset(veg_info$veg.PI, subset = (site_unique %in%
setdiff(fc.pub$site_unique, rownames(growth.forms))))
subset(veg_info$veg.PI, subset = (site_unique == 'QDADEU0002-58962')))
subset(veg_info$veg.PI, subset = (site_unique == 'QDADEU0002-58962'))
subset(veg_info$veg.PI, subset = (site_unique == 'QDADEU0003-58898'))
QDADEU0003 <- get_ausplots('QDADEU0003', veg.PI = T)
View(QDADEU0003)
QDADEU0003[["site.info"]][["comments"]]
growth.forms.QDADEU0003 <- growth_form_table(QDADEU0003$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
View(growth.forms.QDADEU0003)
QDADEU0003 <- get_ausplots('QDADEU0002', veg.PI = T)
QDADEU0002 <- get_ausplots('QDADEU0002', veg.PI = T)
growth.forms.QDADEU0002 <- growth_form_table(QDADEU0002$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
QDADEU0003 <- get_ausplots('QDADEU0003', veg.PI = T)
growth.forms.QDADEU0003 <- growth_form_table(QDADEU0003$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
QDADEU0002 <- get_ausplots('QDADEU0002', veg.PI = T)
growth.forms.QDADEU0002 <- growth_form_table(QDADEU0002$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
getwd()
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
gc()
gc()
gc()
gc()
gc()
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', row.names = T)
library(ausplotsR)
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'), row.names = F)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', row.names = T)
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
View(growth.form)
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'), row.names = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
View(growth.form)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', check.names = F)
View(growth.form)
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/','growth_forms_pc_', version, '.csv'))
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv', check.names = F)
View(growth.form)
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
View(growth.form)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
View(growth.form)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
unique(growth.form$site_location_name)
length(unique(growth.form$site_location_name))
length(unique(growth.form$site_location_name)) == nrow(growth.form.agg)
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
View(growth.form.classification)
growth.form.classification <- na.omit(growth.form.classification)
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
View(growth.form.agg)
View(growth.form.agg)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
View(growth.form.agg)
colnames(growth.form.agg)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
growth.form.agg[,-c(1,2)]
View(growth.form.agg)
growth.form.agg[,-c("X","site_location_name.1")]
growth.form.agg[,!c("X","site_location_name.1")]
growth.form.agg[,!names(growth.form.agg) %in% c("X","site_location_name.1")]
growth.form.agg[,!(names(growth.form.agg) %in%
c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in%
c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name.1"))]
subset(growth.form.agg, subset = -c("X","site_location_name.1"))
View(growth.form.agg)
with(growth.form.agg, rm(X, site_location_name.1))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form ~ site_location_name, FUN = mean, na.rm = T)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = site_location_name, FUN = mean, na.rm = T)
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = 'site_location_name', FUN = mean, na.rm = T)
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name.1"))]
growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
View(growth.form.agg)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
View(growth.form.agg)
View(growth.form)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
View(growth.form.agg)
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
View(growth.form.agg)
library(ausplotsR)
package_version(ausplotsR)
packageVersion(ausplotsR)
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(paste0('../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(paste0(growth.form.agg, '../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
#### DEA EVALUATION BY TYPE PLOTS ####
# By Krish Singh
# Date: 240105
# Purpose: To visually explore the alignment of AusPlots and DEA data by predominate veg type.
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(growth.form.agg,paste0('../DATASETS/','AusPlots_Sites_Classified_', version, '.csv'))
