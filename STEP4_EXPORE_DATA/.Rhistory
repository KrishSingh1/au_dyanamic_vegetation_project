geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
both.changs.df <- merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv), colour = 'blue') + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
all.pl <- ggplot(data = both.changs.df) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_point(aes(x = green, y = pv, colour = 'green')) +
geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
both.changes.agg <- aggregate(both.changs.df[,c("pv","npv","bs", "green", "brown", "bare")],
list(both.changs.df$site_location_name), FUN = mean, na.rm = T)
bs.bare.pl <- ggplot(data = both.changes.agg, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
pv.green.pl <- ggplot(data = both.changes.agg, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv), colour = 'blue') + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
all.pl <- ggplot(data = both.changes.agg) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_point(aes(x = green, y = pv, colour = 'green')) +
geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/DEA_Data_Repeated_Sites_Change.R")
both.changs.df <- merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv), colour = 'blue') + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
all.pl <- ggplot(data = both.changs.df) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_point(aes(x = green, y = pv, colour = 'green')) +
geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip <- file.path(directory, "precip")
files <- list.files(precip, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
str_split(fileNames[RI], "_")
stringr::str_split(fileNames[RI], "_")
stringr::str_split(fileNames[RI], "_")[1]
stringr::str_split(fileNames[RI], "_")[[1]]
stringr::str_split(fileNames[RI], "_")[[1]][1]
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(data.directory, files[RI])
library(stringr)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
library(stringr)
library(ncdf4)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
library(ncdf4)
install.packages("ncdf4")
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
library(stringr)
library(ncdf4)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
precip.path
library(stringr)
library(ncdf4)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
precip.path
nc.path
library(ncdf4)
library(plotly)
library(timetk)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd/"
precip <- file.path(directory, "precip")
tmax <- file.path(directory, "tmax")
tmin <- file.path(directory, "tmin")
vapourpres_h09 <- file.path(directory, "vapourpres_h09")
vapourpres_h15 <- file.path(directory, "vapourpres_h15")
files <- list.files(precip, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
DI = 81 # directory index
###
get_climate_tibble <- function(index, files, variable, directory, window){
data.directory <- file.path(directory, variable)
nc.path <- file.path(data.directory, files[index])
print("Open nc")
nc <- nc_open(nc.path)
print("Opened")
if(variable == "vapourpres_h09" || variable == "vapourpres_h15") {
var <- ncvar_get(nc, "vapourpres")
}
var <- ncvar_get(nc, variable)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
daily.var <- zoo::zoo(var,dates)
window.sum <- zoo::rollsum(daily.var,k = window)
data.df <- merge(daily.var, window.sum) %>% as.data.frame()
colnames(data.df)[which(colnames(data.df) == "daily.var")] <- variable
data.df$time <- as.Date(rownames(data.df))
data.df$window.sum <- na_interpolation(data.df$window.sum)
colnames(data.df)[which(colnames(data.df) == "window.sum")] <- paste0("window.sum", ".", window)
return(as_tibble(data.df))
}
precip.tibble <- get_climate_tibble(DI, files, "precip", directory, 16)
library(stringr)
library(ncdf4)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(nc.path)
nc.path
nc <- nc_open(filename = nc.path)
library(stringr)
library(ncdf4)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(filename = nc.path)
nc$format
nc$ndims
nc$nvars
nc$groups
nc$var
View(nc)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'precip')
library(dplyr)
library(lubridate)
daily.precip <- zoo::zoo(var,dates)
daily.precip <- as.data.frame(zoo::zoo(var,dates))
View(daily.precip)
daily.precip <- as.data.frame(var,dates)
daily.precip <- data.frame(precip = var, time = dates)
daily.precip %>% group_by(time=floor_date(time, '1 year'))
daily.precip %>% group_by(time=floor_date(time, '1 year')) %>%
summarize(mean_annual_precip=mean(precip))
subset(daily.precip, subset = (time >= '1987-07-01' & time <= '2022-06-31' ))
subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-31"))
subset(daily.precip, subset = (time >= "1987-07-01" && time <= "2022-06-31"))
daily.precip[daily.precip$time >= "1987-07-01" & daily.precip$time <= "2022-06-31",]
daily.precip <- data.frame(precip = var, time = dates)
daily.precip <- data.frame(precip = var, time = as.Date(dates))
daily.precip[daily.precip$time >= "1987-07-01" & daily.precip$time <= "2022-06-31",]
subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
daily.precip <- data.frame(precip = var, time = dates)
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
daily.precip %>% group_by(time=floor_date(time, '1 year'))
table(daily.precip %>% group_by(time=floor_date(time, '1 year'))$time)
group <- daily.precip %>% group_by(time=floor_date(time, '1 year'))
table(group$time)
?floor_date
group.no <- 1
group.col <- c()
for(i in 1:nrow(daily.precip)) {
if (i %% 365  == 0 & i > 0) {
group.no <- group.no + 1
}
group.col <- c(group.col, group.no)
}
daily.precip$group.col <- group.col
rownames(daily.precip) <- 1:nrow(daily.precip)
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
group.no <- 1
group.col <- c()
for(i in 0:nrow(daily.precip)) {
if (i %% 365  == 0 & i > 0) {
group.no <- group.no + 1
}
group.col <- c(group.col, group.no)
}
group.no <- 1
group.col <- c()
for(i in 1:nrow(daily.precip)) {
if (i %% 366  == 0 & i > 0) {
group.no <- group.no + 1
}
group.col <- c(group.col, group.no)
}
daily.precip$group.col <- group.col
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
group.no <- 1
group.col <- c()
for(i in 1:nrow(daily.precip)) {
if (i %% 365  == 0 & i > 0) {
group.no <- group.no + 1
}
group.col <- c(group.col, group.no)
}
daily.precip$group.col <- group.col
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
group.no <- 1
group.col <- c()
for(i in 0:(nrow(daily.precip)-1)) {
if (i %% 365  == 0 & i > 0) {
group.no <- group.no + 1
}
group.col <- c(group.col, group.no)
}
daily.precip$group.col <- group.col
aggregate(daily.precip, by = list(daily.precip$group.col), FUN = mean)
aggregate(daily.precip[,(precip)], by = list(daily.precip$group.col), FUN = mean)
aggregate(daily.precip[,c('precip')], by = list(daily.precip$group.col), FUN = mean)
daily.precip$group.no <- cut(daily.precip$time, breaks = as.Date(c("YYYY-07-01", "YYYY-06-30")), labels = FALSE)
?cut
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
1987:2022
str(1987:2022)
as.str(1987:2022)
(1987:2022)
lapply(1987:2022, paste)
lapply(1987:2022, print)
apply(1987:2022, print)
apply(1987:2022, paste)
apply(1987:2022, FUN = paste)
mapply(1987:2022, FUN = paste)
years <- mapply(1987:2022, FUN = paste)
for(y in years){
paste0(y, "-07-01")
}
for(y in years){
print(paste0(y, "-07-01"))
}
years <- mapply(1987:2022, FUN = paste)
breaks <- c()
for(i in 1:length((years)-1){
for(i in 1:length((years)-1)){
breaks <- c(breaks, paste0(years[i], "-07-01"), paste0(years[i+1]), "-06-30")
}
years <- mapply(1987:2022, FUN = paste)
breaks <- c()
for(i in 1:(length(years) -1)){
breaks <- c(breaks, paste0(years[i], "-07-01"), paste0(years[i+1]), "-06-30")
}
breaks
years <- mapply(1987:2022, FUN = paste)
breaks <- c()
for(i in 1:(length(years) -1)){
breaks <- c(breaks, paste0(years[i], "-07-01"), paste0(years[i+1], "-06-30"))
}
breaks
daily.precip$group.no <- cut(daily.precip$time, breaks = breaks), labels = FALSE)
daily.precip$group.no <- cut(daily.precip$time, breaks = breaks), labels = FALSE))
daily.precip$group.no <- cut(daily.precip$time, breaks = breaks, labels = FALSE)
?cut.Date
daily.precip$group.no <- cut(daily.precip$time, breaks = 'year', labels = FALSE)
daily.precip$group.no <- cut(daily.precip$time, breaks = '365 days', labels = FALSE)
library(stringr)
library(ncdf4)
library(dplyr)
library(lubridate)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'precip')
daily.precip <- data.frame(precip = var, time = dates)
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
daily.precip$group.col <- cut(daily.precip$time, breaks = '365 days', labels = FALSE)
single.annual.mean <- aggregate(daily.precip[,c('precip')], by = list(daily.precip$group.col), FUN = mean)
#### Finding the Correlation between precipitation and fractional covers #####
# Krish Singh
# 2023109
#### General Process
# Objective: Finding the correlation between mean annual precipitation and mean fractional cover for each site
# Trying with one site
# 1. Find mean annual precipitation of a site
library(stringr)
library(ncdf4)
library(dplyr)
library(lubridate)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
RI = 2
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'precip')
daily.precip <- data.frame(precip = var, time = dates)
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
daily.precip$group.col <- cut(daily.precip$time, breaks = '365 days', labels = FALSE)
single.annual.mean <- aggregate(daily.precip[,c('precip')], by = list(daily.precip$group.col), FUN = mean)
View(single.annual.mean)
annual.std <- std(single.annual.mean$x)
?std
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPORE_DATA/Precipitation_Data_Exploration.R")
library(ncdf4)
library(dplyr)
library(lubridate)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
precip.path <- file.path(directory, "precip")
files <- list.files(precip.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
annual.precip.data <- data.frame(site_location_name = NA,
precip_sd = as.numeric(NA),
precip_mean = as.numeric(NA),
precip_cv = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
nc.path <- file.path(precip.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'precip')
daily.precip <- data.frame(precip = var, time = dates)
# So its in the range of July-June
daily.precip <- subset(daily.precip, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
rownames(daily.precip) <- 1:nrow(daily.precip)
daily.precip$group.col <- cut(daily.precip$time, breaks = '365 days', labels = FALSE)
single.annual.mean <- aggregate(daily.precip[,c('precip')], by = list(daily.precip$group.col), FUN = mean)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.precip.data.i <- data.frame(site_location_name = site.location.name,
precip_sd = annual.sd,
precip_mean = mean(single.annual.mean$x),
precip_cv = annual.cv)
annual.precip.data <- rbind(annual.precip.data,annual.precip.data.i)
}
View(annual.precip.data)
annual.precip.data <- annual.precip.data[-1,]
save(annual.precip.data, 'annual.precip.data.RData')
save(... = annual.precip.data, file = 'annual.precip.data.RData')
load('annual.precip.data.RData')
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
RI = 81 # record index
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
site.path <- paste(directory,files[RI],sep = "")
dea.data <- read.csv(site.path)
View(dea.data)
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
RI <- 2
site.location <- fileNames[RI]
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
mean(dea.data$bs)
mean(dea.data$bs, na.rm = T)
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
RI <- 2
site.location <- fileNames[RI]
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
View(sites.query)
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
RI <- 2
site.location <- fileNames[RI]
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
RI <- 2
site.location <- fileNames[RI]
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
mean(dea.data$bs, na.rm = T)
mean(dea.data$pv, na.rm = T)
mean(dea.data$pv, na.rm = T)
mean(dea.data$npv, na.rm = T)
subset(dea.data, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
annual.fc.data <- data.frame(site_location_name = NA,
bs_mean = as.numeric(NA),
npv_mean = as.numeric(NA),
pv_mean = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location <- fileNames[RI]
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
dea.data <- subset(dea.data, subset = (time >= "1987-07-01" & time <= "2022-06-30"))
bs.mean <- mean(dea.data$bs, na.rm = T)
pv.mean <- mean(dea.data$pv, na.rm = T)
npv.mean <- mean(dea.data$npv, na.rm = T)
annual.fc.data.i <- data.frame(site_location_name = site.location,
bs_mean = bs.mean,
npv_mean = npv.mean,
pv_mean = pv.mean)
annual.fc.data <- rbind(annual.fc.data, annual.fc.data.i)
}
