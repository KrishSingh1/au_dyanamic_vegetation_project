npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)")
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red'))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'bare') + geom_point(aes(x = green, y = pv), colour = 'green') + geom_point(aes(x = brown, y = npv), colour = 'brown') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red'))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs colour = 'bare')) + geom_point(aes(x = green, y = pv, colour = 'green')) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_abline() +
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare')) + geom_point(aes(x = green, y = pv, colour = 'green')) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red'))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting.df[, c('bs','npv','pv')], id.vars = c('site_location_name'), value.name ="remote.cover")
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('bs','npv','pv')], id.vars = c('site_location_name'), value.name ="remote.cover")
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
View(dea.fc.sites.plotting.long)
View(site.fc.df.long)
dea.fc.change.df.long$variable <- as.character(dea.fc.change.df.long$variable)
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
View(both.plotting.df.long)
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
View(all.stats)
all.pl.validate <- ggplot(data = dea.fc.sites.plotting.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(-100,100)) + ylim(c(-100,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
all.pl.validate
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(-100,100)) + ylim(c(-100,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
all.pl.validate
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
all.pl.validate
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare')) + geom_point(aes(x = green, y = pv, colour = 'green')) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare')) + geom_point(aes(x = green, y = pv, colour = 'green')) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_abline(slope = 1, intercept = 0, lty = 2) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.9) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.8) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare')) + geom_point(aes(x = green, y = pv, colour = 'green')) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_abline(slope = 1, intercept = 0, lty = 2) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 2) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 1.1) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 1) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
summary(lm(pv~green,dea.fc.sites.plotting))
lm(bs~bare,dea.fc.sites.plotting)
summary(lm(pv~green,dea.fc.sites.plotting))
summary(lm(bs~bare,dea.fc.sites.plotting))
summary(lm(npv~brown,dea.fc.sites.plotting))
load('annual.precip.data.RData')
load('annual.fc.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
library(ggplot2)
library(cowplot)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Daily Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Daily Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Daily Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean)) + geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_mean)) + labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_mean)) + labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_mean)) + labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
tmax.path <- file.path(directory, "tmax")
files <- list.files(tmax.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
annual.tmax.data <- data.frame(site_location_name = NA,
tmax_sd = as.numeric(NA),
tmax_mean = as.numeric(NA),
tmax_cv = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
print(site.location.name)
nc.path <- file.path(tmax.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'tmax')
daily.tmax <- data.frame(tmax = var, time = dates)
# So its in the range of July-June
daily.tmax <- subset(daily.tmax, subset = (time >= "1987-07-01" & time <= "2022-07-01"))
rownames(daily.tmax) <- 1:nrow(daily.tmax)
daily.tmax$group.col <- rep(NA, nrow(daily.tmax))
bound <- '-07-01'
for(year in 1987:2021) {
lower.b <- as.Date(paste0(year, bound))
upper.b <- as.Date(paste0(year+1, bound))
daily.tmax[daily.tmax$time >= lower.b &  daily.tmax$time < upper.b,]$group.col <- paste(year,year+1, sep = "-")
}
single.annual.mean <- aggregate(daily.tmax[,c('tmax')], by = list(daily.tmax$group.col), FUN = sum)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.tmax.data.i <- data.frame(site_location_name = site.location.name,
tmax_sd = annual.sd,
tmax_mean = mean(single.annual.mean$x),
tmax_cv = annual.cv)
annual.tmax.data <- rbind(annual.tmax.data,annual.tmax.data.i)
}
library(stringr)
library(ncdf4)
library(dplyr)
library(lubridate)
library(ggplot2)
library(cowplot)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
tmax.path <- file.path(directory, "tmax")
files <- list.files(tmax.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
annual.tmax.data <- data.frame(site_location_name = NA,
tmax_sd = as.numeric(NA),
tmax_mean = as.numeric(NA),
tmax_cv = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
print(site.location.name)
nc.path <- file.path(tmax.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'tmax')
daily.tmax <- data.frame(tmax = var, time = dates)
# So its in the range of July-June
daily.tmax <- subset(daily.tmax, subset = (time >= "1987-07-01" & time <= "2022-07-01"))
rownames(daily.tmax) <- 1:nrow(daily.tmax)
daily.tmax$group.col <- rep(NA, nrow(daily.tmax))
bound <- '-07-01'
for(year in 1987:2021) {
lower.b <- as.Date(paste0(year, bound))
upper.b <- as.Date(paste0(year+1, bound))
daily.tmax[daily.tmax$time >= lower.b &  daily.tmax$time < upper.b,]$group.col <- paste(year,year+1, sep = "-")
}
single.annual.mean <- aggregate(daily.tmax[,c('tmax')], by = list(daily.tmax$group.col), FUN = sum)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.tmax.data.i <- data.frame(site_location_name = site.location.name,
tmax_sd = annual.sd,
tmax_mean = mean(single.annual.mean$x),
tmax_cv = annual.cv)
annual.tmax.data <- rbind(annual.tmax.data,annual.tmax.data.i)
}
View(annual.tmax.data)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
tmax.path <- file.path(directory, "tmax")
files <- list.files(tmax.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
annual.tmax.data <- data.frame(site_location_name = NA,
tmax_sd = as.numeric(NA),
tmax_mean = as.numeric(NA),
tmax_cv = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
print(site.location.name)
nc.path <- file.path(tmax.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'tmax')
daily.tmax <- data.frame(tmax = var, time = dates)
# So its in the range of July-June
daily.tmax <- subset(daily.tmax, subset = (time >= "1987-07-01" & time <= "2022-07-01"))
rownames(daily.tmax) <- 1:nrow(daily.tmax)
daily.tmax$group.col <- rep(NA, nrow(daily.tmax))
bound <- '-07-01'
for(year in 1987:2021) {
lower.b <- as.Date(paste0(year, bound))
upper.b <- as.Date(paste0(year+1, bound))
daily.tmax[daily.tmax$time >= lower.b &  daily.tmax$time < upper.b,]$group.col <- paste(year,year+1, sep = "-")
}
single.annual.mean <- aggregate(daily.tmax[,c('tmax')], by = list(daily.tmax$group.col), FUN = mean)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.tmax.data.i <- data.frame(site_location_name = site.location.name,
tmax_sd = annual.sd,
tmax_mean = mean(single.annual.mean$x),
tmax_cv = annual.cv)
annual.tmax.data <- rbind(annual.tmax.data,annual.tmax.data.i)
}
View(annual.tmax.data)
annual.tmax.data <- annual.tmax.data[-1,]
save(... = annual.tmax.data, file = 'annual.tmax.data.RData')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
load('annual.precip.data.RData')
load('annual.fc.data.RData')
load('annual.tmax.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
View(annual.fc.data)
View(annual.fc.data)
View(annual.precip.data)
View(precip.fc.data)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = pv_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = bs_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = npv_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_mean, y = temp_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_mean, y = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_pv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
