library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
library(cowplot)
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
# Get Site names
site.names <- unique(veg.info$site.info$site_location_name)
# Count the number of observations of each site
counts.df <- as.data.frame(table(veg.info$site.info$site_location_name))
sites.revisit.2.df <- subset(counts.df, Freq == 2) # For sites that were only visited twice
# Merge sites with counts == 2 with current veg information
site.info.df <- as.data.frame(veg.info$site.info)
site.info.df <- merge(site.info.df, insitu.fractional.cover, by = "site_unique")
# Remeasure Counts
counts.df <- as.data.frame(table(site.info.df$site_location_name))
sites.revisit.2.df <- subset(counts.df, Freq == 2) # For sites that were only visited twice
# Subset based on counts
site.info.df.revisit <- subset(site.info.df, subset = site_location_name %in% sites.revisit.2.df$Var1)
site.info.df.revisit$visit_start_date <- as.Date(site.info.df.revisit$visit_start_date)
# Subset based on the avaliable dea information
site.info.df.revisit <- subset(site.info.df.revisit, subset = site_location_name %in% fileNames)
table(site.info.df.revisit$site_location_name)
ggplot(data = site.info.df.revisit, aes(x = visit_start_date, y = green)) +
geom_point() + facet_grid(~state)
## Now to get the change in FC in-situ
site.location.names <- unique(site.info.df.revisit$site_location_name)
site.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
green = as.numeric(NA),
brown = as.numeric(NA),
bare = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(site.info.df.revisit, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$visit_start_date, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("green", "brown", "bare")] - visit.data[2, c("green", "brown", "bare")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
site.fc.change.df <- rbind(site.fc.change.df, change)
}
site.fc.change.df <- site.fc.change.df[-1,]
bare.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = bare)) + geom_histogram()
green.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = green)) + geom_histogram()
brown.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = brown)) + geom_histogram()
plot_grid(bare.pl, green.pl, brown.pl)
dea.fc.means.df <- data.frame(site_location_name = NA,
time = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA),
spatial_ref = NA)
missing.data <- c()
for (RI in 1:nrow(site.info.df.revisit)) {
site.location <- site.fc.change.df$site_location_name[RI]
print(site.location)
#print(site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
if(nrow(dea.data) > 0){
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
dea.data.agg <- dea.data.agg[,c("Group.1", "pv", "npv", "bs", "spatial_ref")]
visit.times <- subset(site.info.df.revisit,
subset = (site_location_name == site.location))
means <- data.frame(Group.1 = as.Date(NA), bs = NA, npv = NA, pv = NA, spatial_ref = NA)
for(i in 1:nrow(visit.times)){
date <- visit.times$visit_start_date[i]
#print(date)
times.forwards <- seq(date, by='1 days', length = 31)
times.backwards <- seq(date, by='-1 days', length = 31)
closest.times <- rbind(dea.data.agg[dea.data.agg$Group.1 %in%times.forwards,],
dea.data.agg[dea.data.agg$Group.1 %in%times.backwards,])
#print(closest.times)
means <- rbind(means,data.frame(Group.1 = date, lapply(closest.times[,c("bs","npv","pv", "spatial_ref")],
FUN = mean, na.rm = T)))
#print(means)
}
#print(means)
means <- means[-1,]
means$site_location_name <- rep(site.location, nrow(means))
#print(means)
colnames(means)[which(colnames(means) == "Group.1")] = "time"
#print(means)
dea.fc.means.df <- rbind(dea.fc.means.df, means)
} else{
missing.data <- c(missing.data, site.location)
}
}
View(site.info.df.revisit)
dea.fc.means.df <- data.frame(site_location_name = NA,
time = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA),
spatial_ref = NA)
missing.data <- c()
for (RI in 1:nrow(site.info.df.revisit)) {
site.location <- site.info.df.revisit$site_location_name[RI]
print(site.location)
#print(site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
if(nrow(dea.data) > 0){
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
dea.data.agg <- dea.data.agg[,c("Group.1", "pv", "npv", "bs", "spatial_ref")]
visit.times <- subset(site.info.df.revisit,
subset = (site_location_name == site.location))
means <- data.frame(Group.1 = as.Date(NA), bs = NA, npv = NA, pv = NA, spatial_ref = NA)
for(i in 1:nrow(visit.times)){
date <- visit.times$visit_start_date[i]
#print(date)
times.forwards <- seq(date, by='1 days', length = 31)
times.backwards <- seq(date, by='-1 days', length = 31)
closest.times <- rbind(dea.data.agg[dea.data.agg$Group.1 %in%times.forwards,],
dea.data.agg[dea.data.agg$Group.1 %in%times.backwards,])
#print(closest.times)
means <- rbind(means,data.frame(Group.1 = date, lapply(closest.times[,c("bs","npv","pv", "spatial_ref")],
FUN = mean, na.rm = T)))
#print(means)
}
#print(means)
means <- means[-1,]
means$site_location_name <- rep(site.location, nrow(means))
#print(means)
colnames(means)[which(colnames(means) == "Group.1")] = "time"
#print(means)
dea.fc.means.df <- rbind(dea.fc.means.df, means)
} else{
missing.data <- c(missing.data, site.location)
}
}
dea.fc.means.df <- data.frame(site_location_name = NA,
time = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA),
spatial_ref = NA)
missing.data <- c()
for (RI in 1:nrow(site.fc.change.df)) {
site.location <- site.fc.change.df$site_location_name[RI]
print(site.location)
#print(site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
if(nrow(dea.data) > 0){
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
dea.data.agg <- dea.data.agg[,c("Group.1", "pv", "npv", "bs", "spatial_ref")]
visit.times <- subset(site.info.df.revisit,
subset = (site_location_name == site.location))
means <- data.frame(Group.1 = as.Date(NA), bs = NA, npv = NA, pv = NA, spatial_ref = NA)
for(i in 1:nrow(visit.times)){
date <- visit.times$visit_start_date[i]
#print(date)
times.forwards <- seq(date, by='1 days', length = 31)
times.backwards <- seq(date, by='-1 days', length = 31)
closest.times <- rbind(dea.data.agg[dea.data.agg$Group.1 %in%times.forwards,],
dea.data.agg[dea.data.agg$Group.1 %in%times.backwards,])
#print(closest.times)
means <- rbind(means,data.frame(Group.1 = date, lapply(closest.times[,c("bs","npv","pv", "spatial_ref")],
FUN = mean, na.rm = T)))
#print(means)
}
#print(means)
means <- means[-1,]
means$site_location_name <- rep(site.location, nrow(means))
#print(means)
colnames(means)[which(colnames(means) == "Group.1")] = "time"
#print(means)
dea.fc.means.df <- rbind(dea.fc.means.df, means)
} else{
missing.data <- c(missing.data, site.location)
}
}
View(dea.fc.means.df)
dea.fc.means.df <- dea.fc.means.df[-1,]
# Now get the change in fc
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.change.df, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.change.df, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.change.df, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.change.df, subset = (site_location_name == name))
print(visit.data)
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
View(dea.fc.means.df)
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.means.df, subset = (site_location_name == name))
print(visit.data)
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$visit_start_date[2]
change$visit_start_date_b <- visit.data$visit_start_date[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.means.df, subset = (site_location_name == name))
print(visit.data)
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
#print(visit.data[, c("visit_start_date","green", "brown", "bare")])
change <- visit.data[1, c("pv", "npv", "bs")] - visit.data[2, c("pv", "npv", "bs")]
#print(change)
change$visit_start_date_a <- visit.data$time[2]
change$visit_start_date_b <- visit.data$time[1]
change$site_location_name <- name
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
View(site.fc.change.df)
dea.fc.change.df <- dea.fc.change.df[-1,]
merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
both.changs.df <- merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point()
ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point() + geom_abline()
ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point() + geom_abline(intercep = 0, slope = 1)
ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point() + geom_abline(intercep = 0, slope = 1)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point()
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point()
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point()
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point()
plot_grid(bs.bare.pl,npv.brown.pl,npv.brown.pl)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point() + geom_abline(slope = 1, intercept = 0)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl)
+ geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
+ geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\U+0394 in-situ bare", y = "\U+0394 remote bare")
+ geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl)
bs.bare.pl
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 in-situ bare", y = "\u0394 remote bare")
bs.bare.pl
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare (in-situ)", y = "\u0394 bare (remote)")
+ geom_point() + geom_abline(slope = 1, intercept = 0)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare (in-situ)", y = "\u0394 bare (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
bs.bare.pl
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl)
?melt
??long
?flatten(
?flatten
library(data.table)
data.table::melt(dea.fc.change.df)
reshape2::melt(dea.fc.change.df)
?melt
reshape2::melt(dea.fc.change.df, id.vars = c('visit_start_date_a', 'site_location_name', 'visit_start_date_b'))
reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'))
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'))
site.fc.change.df.long <- reshape2::melt(site.fc.change.df.long, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'))
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'))
merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
both.changs.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = remote.cover)
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
both.changs.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
View(both.changs.df.long)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = insitu.cover, y = insitu.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
all.pl <- ggplot(data = both.changs.df, aes(x = insitu.cover, y = insitu.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = insitu.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
View(both.changes.df.long)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv)) + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable.y)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'pv'] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'npv'] <- 'brown'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'bs'] <- 'bare'
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable.y)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'pv'] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'npv'] <- 'brown'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'bs'] <- 'bare'
View(dea.fc.change.df.long)
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable) == 'pv']
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'pv')] <- 'green'
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'pv')] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'bs')]
class(dea.fc.change.df.long)
class(dea.fc.change.df.long$variable)
dea.fc.change.df.long$variable <- as.character(dea.fc.change.df.long$variable)
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'pv')] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'npv')] <- 'brown'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'bs')] <- 'bare'
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable <- as.character(dea.fc.change.df.long$variable)
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'pv')] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'npv')] <- 'brown'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'bs')] <- 'bare'
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
all.pl <- ggplot(data = both.changes.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0)
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
