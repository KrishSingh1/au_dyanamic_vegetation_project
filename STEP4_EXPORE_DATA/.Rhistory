ggplotly(change.p)
change.p <- ggplot(growth.form.strata.change ,map = aes(x = percentage_cover.x, y = percentage_cover.y,
colour =  strata)) + geom_point() + geom_abline() +
facet_grid(~strata)
ggplotly(change.p)
ggplotly(change.p, tooltip = c("occurance.x", "occurance.y",
"growth.form", "visit_start_date.x",
"visit_start_date.y"))
?growth_form_table
View(growth.form)
growth.form <- readRDS("growth_form_matrix.rds")
growth.form.strata <- growth_form_table(veg.info$veg.PI, m_kind = "percent_cover",
cumulative = FALSE, by_strata = TRUE)
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
site.names <- unique(veg.info$site.info$site_location_name)
site.observations <- unique(veg.info$site.info$site_unique)
df <- as.data.frame(t(data.frame(purrr::flatten(lapply(site.observations, strsplit, '-')))))
counts <- c()
for (n in site.names){
counts <- c(counts, sum(df$V1 == n))
}
counts.df <- data.frame(site.names, counts)
sites.revisit.df <- subset(counts.df, counts > 1) # For all revisited data
sites.revisit.2.df <- subset(counts.df, counts == 2) # For sites that were only visited twice
info <- as.data.frame(veg.info$site.info)[,c("site_location_name", "visit_start_date", "site_unique")]
info.revisit.2 <- subset(info, subset = (site_location_name %in% sites.revisit.2.df$site.names))
info.revisit.2$visit_start_date <- as.Date(info.revisit.2$visit_start_date)
info.revisit.2.sorted <- info.revisit.2 %>% arrange(+visit_start_date)
indexes <- c()
for (n in sites.revisit.2.df$site.names){
indexes <- c(indexes, which(info.revisit.2.sorted$site_location_name == n)[1])
}
info.revisit.2.t1 <- info.revisit.2.sorted[indexes,]
info.revisit.2.t2 <- info.revisit.2.sorted[-indexes,]
growth.form$site_unique <- rownames(growth.form)
growth.form.df <- melt(growth.form, id = "site_unique",
variable.name = "growth.form", value.name = "occurance")
growth.form.df.t1 <- merge(growth.form.df, info.revisit.2.t1, by = 'site_unique')
growth.form.df.t2 <- merge(growth.form.df, info.revisit.2.t2, by = 'site_unique')
length(unique(growth.form.df.t1$site_location_name))
length(unique(growth.form.df.t2$site_location_name))
missing_location.t1 <- setdiff(unique(growth.form.df.t1$site_location_name),
unique(growth.form.df.t2$site_location_name))
missing_location.t2 <- setdiff(unique(growth.form.df.t2$site_location_name),
unique(growth.form.df.t1$site_location_name))
growth.form.df.t1.filtered <-subset(growth.form.df.t1,
subset = !(site_location_name %in% missing_location.t1)) %>%
arrange(site_location_name, growth.form)
growth.form.df.t2.filtered <-subset(growth.form.df.t2,
subset = !(site_location_name %in% missing_location.t2)) %>%
arrange(site_location_name, growth.form)
# Check if the column values for growth form and site_location_name are identitcal
all(growth.form.df.t1.filtered$growth.form == growth.form.df.t2.filtered$growth.form) ==
all(growth.form.df.t1.filtered$site_location_name == growth.form.df.t2.filtered$site_location_name)
growth.form.change.df <- merge(growth.form.df.t1.filtered, growth.form.df.t2.filtered, by = c("site_location_name", "growth.form"))
change.p <- ggplot(growth.form.change.df ,map = aes(x = occurance.x, y = occurance.y,
colour =  growth.form)) + geom_point() + geom_abline() + geom_smooth()
ggplotly(change.p, tooltip = c("occurance.x", "occurance.y",
"growth.form", "visit_start_date.x",
"visit_start_date.y"))
load('annual.precip.data.RData')
load('annual.fc.data.RData')
load('annual.tmax.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
RI = which(file.names == 'NSAMDD0032') # record index
site.info.data <- veg.info$site.info
site.info.index <- which(site.info.data$site_location_name == file.names[RI])
site.info.data <- site.info.data[site.info.index,]
ausplots.fc <- insitu.fractional.cover[grep(file.names[RI], insitu.fractional.cover$site_unique),]
site.info.data <- merge(ausplots.fc, site.info.data, by = 'site_unique')
site.path <- paste(directory,files[RI],sep = "")
dea.data <- read.csv(site.path)
dea.data <- subset(dea.data, subset = (ue < 27))
dea.data <- trim_to_nearest_coord(site.info.index, veg.info, dea.data, sites.query)
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
posit.date <- as.POSIXlt(dea.data.agg$Group.1) # for use for a later section: smoothing time series
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
## Get essential data from Ausplots
site.info.data.essen <- site.info.data[,c("visit_start_date", "bare",
"brown", "green" )]
site.info.data.essen$visit_start_date <- as.Date(site.info.data.essen$visit_start_date)
colnames(site.info.data.essen) <- colnames(
dea.data.agg[,c("Group.1","bs","npv","pv")]
)
dea.data.agg.essen <- dea.data.agg[,c("Group.1","bs","npv","pv", "ue")]
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bare")) +
geom_line(mapping = aes(y = npv, colour = "brown")) +
geom_line(mapping = aes(y = pv, colour = "green")) +
#geom_line(mapping = aes(y = ue, colour = "ue")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(title = file.names[RI]) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bare.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "brown.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "green.obs")) +
scale_color_manual(
name = "Cover Types",
values = c("bare" = "red", "brown" = "blue", "green" = "green",# "ue" = "yellow",
"bare.obs" = "darkred", "brown.obs" = "darkblue",
"green.obs" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
View(site.info.data)
citation(leaflet)
library(leaflet)
citation(leaflet)
citation(x = leaflet)
?leaflet
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
library(ggplot2)
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_new_aggregation.csv")
View(dea.fc.sites.nearest)
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
View(insitu.fractional.cover)
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
View(dea.fc.sites.plotting)
library(ausplotsR)
library(reshape2)
library(ggplot2)
library(dplyr)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
View(veg.info)
veg.info[["citation"]]
?ausplotsR
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
site.names <- tools::file_path_sans_ext(files)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_sumaries = T,
veg.pi = T, site_info = T,
dictionary = T, veg.vouchers = T)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_sumaries = T,
veg.PI = T, site_info = T,
dictionary = T, veg.vouchers = T)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_summaries = T,
veg.PI = T, site_info = T,
dictionary = T, veg.vouchers = T)
saveRDS(my.data, file = "site_veg_2-0-3.rds")
View(my.data)
my.data[["metadata.dictionary"]][["variableDefinition"]]
library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
library(cowplot)
library(data.table)
library(tune)
library(ggpubr)
library(ggpmisc)
library(Matrix)
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
# Get Needed datasets
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
# Get Site names
site.names <- unique(veg.info$site.info$site_location_name)
# Count the number of observations of each site
counts.df <- as.data.frame(table(veg.info$site.info$site_location_name))
sites.revisit.2.df <- subset(counts.df, Freq >= 2) # For sites that were visited two or more
# Merge sites with counts == 2 with current veg information
site.info.df <- as.data.frame(veg.info$site.info)
site.info.df <- merge(site.info.df, insitu.fractional.cover, by = "site_unique")
# Remove in-situ fractional cover of sites with an NA. of above 10%.
site.info.df <- subset(site.info.df, subset = (NA. <= 10))
# Remeasure Counts
counts.df <- as.data.frame(table(site.info.df$site_location_name))
sites.revisit.2.df <- subset(counts.df, Freq >= 2) # For sites that were visited two or more
# Subset based on counts
site.info.df.revisit <- subset(site.info.df, subset = site_location_name %in% sites.revisit.2.df$Var1)
site.info.df.revisit$visit_start_date <- as.Date(site.info.df.revisit$visit_start_date)
# Subset based on the avaliable dea information
site.info.df.revisit <- subset(site.info.df.revisit, subset = site_location_name %in% fileNames)
table(site.info.df.revisit$site_location_name)
ggplot(data = site.info.df.revisit, aes(x = visit_start_date, y = green)) +
geom_point() + facet_grid(~state)
## Now to get the change in FC in-situ
site.location.names <- unique(site.info.df.revisit$site_location_name)
site.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
green = as.numeric(NA),
brown = as.numeric(NA),
bare = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(site.info.df.revisit, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$visit_start_date, decreasing =  T),]
samples <- nrow(visit.data)
change <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
green = as.numeric(NA),
brown = as.numeric(NA),
bare = as.numeric(NA))
for(i in 1:(samples - 1)) {
b <- visit.data[i, c("green", "brown", "bare")]
a <- visit.data[i+1, c("green", "brown", "bare")]
print(visit.data[i:(i+1), c("site_location_name", "green", "brown", "bare", "visit_start_date")])
change.i <- b - a
change.i$visit_start_date_a <- visit.data$visit_start_date[i+1]
change.i$visit_start_date_b <- visit.data$visit_start_date[i]
change.i$site_location_name <- name
print(change.i)
#print(change.i)
change <- rbind(change, change.i)
}
if(samples > 2) {
print("From beginning to end")
b <- visit.data[1, c("green", "brown", "bare")]
a <- visit.data[samples, c("green", "brown", "bare")]
print(visit.data[1:samples, c("site_location_name", "green", "brown", "bare", "visit_start_date")])
change.i <- b - a
change.i$visit_start_date_a <- visit.data$visit_start_date[samples]
change.i$visit_start_date_b <- visit.data$visit_start_date[1]
change.i$site_location_name <- name
print(change.i)
#print(change.i)
change <- rbind(change, change.i)
}
change <- change[-1,]
#print(change)
site.fc.change.df <- rbind(site.fc.change.df, change)
}
site.fc.change.df <- site.fc.change.df[-1,]
bare.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = bare)) + geom_histogram()
green.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = green)) + geom_histogram()
brown.pl <- ggplot(data = site.fc.change.df, mapping = aes(x = brown)) + geom_histogram()
plot_grid(bare.pl, green.pl, brown.pl)
use.saved.data <- T
if(!use.saved.data) {
dea.fc.means.df <- data.frame(site_location_name = NA,
time = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA),
spatial_ref = NA)
missing.data <- c()
site.fc.change.df.names <- unique(site.fc.change.df$site_location_name)
for (site.location in site.fc.change.df.names) {
print(site.location)
site.path <- file.path(directory,paste0(site.location,".csv"))
ausplots.info.i.index <- which(veg.info$site.info$site_location_name == site.location)
dea.data <- read.csv(site.path)
dea.data <- subset(dea.data, subset = (ue < 27))
dea.data <- trim_to_nearest_coord(ausplots.info.i.index, veg.info, dea.data, sites.query)
if(nrow(dea.data) > 0){
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
dea.data.agg <- dea.data.agg[,c("Group.1", "pv", "npv", "bs", "spatial_ref")]
visit.times <- subset(site.info.df.revisit,
subset = (site_location_name == site.location))
means <- data.frame(Group.1 = as.Date(NA), bs = NA, npv = NA, pv = NA, spatial_ref = NA)
for(i in 1:nrow(visit.times)){
date <- visit.times$visit_start_date[i]
#print(date)
times.forwards <- seq(date, by='1 days', length = 31)
times.backwards <- seq(date, by='-1 days', length = 31)
closest.times <- rbind(dea.data.agg[dea.data.agg$Group.1 %in%times.forwards,],
dea.data.agg[dea.data.agg$Group.1 %in%times.backwards,])
#print(closest.times)
means <- rbind(means,data.frame(Group.1 = date, lapply(closest.times[,c("bs","npv","pv", "spatial_ref")],
FUN = mean, na.rm = T)))
#print(means)
}
#print(means)
means <- means[-1,]
means$site_location_name <- rep(site.location, nrow(means))
#print(means)
colnames(means)[which(colnames(means) == "Group.1")] = "time"
#print(means)
dea.fc.means.df <- rbind(dea.fc.means.df, means)
} else{
missing.data <- c(missing.data, site.location)
}
}
dea.fc.means.df <- dea.fc.means.df[-1,]
#save(dea.fc.means.df, file =  "dea.fc.means.df_23108.RData")
} else {
load('dea.fc.means.df_231011.RData')
}
site.location.names <- unique(dea.fc.means.df$site_location_name)
dea.fc.change.df <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
for (name in site.location.names) {
visit.data <- subset(dea.fc.means.df, subset = (site_location_name == name))
visit.data <- visit.data[order(visit.data$time, decreasing =  T),]
change <- data.frame(site_location_name = NA,
visit_start_date_a = as.Date(NA),
visit_start_date_b = as.Date(NA),
pv = as.numeric(NA),
npv = as.numeric(NA),
bs = as.numeric(NA))
samples <- nrow(visit.data)
for(i in 1:(samples - 1)) {
b <- visit.data[i, c("pv", "npv", "bs")]
a <- visit.data[i+1, c("pv", "npv", "bs")]
print(visit.data[i:(i+1), c("site_location_name", "pv", "npv", "bs", "time")])
change.i <- b - a
change.i$visit_start_date_a <- visit.data$time[i+1]
change.i$visit_start_date_b <- visit.data$time[i]
change.i$site_location_name <- name
print(change.i)
#print(change.i)
change <- rbind(change, change.i)
}
if(samples > 2) {
print("From beginning to end")
b <- visit.data[1, c("pv", "npv", "bs")]
a <- visit.data[samples, c("pv", "npv", "bs")]
print(visit.data[1:samples, c("site_location_name", "pv", "npv", "bs", "time")])
change.i <- b - a
change.i$visit_start_date_a <- visit.data$time[samples]
change.i$visit_start_date_b <- visit.data$time[1]
change.i$site_location_name <- name
print(change.i)
#print(change.i)
change <- rbind(change, change.i)
}
change <- change[-1,]
#print(change)
dea.fc.change.df <- rbind(dea.fc.change.df, change)
}
dea.fc.change.df <- dea.fc.change.df[-1,]
both.changs.df <- merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
bs.bare.pl <- ggplot(data = both.changs.df, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
pv.green.pl <- ggplot(data = both.changs.df, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
npv.brown.pl <- ggplot(data = both.changs.df, aes(x = brown, y = npv), colour = 'blue') + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100))
all.pl <- ggplot(data = both.changs.df) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_point(aes(x = green, y = pv, colour = 'green')) +
geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
both.changs.df <- merge(dea.fc.change.df,site.fc.change.df, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b"))
both.changes.agg <- aggregate(both.changs.df[,c("pv","npv","bs", "green", "brown", "bare")],
list(both.changs.df$site_location_name), FUN = mean, na.rm = T)
bs.stats <- lm(bs~bare,both.changes.agg)
bs.bare.pl <- ggplot(data = both.changes.agg, aes(x = bare, y = bs)) + labs(x = "\u0394 bare cover (in-situ)", y = "\u0394 bare cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + xlim(c(-100,100)) + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
bs.bare.pl
pv.stats <- lm(pv~green,both.changes.agg)
pv.green.pl <- ggplot(data = both.changes.agg, aes(x = green, y = pv)) + labs(x = "\u0394 green cover (in-situ)", y = "\u0394 green cover (remote)") +
geom_point() + geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100)) + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
npv.stats <- lm(npv~brown,both.changes.agg)
npv.brown.pl <- ggplot(data = both.changes.agg, aes(x = brown, y = npv), colour = 'blue') + geom_point() + labs(x = "\u0394 brown cover (in-situ)", y = "\u0394 brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + xlim(c(-100,100)) + ylim(c(-100,100)) +  geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
npv.brown.pl
dea.fc.change.df.long <- reshape2::melt(dea.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name ="remote.cover")
site.fc.change.df.long <- reshape2::melt(site.fc.change.df, id.vars = c('site_location_name', 'visit_start_date_a', 'visit_start_date_b'), value.name = "insitu.cover")
dea.fc.change.df.long$variable <- as.character(dea.fc.change.df.long$variable)
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'pv')] <- 'green'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'npv')] <- 'brown'
dea.fc.change.df.long$variable[which(dea.fc.change.df.long$variable == 'bs')] <- 'bare'
both.changes.df.long <- merge(dea.fc.change.df.long, site.fc.change.df.long, by = c("site_location_name", "visit_start_date_a",
"visit_start_date_b", 'variable'))
# Note: This means I averaged the changes in cover
both.changes.agg.long <-aggregate(cbind(remote.cover, insitu.cover) ~ site_location_name + variable, data = both.changes.df.long, FUN = mean, na.rm = T)
all.stats <- lm(remote.cover~insitu.cover,both.changes.agg.long)
# This is the validation plot - to see if the conversion process did not change the actual data and will produce equivalent statistics
all.pl.validate <- ggplot(data = both.changes.agg.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(-100,100)) + ylim(c(-100,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
all.pl <- ggplot(data = both.changes.agg) + geom_point(aes(x = brown, y = npv, colour = 'brown')) + geom_point(aes(x = green, y = pv, colour = 'green')) +
geom_point(aes(x = bare, y = bs, colour = 'bare')) +labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred() + scale_colour_manual(name = 'Cover', values = c('brown' = 'blue', 'green' = 'green', 'bare' = 'red')) +
xlim(c(-100,100)) + ylim(c(-100,100))  + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]]) + stat_poly_eq(data = both.changes.agg.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
all.pl
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
# This is to validate to see if the long format dataset is equivalent to the wide one
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl.validate)
both.changes.agg
summary(lm(bs~bare,both.changes.agg))
summary(lm(npv~brown,both.changes.agg))
summary(lm(pv~green,both.changes.agg))
plot_grid(bs.bare.pl,npv.brown.pl,pv.green.pl, all.pl)
