"npixels" = nrow(dea.fc.nearest))
dea.fc.sites.nearest <- rbind(dea.fc.sites.nearest, dea.fc.agg.nearest)
debug_msg(dea.fc.sites.nearest)
}
if(debug) {
break
}
no.files.processed <- no.files.processed + 1
print(paste(no.files - no.files.processed, "left"))
}
View(dea.fc.i)
dea.fc.sites.nearest <- data.frame("site_unique" = NA,
"time" = NA,
"diff" = NA,
"bs" = NA,
"pv" = NA,
"npv" = NA,
"ue" = NA,
"npixels" = NA)
no.files <- length(fileNames)
no.files.processed <- 0
for (file.i in fileNames) {
ausplots.fc.i.index <- grep(file.i, insitu.fractional.cover$site_unique)
ausplots.fc.i <- insitu.fractional.cover[ausplots.fc.i.index,]
dea.file.path <- file.path(directory, paste0(file.i, ".csv"))
dea.fc.i <- read.csv(dea.file.path)
dea.fc.i$time <- as.Date(dea.fc.i$time)
print(max(dea.fc.i$ue))
dea.fc.i <- subset(dea.fc.i, subset = (ue < 27))
break
site.info.index <- which(veg.info$site.info$site_location_name == file.i)
dea.fc.i <- trim_to_nearest_coord(site.info.index, veg.info, dea.fc.i, sites.query)
for (i in ausplots.fc.i$site_unique) {
ausplots.info.i.index <- grep(i, veg.info$site.info$site_unique)
debug_msg(ausplots.info.i.index)
ausplots.date.i <- as.Date(veg.info$site.info$visit_start_date[ausplots.info.i.index])
debug_msg(ausplots.date.i)
times.forwards <- seq(ausplots.date.i, by='1 days', length = 31)
debug_msg(times.forwards)
times.backwards <- seq(ausplots.date.i, by='-1 days', length = 31)
debug_msg(times.backwards)
forward.nearest <- get_1_directional_nearest_timestep(times.forwards,
dea.fc.i, ausplots.date.i)
backwards.nearest <- get_1_directional_nearest_timestep(times.backwards,
dea.fc.i, ausplots.date.i)
timestamp.nearest <- get_nearest_timestep(forward.nearest, backwards.nearest)
debug_msg(timestamp.nearest)
dea.fc.nearest <- subset(dea.fc.i, subset = (time == timestamp.nearest[1]))
debug_msg(dea.fc.nearest)
#dea.fc.nearest.test <- dea.fc.nearest
## Note I disabled spatial trimming for now
dea.fc.agg.nearest <- data.frame("site_unique" = i, "time" = timestamp.nearest[1],
"diff" = as.numeric(timestamp.nearest[2]),
lapply(dea.fc.nearest[,c("bs","pv","npv","ue")], mean, na.rm = T),
"npixels" = nrow(dea.fc.nearest))
dea.fc.sites.nearest <- rbind(dea.fc.sites.nearest, dea.fc.agg.nearest)
debug_msg(dea.fc.sites.nearest)
}
if(debug) {
break
}
no.files.processed <- no.files.processed + 1
print(paste(no.files - no.files.processed, "left"))
}
dea.fc.sites.nearest <- data.frame("site_unique" = NA,
"time" = NA,
"diff" = NA,
"bs" = NA,
"pv" = NA,
"npv" = NA,
"ue" = NA,
"npixels" = NA)
no.files <- length(fileNames)
no.files.processed <- 0
for (file.i in fileNames) {
ausplots.fc.i.index <- grep(file.i, insitu.fractional.cover$site_unique)
ausplots.fc.i <- insitu.fractional.cover[ausplots.fc.i.index,]
dea.file.path <- file.path(directory, paste0(file.i, ".csv"))
dea.fc.i <- read.csv(dea.file.path)
dea.fc.i$time <- as.Date(dea.fc.i$time)
print(max(dea.fc.i$ue, na.rm = T))
dea.fc.i <- subset(dea.fc.i, subset = (ue < 27))
break
site.info.index <- which(veg.info$site.info$site_location_name == file.i)
dea.fc.i <- trim_to_nearest_coord(site.info.index, veg.info, dea.fc.i, sites.query)
for (i in ausplots.fc.i$site_unique) {
ausplots.info.i.index <- grep(i, veg.info$site.info$site_unique)
debug_msg(ausplots.info.i.index)
ausplots.date.i <- as.Date(veg.info$site.info$visit_start_date[ausplots.info.i.index])
debug_msg(ausplots.date.i)
times.forwards <- seq(ausplots.date.i, by='1 days', length = 31)
debug_msg(times.forwards)
times.backwards <- seq(ausplots.date.i, by='-1 days', length = 31)
debug_msg(times.backwards)
forward.nearest <- get_1_directional_nearest_timestep(times.forwards,
dea.fc.i, ausplots.date.i)
backwards.nearest <- get_1_directional_nearest_timestep(times.backwards,
dea.fc.i, ausplots.date.i)
timestamp.nearest <- get_nearest_timestep(forward.nearest, backwards.nearest)
debug_msg(timestamp.nearest)
dea.fc.nearest <- subset(dea.fc.i, subset = (time == timestamp.nearest[1]))
debug_msg(dea.fc.nearest)
#dea.fc.nearest.test <- dea.fc.nearest
## Note I disabled spatial trimming for now
dea.fc.agg.nearest <- data.frame("site_unique" = i, "time" = timestamp.nearest[1],
"diff" = as.numeric(timestamp.nearest[2]),
lapply(dea.fc.nearest[,c("bs","pv","npv","ue")], mean, na.rm = T),
"npixels" = nrow(dea.fc.nearest))
dea.fc.sites.nearest <- rbind(dea.fc.sites.nearest, dea.fc.agg.nearest)
debug_msg(dea.fc.sites.nearest)
}
if(debug) {
break
}
no.files.processed <- no.files.processed + 1
print(paste(no.files - no.files.processed, "left"))
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
##### Algorithm #####
# 1.  Obtain the insitu fractional cover
# 2.  In a site, obtain corresponding fractional cover
#       from the remote sensing data at the timestamps of ausplots obervations
#        - Note: they need to be within 1 month to control error
# 3.  Take the difference between FC AusPlots and FC remotely sensed data
# 4.  Repeat 2-3 until data for all observations have been found
# 5.  Plot the data
### Some functions ####
get_1_directional_nearest_timestep <- function(time.seq, dea.fc.input, aus.date.input) {
na <- T
for (d in time.seq) {
subsetter <- subset(dea.fc.input, subset = (time == d))
if(nrow(subsetter) > 0 & mean(is.na(subsetter$pv)) < 0.3 ) {
na <- F
break
}
}
if(na) {
return(c(NA, NA))
}
time.stamp <- paste(subsetter$time[1])
time.diff <-  as.numeric(difftime(subsetter$time[1], aus.date.input,
units = 'days'))
return(c(time.stamp, time.diff))
}
get_nearest_timestep <- function(fowards.nearest, backwards.nearest) {
is.for.na <- is.na(fowards.nearest[2])
is.bac.na <- is.na(backwards.nearest[2])
if(is.for.na & is.bac.na){
timestamp.nearest <- c(NA,NA)
} else if (is.for.na) {
timestamp.nearest <- backwards.nearest
} else if (is.bac.na) {
timestamp.nearest <- forward.nearest
} else if (as.numeric(forward.nearest[2]) < abs(as.numeric((backwards.nearest[2])))) {
timestamp.nearest <- forward.nearest
} else {
timestamp.nearest <- backwards.nearest
}
return(timestamp.nearest)
}
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
plot_site_markings <- function(easting.site, northing.site, dea.fc.i) {
MASS::eqscplot(dea.fc.i$x, dea.fc.i$y,tol = .5, xlab = "easting", ylab = "northing")
points(x = easting.site,y = northing.site, pch = 2, col = 'red')
points(x = easting.site+100,y = northing.site, pch = 2, col= 'red')
points(x = easting.site,y = northing.site+100, pch = 2, col= 'red')
points(x = easting.site+100,y = northing.site+100, pch = 2, col= 'red')
}
######### Obtain Dataset for Exploration ###########
dea.fc.sites.nearest <- data.frame("site_unique" = NA,
"time" = NA,
"diff" = NA,
"bs" = NA,
"pv" = NA,
"npv" = NA,
"ue" = NA,
"npixels" = NA)
no.files <- length(fileNames)
no.files.processed <- 0
for (file.i in fileNames) {
ausplots.fc.i.index <- grep(file.i, insitu.fractional.cover$site_unique)
ausplots.fc.i <- insitu.fractional.cover[ausplots.fc.i.index,]
dea.file.path <- file.path(directory, paste0(file.i, ".csv"))
dea.fc.i <- read.csv(dea.file.path)
dea.fc.i$time <- as.Date(dea.fc.i$time)
dea.fc.i <- subset(dea.fc.i, subset = (ue < 27))
site.info.index <- which(veg.info$site.info$site_location_name == file.i)
dea.fc.i <- trim_to_nearest_coord(site.info.index, veg.info, dea.fc.i, sites.query)
for (i in ausplots.fc.i$site_unique) {
ausplots.info.i.index <- grep(i, veg.info$site.info$site_unique)
debug_msg(ausplots.info.i.index)
ausplots.date.i <- as.Date(veg.info$site.info$visit_start_date[ausplots.info.i.index])
debug_msg(ausplots.date.i)
times.forwards <- seq(ausplots.date.i, by='1 days', length = 31)
debug_msg(times.forwards)
times.backwards <- seq(ausplots.date.i, by='-1 days', length = 31)
debug_msg(times.backwards)
forward.nearest <- get_1_directional_nearest_timestep(times.forwards,
dea.fc.i, ausplots.date.i)
backwards.nearest <- get_1_directional_nearest_timestep(times.backwards,
dea.fc.i, ausplots.date.i)
timestamp.nearest <- get_nearest_timestep(forward.nearest, backwards.nearest)
debug_msg(timestamp.nearest)
dea.fc.nearest <- subset(dea.fc.i, subset = (time == timestamp.nearest[1]))
debug_msg(dea.fc.nearest)
#dea.fc.nearest.test <- dea.fc.nearest
## Note I disabled spatial trimming for now
dea.fc.agg.nearest <- data.frame("site_unique" = i, "time" = timestamp.nearest[1],
"diff" = as.numeric(timestamp.nearest[2]),
lapply(dea.fc.nearest[,c("bs","pv","npv","ue")], mean, na.rm = T),
"npixels" = nrow(dea.fc.nearest))
dea.fc.sites.nearest <- rbind(dea.fc.sites.nearest, dea.fc.agg.nearest)
debug_msg(dea.fc.sites.nearest)
}
if(debug) {
break
}
no.files.processed <- no.files.processed + 1
print(paste(no.files - no.files.processed, "left"))
}
debug <- F
debug_msg <- function(msg) {
if (debug) {
print(msg)
}
}
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
##### Algorithm #####
# 1.  Obtain the insitu fractional cover
# 2.  In a site, obtain corresponding fractional cover
#       from the remote sensing data at the timestamps of ausplots obervations
#        - Note: they need to be within 1 month to control error
# 3.  Take the difference between FC AusPlots and FC remotely sensed data
# 4.  Repeat 2-3 until data for all observations have been found
# 5.  Plot the data
### Some functions ####
get_1_directional_nearest_timestep <- function(time.seq, dea.fc.input, aus.date.input) {
na <- T
for (d in time.seq) {
subsetter <- subset(dea.fc.input, subset = (time == d))
if(nrow(subsetter) > 0 & mean(is.na(subsetter$pv)) < 0.3 ) {
na <- F
break
}
}
if(na) {
return(c(NA, NA))
}
time.stamp <- paste(subsetter$time[1])
time.diff <-  as.numeric(difftime(subsetter$time[1], aus.date.input,
units = 'days'))
return(c(time.stamp, time.diff))
}
get_nearest_timestep <- function(fowards.nearest, backwards.nearest) {
is.for.na <- is.na(fowards.nearest[2])
is.bac.na <- is.na(backwards.nearest[2])
if(is.for.na & is.bac.na){
timestamp.nearest <- c(NA,NA)
} else if (is.for.na) {
timestamp.nearest <- backwards.nearest
} else if (is.bac.na) {
timestamp.nearest <- forward.nearest
} else if (as.numeric(forward.nearest[2]) < abs(as.numeric((backwards.nearest[2])))) {
timestamp.nearest <- forward.nearest
} else {
timestamp.nearest <- backwards.nearest
}
return(timestamp.nearest)
}
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
plot_site_markings <- function(easting.site, northing.site, dea.fc.i) {
MASS::eqscplot(dea.fc.i$x, dea.fc.i$y,tol = .5, xlab = "easting", ylab = "northing")
points(x = easting.site,y = northing.site, pch = 2, col = 'red')
points(x = easting.site+100,y = northing.site, pch = 2, col= 'red')
points(x = easting.site,y = northing.site+100, pch = 2, col= 'red')
points(x = easting.site+100,y = northing.site+100, pch = 2, col= 'red')
}
######### Obtain Dataset for Exploration ###########
dea.fc.sites.nearest <- data.frame("site_unique" = NA,
"time" = NA,
"diff" = NA,
"bs" = NA,
"pv" = NA,
"npv" = NA,
"ue" = NA,
"npixels" = NA)
no.files <- length(fileNames)
no.files.processed <- 0
for (file.i in fileNames) {
ausplots.fc.i.index <- grep(file.i, insitu.fractional.cover$site_unique)
ausplots.fc.i <- insitu.fractional.cover[ausplots.fc.i.index,]
dea.file.path <- file.path(directory, paste0(file.i, ".csv"))
dea.fc.i <- read.csv(dea.file.path)
dea.fc.i$time <- as.Date(dea.fc.i$time)
dea.fc.i <- subset(dea.fc.i, subset = (ue < 27))
site.info.index <- which(veg.info$site.info$site_location_name == file.i)
dea.fc.i <- trim_to_nearest_coord(site.info.index, veg.info, dea.fc.i, sites.query)
for (i in ausplots.fc.i$site_unique) {
ausplots.info.i.index <- grep(i, veg.info$site.info$site_unique)
debug_msg(ausplots.info.i.index)
ausplots.date.i <- as.Date(veg.info$site.info$visit_start_date[ausplots.info.i.index])
debug_msg(ausplots.date.i)
times.forwards <- seq(ausplots.date.i, by='1 days', length = 31)
debug_msg(times.forwards)
times.backwards <- seq(ausplots.date.i, by='-1 days', length = 31)
debug_msg(times.backwards)
forward.nearest <- get_1_directional_nearest_timestep(times.forwards,
dea.fc.i, ausplots.date.i)
backwards.nearest <- get_1_directional_nearest_timestep(times.backwards,
dea.fc.i, ausplots.date.i)
timestamp.nearest <- get_nearest_timestep(forward.nearest, backwards.nearest)
debug_msg(timestamp.nearest)
dea.fc.nearest <- subset(dea.fc.i, subset = (time == timestamp.nearest[1]))
debug_msg(dea.fc.nearest)
#dea.fc.nearest.test <- dea.fc.nearest
## Note I disabled spatial trimming for now
dea.fc.agg.nearest <- data.frame("site_unique" = i, "time" = timestamp.nearest[1],
"diff" = as.numeric(timestamp.nearest[2]),
lapply(dea.fc.nearest[,c("bs","pv","npv","ue")], mean, na.rm = T),
"npixels" = nrow(dea.fc.nearest))
dea.fc.sites.nearest <- rbind(dea.fc.sites.nearest, dea.fc.agg.nearest)
debug_msg(dea.fc.sites.nearest)
}
if(debug) {
break
}
no.files.processed <- no.files.processed + 1
print(paste(no.files - no.files.processed, "left"))
}
View(dea.fc.nearest)
View(dea.fc.sites.nearest)
View(dea.fc.sites.nearest)
dea.fc.sites.nearest <- dea.fc.sites.nearest[-1,]
write.csv(dea.fc.sites.nearest, "dea_fc_sites_nearest_filtered_ue.csv")
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
install.packages('Metrics')
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)")
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
cal.bare
# Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)")
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)")
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)")
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs), colour = 'red') + geom_point(aes(x = green, y = pv), colour = '#009E73') + geom_point(aes(x = brown, y = npv), colour = '#0072B2') + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)")
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
install.packages('ausplotsr')
install.packages('ausplotsR')
library(ausplotsR)
fc <- fractional_cover(veg.PI = veg.info$veg.PI, in_canopy_sky = "TRUE")
?fractional_cover
fc <- fractional_cover(veg.PI = veg.info$veg.PI, in_canopy_sky = T)
View(fc)
insitu.fractional.cover <- subset(fc, (NA. <= 10))
fc <- subset(fc, (NA. <= 10))
fc <- subset(fc, (other <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, fc, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + geom_smooth()
ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + geom_smooth()
# Brown
ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + geom_smooth()
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
# Brown
ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100)
#opaque.fc <- fractional_cover(veg.PI = veg.info$veg.PI, in_canopy_sky = "TRUE")
#dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, opaque.fc, by = 'site_unique')
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
# Test subsetting for sites not in proper oriention or marked
#valid_observations <- veg.info$site.info$site_unique[which(veg.info$site.info$plot_is_aligned_to_grid & veg.info$site.info$plot_is_permanently_marked)]
#dea.fc.sites.nearest <- subset(dea.fc.sites.nearest, subset = (site_unique %in% valid_observations))
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels > 100 & npixels <= 121))
# Greenness
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point() + geom_abline() +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)")
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all )
