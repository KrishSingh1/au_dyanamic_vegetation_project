time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'tmax')
daily.tmax <- data.frame(tmax = var, time = dates)
# So its in the range of July-June
daily.tmax <- subset(daily.tmax, subset = (time >= "1987-07-01" & time <= "2022-07-01"))
rownames(daily.tmax) <- 1:nrow(daily.tmax)
daily.tmax$group.col <- rep(NA, nrow(daily.tmax))
bound <- '-07-01'
for(year in 1987:2021) {
lower.b <- as.Date(paste0(year, bound))
upper.b <- as.Date(paste0(year+1, bound))
daily.tmax[daily.tmax$time >= lower.b &  daily.tmax$time < upper.b,]$group.col <- paste(year,year+1, sep = "-")
}
single.annual.mean <- aggregate(daily.tmax[,c('tmax')], by = list(daily.tmax$group.col), FUN = sum)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.tmax.data.i <- data.frame(site_location_name = site.location.name,
tmax_sd = annual.sd,
tmax_mean = mean(single.annual.mean$x),
tmax_cv = annual.cv)
annual.tmax.data <- rbind(annual.tmax.data,annual.tmax.data.i)
}
View(annual.tmax.data)
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
tmax.path <- file.path(directory, "tmax")
files <- list.files(tmax.path, pattern = "\\.nc$", full.names = FALSE) # same for each directory
fileNames <- tools::file_path_sans_ext(files)
annual.tmax.data <- data.frame(site_location_name = NA,
tmax_sd = as.numeric(NA),
tmax_mean = as.numeric(NA),
tmax_cv = as.numeric(NA))
for(RI in 1:length(fileNames)) {
site.location.name <- stringr::str_split(fileNames[RI], "_")[[1]][1]
print(site.location.name)
nc.path <- file.path(tmax.path, files[RI])
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'tmax')
daily.tmax <- data.frame(tmax = var, time = dates)
# So its in the range of July-June
daily.tmax <- subset(daily.tmax, subset = (time >= "1987-07-01" & time <= "2022-07-01"))
rownames(daily.tmax) <- 1:nrow(daily.tmax)
daily.tmax$group.col <- rep(NA, nrow(daily.tmax))
bound <- '-07-01'
for(year in 1987:2021) {
lower.b <- as.Date(paste0(year, bound))
upper.b <- as.Date(paste0(year+1, bound))
daily.tmax[daily.tmax$time >= lower.b &  daily.tmax$time < upper.b,]$group.col <- paste(year,year+1, sep = "-")
}
single.annual.mean <- aggregate(daily.tmax[,c('tmax')], by = list(daily.tmax$group.col), FUN = mean)
annual.sd <- sd(single.annual.mean$x)
annual.mean <- mean(single.annual.mean$x)
annual.cv <- annual.sd / annual.mean
annual.tmax.data.i <- data.frame(site_location_name = site.location.name,
tmax_sd = annual.sd,
tmax_mean = mean(single.annual.mean$x),
tmax_cv = annual.cv)
annual.tmax.data <- rbind(annual.tmax.data,annual.tmax.data.i)
}
View(annual.tmax.data)
annual.tmax.data <- annual.tmax.data[-1,]
save(... = annual.tmax.data, file = 'annual.tmax.data.RData')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
load('annual.precip.data.RData')
load('annual.fc.data.RData')
load('annual.tmax.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
View(annual.fc.data)
View(annual.fc.data)
View(annual.precip.data)
View(precip.fc.data)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_mean, colour = tmax_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = pv_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = bs_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = npv_cv, colour = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_mean, y = temp_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_mean, y = tmax_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_pv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.pv
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_cv, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_cv , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
# Functions and Libraries --------------------------------------------------
library(stringr)
library(ncdf4)
library(dplyr)
library(lubridate)
library(ggplot2)
library(cowplot)
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
load('annual.precip.data.RData')
load('annual.fc.data.RData')
load('annual.tmax.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = pv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = bs_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x = precip_cv, y = npv_cv)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
library(ausplotsR)
library(reshape2)
library(ggplot2)
library(dplyr)
library(plotly)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
growth.form <- readRDS("growth_form_matrix.rds")
growth.form.strata <- growth_form_table(veg.info$veg.PI, m_kind = "percent_cover",
cumulative = FALSE, by_strata = TRUE)
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
site.names <- unique(veg.info$site.info$site_location_name)
site.observations <- unique(veg.info$site.info$site_unique)
df <- as.data.frame(t(data.frame(purrr::flatten(lapply(site.observations, strsplit, '-')))))
counts <- c()
for (n in site.names){
counts <- c(counts, sum(df$V1 == n))
}
counts.df <- data.frame(site.names, counts)
sites.revisit.df <- subset(counts.df, counts > 1) # For all revisited data
sites.revisit.2.df <- subset(counts.df, counts == 2) # For sites that were only visited twice
info <- as.data.frame(veg.info$site.info)[,c("site_location_name", "visit_start_date", "site_unique")]
info.revisit.2 <- subset(info, subset = (site_location_name %in% sites.revisit.2.df$site.names))
info.revisit.2$visit_start_date <- as.Date(info.revisit.2$visit_start_date)
info.revisit.2.sorted <- info.revisit.2 %>% arrange(+visit_start_date)
indexes <- c()
for (n in sites.revisit.2.df$site.names){
indexes <- c(indexes, which(info.revisit.2.sorted$site_location_name == n)[1])
}
info.revisit.2.t1 <- info.revisit.2.sorted[indexes,]
info.revisit.2.t2 <- info.revisit.2.sorted[-indexes,]
growth.form$site_unique <- rownames(growth.form)
growth.form.df <- melt(growth.form, id = "site_unique",
variable.name = "growth.form", value.name = "occurance")
growth.form.df.t1 <- merge(growth.form.df, info.revisit.2.t1, by = 'site_unique')
growth.form.df.t2 <- merge(growth.form.df, info.revisit.2.t2, by = 'site_unique')
length(unique(growth.form.df.t1$site_location_name))
length(unique(growth.form.df.t2$site_location_name))
missing_location.t1 <- setdiff(unique(growth.form.df.t1$site_location_name),
unique(growth.form.df.t2$site_location_name))
missing_location.t2 <- setdiff(unique(growth.form.df.t2$site_location_name),
unique(growth.form.df.t1$site_location_name))
growth.form.df.t1.filtered <-subset(growth.form.df.t1,
subset = !(site_location_name %in% missing_location.t1)) %>%
arrange(site_location_name, growth.form)
growth.form.df.t2.filtered <-subset(growth.form.df.t2,
subset = !(site_location_name %in% missing_location.t2)) %>%
arrange(site_location_name, growth.form)
# Check if the column values for growth form and site_location_name are identitcal
all(growth.form.df.t1.filtered$growth.form == growth.form.df.t2.filtered$growth.form) ==
all(growth.form.df.t1.filtered$site_location_name == growth.form.df.t2.filtered$site_location_name)
growth.form.change.df <- merge(growth.form.df.t1.filtered, growth.form.df.t2.filtered, by = c("site_location_name", "growth.form"))
change.p <- ggplot(growth.form.change.df ,map = aes(x = occurance.x, y = occurance.y,
colour =  growth.form)) + geom_point() + geom_abline() + geom_smooth()
ggplotly(change.p, tooltip = c("occurance.x", "occurance.y",
"growth.form", "visit_start_date.x",
"visit_start_date.y"))
growth.form.strata$site_unique <- rownames(growth.form.strata)
growth.form.starta.df <- melt(growth.form.strata, id = "site_unique",
variable.name = "strata", value.name = "percentage_cover")
growth.form.strata.t1 <- merge(growth.form.starta.df,
info.revisit.2.t1, by = 'site_unique')
growth.form.strata.t2 <- merge(growth.form.starta.df,
info.revisit.2.t2, by = 'site_unique')
missing_location.t1 <- setdiff(unique(growth.form.strata.t1$site_location_name), unique(growth.form.strata.t2$site_location_name))
missing_location.t2 <- setdiff(unique(growth.form.strata.t2$site_location_name), unique(growth.form.strata.t1$site_location_name))
growth.form.strata.t1.filtered <-subset(growth.form.strata.t1, subset = !(site_location_name %in% missing_location.t1)) %>%
arrange(site_location_name, strata)
growth.form.strata.t2.filtered <-subset(growth.form.strata.t2, subset = !(site_location_name %in% missing_location.t2)) %>%
arrange(site_location_name, strata)
growth.form.strata.change <- merge(growth.form.strata.t1, growth.form.strata.t2, by = c("site_location_name", "strata"))
change.p <- ggplot(growth.form.strata.change,
map = aes(x = percentage_cover.x, y = percentage_cover.y,
colour =  strata)) + geom_point() + geom_abline()
ggplotly(change.p)
change.p <- ggplot(growth.form.strata.change ,map = aes(x = percentage_cover.x, y = percentage_cover.y,
colour =  strata)) + geom_point() + geom_abline() +
facet_grid(~strata)
ggplotly(change.p)
ggplotly(change.p, tooltip = c("occurance.x", "occurance.y",
"growth.form", "visit_start_date.x",
"visit_start_date.y"))
?growth_form_table
View(growth.form)
growth.form <- readRDS("growth_form_matrix.rds")
growth.form.strata <- growth_form_table(veg.info$veg.PI, m_kind = "percent_cover",
cumulative = FALSE, by_strata = TRUE)
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
site.names <- unique(veg.info$site.info$site_location_name)
site.observations <- unique(veg.info$site.info$site_unique)
df <- as.data.frame(t(data.frame(purrr::flatten(lapply(site.observations, strsplit, '-')))))
counts <- c()
for (n in site.names){
counts <- c(counts, sum(df$V1 == n))
}
counts.df <- data.frame(site.names, counts)
sites.revisit.df <- subset(counts.df, counts > 1) # For all revisited data
sites.revisit.2.df <- subset(counts.df, counts == 2) # For sites that were only visited twice
info <- as.data.frame(veg.info$site.info)[,c("site_location_name", "visit_start_date", "site_unique")]
info.revisit.2 <- subset(info, subset = (site_location_name %in% sites.revisit.2.df$site.names))
info.revisit.2$visit_start_date <- as.Date(info.revisit.2$visit_start_date)
info.revisit.2.sorted <- info.revisit.2 %>% arrange(+visit_start_date)
indexes <- c()
for (n in sites.revisit.2.df$site.names){
indexes <- c(indexes, which(info.revisit.2.sorted$site_location_name == n)[1])
}
info.revisit.2.t1 <- info.revisit.2.sorted[indexes,]
info.revisit.2.t2 <- info.revisit.2.sorted[-indexes,]
growth.form$site_unique <- rownames(growth.form)
growth.form.df <- melt(growth.form, id = "site_unique",
variable.name = "growth.form", value.name = "occurance")
growth.form.df.t1 <- merge(growth.form.df, info.revisit.2.t1, by = 'site_unique')
growth.form.df.t2 <- merge(growth.form.df, info.revisit.2.t2, by = 'site_unique')
length(unique(growth.form.df.t1$site_location_name))
length(unique(growth.form.df.t2$site_location_name))
missing_location.t1 <- setdiff(unique(growth.form.df.t1$site_location_name),
unique(growth.form.df.t2$site_location_name))
missing_location.t2 <- setdiff(unique(growth.form.df.t2$site_location_name),
unique(growth.form.df.t1$site_location_name))
growth.form.df.t1.filtered <-subset(growth.form.df.t1,
subset = !(site_location_name %in% missing_location.t1)) %>%
arrange(site_location_name, growth.form)
growth.form.df.t2.filtered <-subset(growth.form.df.t2,
subset = !(site_location_name %in% missing_location.t2)) %>%
arrange(site_location_name, growth.form)
# Check if the column values for growth form and site_location_name are identitcal
all(growth.form.df.t1.filtered$growth.form == growth.form.df.t2.filtered$growth.form) ==
all(growth.form.df.t1.filtered$site_location_name == growth.form.df.t2.filtered$site_location_name)
growth.form.change.df <- merge(growth.form.df.t1.filtered, growth.form.df.t2.filtered, by = c("site_location_name", "growth.form"))
change.p <- ggplot(growth.form.change.df ,map = aes(x = occurance.x, y = occurance.y,
colour =  growth.form)) + geom_point() + geom_abline() + geom_smooth()
ggplotly(change.p, tooltip = c("occurance.x", "occurance.y",
"growth.form", "visit_start_date.x",
"visit_start_date.y"))
load('annual.precip.data.RData')
load('annual.fc.data.RData')
load('annual.tmax.data.RData')
precip.fc.data <- merge(annual.fc.data, annual.precip.data, by = 'site_location_name')
precip.fc.data <- merge(precip.fc.data, annual.tmax.data, by = 'site_location_name')
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = pv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = bs_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data, aes(x = precip_mean, y = npv_mean, colour = tmax_mean)) +
geom_point() + labs(x = 'Mean Annual Precipitation (mm/y)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = pv_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = bs_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Bare Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) + geom_point(aes(x = precip_cv, y = npv_mean)) +
labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Brown Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
pl.prec.pv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = pv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.bs <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = bs_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
pl.prec.npv <- ggplot(data = precip.fc.data) +
geom_point(aes(x =tmax_mean , y = precip_mean, colour = npv_mean)) #+ labs(x = 'Mean Annual Precipitation (CV)', y = 'Mean Annual Green Cover (%)')
plot_grid(pl.prec.bs, pl.prec.npv, pl.prec.pv)
library(plotly)
library(ggplot2)
library(xts)
library(forecast)
library(seasonal)
library(dplyr)
library(caret)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
trim_to_nearest_coord <- function(ausplots.info.i.index, veg.info, dea.fc.i, reference.query ) {
reference.query.index <- which(reference.query$site_location_name == veg.info$site.info$site_location_name[ausplots.info.i.index][1])
#print(reference.query.index)
# Site End Points:
#W.site <- veg.info$site.info$pit_marker_easting[ausplots.info.i.index][2]
#S.site <- veg.info$site.info$pit_marker_northing[ausplots.info.i.index][2]
W.site <- reference.query$pit_marker_easting[reference.query.index]
S.site <- reference.query$pit_marker_northing[reference.query.index]
N.site <- S.site + 100
E.site <- W.site + 100
#print(W.site)
# Remote End Points:
E.remote.incre <- unique(dea.fc.i$x)
N.remote.incre <- unique(dea.fc.i$y)
# Find Closest Points:
W.closest <- E.remote.incre[which.min(abs(E.remote.incre - W.site))]
E.closest <- E.remote.incre[which.min(abs(E.remote.incre - E.site))]
N.closest <- N.remote.incre[which.min(abs(N.remote.incre - N.site))]
S.closest <- N.remote.incre[which.min(abs(N.remote.incre - S.site))]
#print(W.closest)
#print(E.closest)
#print(N.closest)
#print(S.closest)
# Trim dataset:
trimmed <- subset(dea.fc.i, subset = (x >= W.closest & x <= E.closest &
y >= S.closest & y <= N.closest))
#print(unique(trimmed$x))
#print(unique(trimmed$y))
return(trimmed)
}
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
RI = which(file.names == 'NSAMDD0032') # record index
site.info.data <- veg.info$site.info
site.info.index <- which(site.info.data$site_location_name == file.names[RI])
site.info.data <- site.info.data[site.info.index,]
ausplots.fc <- insitu.fractional.cover[grep(file.names[RI], insitu.fractional.cover$site_unique),]
site.info.data <- merge(ausplots.fc, site.info.data, by = 'site_unique')
site.path <- paste(directory,files[RI],sep = "")
dea.data <- read.csv(site.path)
dea.data <- subset(dea.data, subset = (ue < 27))
dea.data <- trim_to_nearest_coord(site.info.index, veg.info, dea.data, sites.query)
dea.data.agg <- aggregate(dea.data, by = list(dea.data$time),
FUN = mean, na.rm = T)
posit.date <- as.POSIXlt(dea.data.agg$Group.1) # for use for a later section: smoothing time series
dea.data.agg$Group.1 <- as.Date(dea.data.agg$Group.1)
## Get essential data from Ausplots
site.info.data.essen <- site.info.data[,c("visit_start_date", "bare",
"brown", "green" )]
site.info.data.essen$visit_start_date <- as.Date(site.info.data.essen$visit_start_date)
colnames(site.info.data.essen) <- colnames(
dea.data.agg[,c("Group.1","bs","npv","pv")]
)
dea.data.agg.essen <- dea.data.agg[,c("Group.1","bs","npv","pv", "ue")]
## Using ggplotly
pl <- ggplot(dea.data.agg.essen, aes(x = Group.1)) +
geom_line(mapping = aes(y = bs, colour = "bare")) +
geom_line(mapping = aes(y = npv, colour = "brown")) +
geom_line(mapping = aes(y = pv, colour = "green")) +
#geom_line(mapping = aes(y = ue, colour = "ue")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(title = file.names[RI]) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = bs, colour = "bare.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = npv, colour = "brown.obs")) +
geom_point(data = site.info.data.essen,
mapping = aes(x = Group.1, y = pv, colour = "green.obs")) +
scale_color_manual(
name = "Cover Types",
values = c("bare" = "red", "brown" = "blue", "green" = "green",# "ue" = "yellow",
"bare.obs" = "darkred", "brown.obs" = "darkblue",
"green.obs" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "2 months", date_labels = "%Y %b",
date_minor_breaks = "2 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
View(site.info.data)
citation(leaflet)
library(leaflet)
citation(leaflet)
citation(x = leaflet)
?leaflet
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
library(ggplot2)
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_new_aggregation.csv")
View(dea.fc.sites.nearest)
insitu.fractional.cover <- readRDS("AusPlots_fractional_cover.rds")
View(insitu.fractional.cover)
insitu.fractional.cover <- subset(insitu.fractional.cover, (NA. <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
View(dea.fc.sites.plotting)
library(ausplotsR)
library(reshape2)
library(ggplot2)
library(dplyr)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
View(veg.info)
veg.info[["citation"]]
?ausplotsR
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
site.names <- tools::file_path_sans_ext(files)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_sumaries = T,
veg.pi = T, site_info = T,
dictionary = T, veg.vouchers = T)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_sumaries = T,
veg.PI = T, site_info = T,
dictionary = T, veg.vouchers = T)
my.data <- get_ausplots(my.Plot_IDs = site.names, structural_summaries = T,
veg.PI = T, site_info = T,
dictionary = T, veg.vouchers = T)
saveRDS(my.data, file = "site_veg_2-0-3.rds")
View(my.data)
my.data[["metadata.dictionary"]][["variableDefinition"]]
