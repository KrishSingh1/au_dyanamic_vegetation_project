return(corner.points)
}
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
single.points <- subset(kmz_data,(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
View(single.points)
colnames(grouped.points)[1] <- 'Name'
rbind(single.points, grouped.points)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
single.points <- subset(kmz_data,(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
colnames(grouped.points)[1] <- 'Name'
# Combine Single points with polygons
single.points <- st_transform(single.points, st_crs(grouped.points))
st_crs(grouped.points)
grouped.points
?st_cast
st_crs(kmz_data)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
single.points <- subset(kmz_data,(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  st_crs(kmz_data))
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
grouped.points
colnames(grouped.points)[1] <- 'Name'
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Use parralelisation to speed up dataset queries
num_cores <- 6 # adjust according to available CPU cores of your computer (I did n/2 - 1, where n is number of my CPU cores)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf") # get polygons from historical bushfires
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE) # get polygons from ausplots sites
st_crs(kmz_data)
st_crs(single.points)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
grouped.points
single.points
combined <- rbind(single.points[,c("Name", "geometry")], grouped.points)
View(combined)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
# Normal: 281.13 seconds for 11 sites, 6 cores, 200 chunks
stopCluster(cl)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
View(kmz_data)
View(result_list)
View(kmz_data)
# Use parralelisation to speed up dataset queries
num_cores <- 6 # adjust according to available CPU cores of your computer (I did n/2 - 1, where n is number of my CPU cores)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf") # get polygons from historical bushfires
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE) # get polygons from ausplots sites
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]# remove record 126888 as it was not considered to be a valid geometry: see 'Extra'
num_chunks <- 200 # Number of chunks, to further speed up process
hist_chunks <- split(hist.shp, 1:num_chunks)
kmz_data <- kmz_data[1,]
View(kmz_data)
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
result_chunk <- st_join(x = kmz_data, y = chunk, left = FALSE, join = "st_within") # have each worker query based on a chunk of the historical bushfire dataset
return(result_chunk)
}
})
# Normal: 281.13 seconds for 11 sites, 6 cores, 200 chunks
stopCluster(cl)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
s <- hist.shp[kmz_data, ]
View(s)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Use parralelisation to speed up dataset queries
num_cores <- 6 # adjust according to available CPU cores of your computer (I did n/2 - 1, where n is number of my CPU cores)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf") # get polygons from historical bushfires
kmz_data <- st_read("../DATASETS/AusPlots_Location/AusPlots_Geometries_20240415.kml", quiet = TRUE) # get polygons from ausplots sites
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]# remove record 126888 as it was not considered to be a valid geometry: see 'Extra'
num_chunks <- 200 # Number of chunks, to further speed up process
hist_chunks <- split(hist.shp, 1:num_chunks)
kmz_data <- kmz_data[1:20,]
View(kmz_data)
kmz_data <- kmz_data[1:15,]
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
result_chunk <- st_join(x = kmz_data, y = chunk, left = FALSE) # have each worker query based on a chunk of the historical bushfire dataset
return(result_chunk)
}
})
View(result_list)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
st_is_valid(kmz_data)
kmz_data[!st_is_valid(kmz_data),]
plot(kmz_data[!st_is_valid(kmz_data),][1,],)
plot(kmz_data[st_is_valid(kmz_data),][1,],)
plot(kmz_data)
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
View(kmz_data)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
single.points <- subset(kmz_data,(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
View(corner.points)
get_corner_points(corner.points[corner.points$Name == 'SAAEYB0006'])
corner.points[corner.points$Name == 'SAAEYB0006']
corner.points[corner.points$Name == 'SAAEYB0006',]
get_corner_points(corner.points[corner.points$Name == 'SAAEYB0006',])
corner.points[corner.points$Name == 'SAAEYB0006',]
plot(corner.points[corner.points$Name == 'SAAEYB0006',])
plot(corner.points[corner.points$Name == 'SAAEYB0006',]$x, corner.points[corner.points$Name == 'SAAEYB0006',]$y)
corner.points[corner.points$Name == 'SAAEYB0006',]
corner.points[corner.points$Name == 'SAAEYB0006',]
plot(st_as_sf(corner.points[corner.points$Name == 'SAAEYB0006',], crs =  st_crs(kmz_data)))
View(kmz_data)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
kmz_data[!st_is_valid(combined),]
combined[!st_is_valid(combined),]
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(kmz_data)
View(grouped.points)
View(df.sites.coords)
View(subset.points)
View(subset.points)
View(corner.points)
combined
combined
corner.points
corner.points['SAAEYB0006']
corner.points$Name == 'SAAEYB0006'
corner.points[corner.points$Name == 'SAAEYB0006']
corner.points[corner.points$Name == 'SAAEYB0006',]
df.sites.coords[df.sites.coords$Name == 'SAAEYB0006',]
df.sites.coords
df.sites.coords[df.sites.coords$V1 == 'SAAEYB0006',]
df.sites.coords[(df.sites.coords$V1 == 'SAAEYB0006' & df.sites.coords$Y == -25.28746249),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(df.sites.coords)
df.sites.coords$V1
df.sites.coords[df.sites.coords$V1 == 'WAACOO0008']
df.sites.coords[df.sites.coords$V1 == 'WAACOO0008', ]
?which()
which(df.sites.coords$V1 == 'WAACOO0008' & df.sites.coords$X == -31.59637778)
which( (df.sites.coords$V1 == 'WAACOO0008') & (df.sites.coords$X == -31.59637778))
which((df.sites.coords$V1 == 'WAACOO0008') &
(df.sites.coords$Y == -31.59637778))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
View(corner.points)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
corner.points
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(corner.points.sf)
corner.points.sf
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
four.point.data
corner.points.sf
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
st_write(combined, '../DATASETS/AusPlots_Location/AusPlots_Geometries_20240415.kml', append = FALSE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
table(kmz_data$Name)[table(kmz_data$Name) < 4]
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
four.point.data
four.point
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,(!(Name %in% names(one.point)) | (!(Name %in% names(four.point.data)))))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,(!(Name %in% names(one.point)) & (!(Name %in% names(four.point.data)))))
one.point
length(one.point) + length(four.point)
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
kmz_data$Name
table(kmz_data$Name) == 4
multiple.points <- subset(multiple.points,!(Name %in% names(four.point)))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(kmz_data)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
View(kmz_data)
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE)
View(kmz_data)
?st_read
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = 'SELECT site_location_name')
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = 'SELECT site_location_name FROM \"kml"\')
View(kmz_data)
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = "SELECT site_location_name FROM \"kml\"")
corner.test <- df.sites.coords.test[c(SW,NE,SE,NW),]
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test
df.sites.coords.test <- subset(df.sites.coords,Name == 'NSFNNC0006')
df.sites.coords.test <- subset(df.sites.coords,name == 'NSFNNC0006')
df.sites.coords.test
df.sites.coords
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test
df.sites.coords
subset(df.sites.coords,V1 == 'NSFNNC0006')
st_make_valid(combined[!st_is_valid(combined),])
plot(st_make_valid(combined[!st_is_valid(combined),]))
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test$sum_sw_ne <- with(df.sites.coords.test,X+Y)
df.sites.coords.test$sum_se_nw <- with(df.sites.coords.test,X-Y)
SW <- which.min(df.sites.coords.test$sum_sw_ne)
NE <- which.max(df.sites.coords.test$sum_sw_ne)
NW <- which.min(df.sites.coords.test$sum_se_nw)
SE <- which.max(df.sites.coords.test$sum_se_nw)
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
combined[!st_is_valid(combined),]
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords
df.sites.coords.test <- subset(df.sites.coords, subset = (V1 == 'NSFNNC0006'))
View(df.sites.coords)
four.point.data
?st_linestring
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
?st_combine
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
View(combined)
plot(st_make_valid(combined[!st_is_valid(combined),]))
?concaveman::concaveman()
install.packages('concaveman')
combined[!st_is_valid(combined),] %>% concaveman::concaveman()
plot(combined[!st_is_valid(combined),] %>% concaveman::concaveman())
plot(combined[!st_is_valid(combined),] %>% st_concave_hull())
combined[!st_is_valid(combined),] %>% st_concave_hull()
combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1)
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.0001))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.0001))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 100))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 1))
?st_concave_hull
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
combined[!st_is_valid(combined),]
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.dbf', append = FALSE) # shp file
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.geojson', append = FALSE) # geojson file
