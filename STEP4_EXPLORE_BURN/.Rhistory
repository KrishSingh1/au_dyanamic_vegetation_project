combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
View(corner.points)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
corner.points
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(corner.points.sf)
corner.points.sf
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
four.point.data
four.point.data
corner.points.sf
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
st_write(combined, '../DATASETS/AusPlots_Location/AusPlots_Geometries_20240415.kml', append = FALSE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
table(kmz_data$Name)[table(kmz_data$Name) < 4]
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
four.point.data
four.point
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,(!(Name %in% names(one.point)) | (!(Name %in% names(four.point.data)))))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,(!(Name %in% names(one.point)) & (!(Name %in% names(four.point.data)))))
one.point
length(one.point) + length(four.point)
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
multiple.points <- subset(multiple.points,!(Name %in% names(four.point.data)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
single.points <- subset(kmz_data,(Name %in% names(one.point)))
## Sites with 4 points
four.point <- table(kmz_data$Name)[table(kmz_data$Name) == 4]
four.point.data <- subset(kmz_data, (Name %in% names(four.point)))
# Extract sites with more than 4 coordinates by removing sites with 1 and 4 coordinate points
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
kmz_data$Name
table(kmz_data$Name) == 4
multiple.points <- subset(multiple.points,!(Name %in% names(four.point)))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
# Check Validity of Resultant Names
combined[!st_is_valid(combined),]
View(kmz_data)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
View(kmz_data)
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE)
View(kmz_data)
?st_read
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = 'SELECT site_location_name')
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = 'SELECT site_location_name FROM \"kml"\')
View(kmz_data)
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/doc.kml", quiet = TRUE, query = "SELECT site_location_name FROM \"kml\"")
corner.test <- df.sites.coords.test[c(SW,NE,SE,NW),]
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test
df.sites.coords.test <- subset(df.sites.coords,Name == 'NSFNNC0006')
df.sites.coords.test <- subset(df.sites.coords,name == 'NSFNNC0006')
df.sites.coords.test
df.sites.coords
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test
df.sites.coords
subset(df.sites.coords,V1 == 'NSFNNC0006')
st_make_valid(combined[!st_is_valid(combined),])
plot(st_make_valid(combined[!st_is_valid(combined),]))
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords.test$X <- as.numeric(df.sites.coords.test$X)
df.sites.coords.test$Y <- as.numeric(df.sites.coords.test$Y)
with(df.sites.coords.test, plot(X,Y))
df.sites.coords.test$sum_sw_ne <- with(df.sites.coords.test,X+Y)
df.sites.coords.test$sum_se_nw <- with(df.sites.coords.test,X-Y)
SW <- which.min(df.sites.coords.test$sum_sw_ne)
NE <- which.max(df.sites.coords.test$sum_sw_ne)
NW <- which.min(df.sites.coords.test$sum_se_nw)
SE <- which.max(df.sites.coords.test$sum_se_nw)
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
combined[!st_is_valid(combined),]
df.sites.coords.test <- subset(df.sites.coords,V1 == 'NSFNNC0006')
df.sites.coords
df.sites.coords.test <- subset(df.sites.coords, subset = (V1 == 'NSFNNC0006'))
View(df.sites.coords)
four.point.data
?st_linestring
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
?st_combine
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
View(combined)
plot(st_make_valid(combined[!st_is_valid(combined),]))
?concaveman::concaveman()
install.packages('concaveman')
combined[!st_is_valid(combined),] %>% concaveman::concaveman()
plot(combined[!st_is_valid(combined),] %>% concaveman::concaveman())
plot(combined[!st_is_valid(combined),] %>% st_concave_hull())
combined[!st_is_valid(combined),] %>% st_concave_hull()
combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1)
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.1))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.0001))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 0.0001))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 100))
plot(combined[!st_is_valid(combined),] %>% st_concave_hull(ratio = 1))
?st_concave_hull
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
combined[!st_is_valid(combined),]
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
gc()
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Explore_Historical_Bushfires.R")
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.dbf', append = FALSE) # shp file
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.geojson', append = FALSE) # geojson file
# Library -----------------------------------------------------------------
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
# Use parralelisation to speed up dataset queries
num_cores <- 6 # adjust according to available CPU cores of your computer (I did n/2 - 1, where n is number of my CPU cores)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/NAFI_Data/250m pixel 2000-2023_Long Term Time Since Burnt_Shapefile/TSLB_2000_23_gda94.shp") # get polygons from historical bushfires
kmz_data <- st_read("../DATASETS/AusPlots_Location/AusPlots_Geometries_20240415.kml", quiet = TRUE) # get polygons from ausplots sites
View(hist.shp)
st_crs(hist.shp)
hist.shp2 <- st_read("../DATASETS/NAFI_Data/250m pixel 2000-2023_Long Term Fire Frequency after July 31_Shapefile/FFL_2000_23_gda94.shp") # get polygons from historical bushfires
View(hist.shp2)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
View(historical)
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
View(modis)
View(modis)
library(dplyr)
historical %>%
left_join(modis,by = 'st_lct_')
AusPlots_Fire_Data <- historical %>%
left_join(modis,by = 'st_lct_')
View(modis)
View(modis)
View(historical)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
AusPlots_Fire_Data <- historical %>%
left_join(modis,by = c('st_lct_', 'ignition_d'))
?left_join
View(AusPlots_Fire_Data)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
AusPlots_Fire_Data <- historical %>%
left_join(modis)
View(modis)
common <- c('st_lct_', 'ignition_d')
rbind(AusPlots_Fire_Data[,common], modis[, common])
View(modis)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical) %>%
left_join(modis)
library(dplyr)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(AusPlots_Fire_Data[,common], modis[, common])
AusPlots_burn <- AusPlots_burn %>%
left_join(historical) %>%
left_join(modis)
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d', 'Data_Source')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- AusPlots_burn %>%
left_join(historical) %>%
left_join(modis)
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
library(ncdf4)
library(data.table)
# Functions ---------------------------------------------------------------
get_nc_data <- function(site.focus, directory, variable_name){
variable.path <- file.path(directory, variable_name)
nc.path <- file.path(variable.path, paste0(site.focus, "_1980_2022.nc")) # initially 1987
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
# Account for exception for naming scheme for vapourpres
variable_split <- strsplit(variable_name, split = "_")[[1]][[1]]
if(variable_split == 'vapourpres'){
var <- ncvar_get(nc, variable_split)
} else {
var <- ncvar_get(nc, variable_name)
}
daily.variable <- data.table(variable_name = var, time = dates)
return(daily.variable)
}
fileNames
.list.dir <- read.csv("../DATASETS/AusPlots_Location/New_AusPlots_Locations_SW_Points.csv")
fileNames <- file.list.dir$site_location_name
file.list.dir <- read.csv("../DATASETS/AusPlots_Location/New_AusPlots_Locations_SW_Points.csv")
fileNames <- file.list.dir$site_location_name
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/ausplots_agcd_b/"
climate.variables <- c('precip', 'tmax', 'tmin', 'vapourpres_h09', 'vapourpres_h15') # climate variables of interest
library(ncdf4)
library(data.table)
# Functions ---------------------------------------------------------------
get_nc_data <- function(site.focus, directory, variable_name){
variable.path <- file.path(directory, variable_name)
nc.path <- file.path(variable.path, paste0(site.focus, "_1980_2022.nc")) # initially 1987
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
# Account for exception for naming scheme for vapourpres
variable_split <- strsplit(variable_name, split = "_")[[1]][[1]]
if(variable_split == 'vapourpres'){
var <- ncvar_get(nc, variable_split)
} else {
var <- ncvar_get(nc, variable_name)
}
daily.variable <- data.table(variable_name = var, time = dates)
return(daily.variable)
}
file.list.dir <- read.csv("../DATASETS/AusPlots_Location/New_AusPlots_Locations_SW_Points.csv")
fileNames <- file.list.dir$site_location_name
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/ausplots_agcd_b/"
climate.variables <- c('precip', 'tmax', 'tmin', 'vapourpres_h09', 'vapourpres_h15') # climate variables of interest
fileNames <- file.list.dir$site_location_name
length(unqiue(fileNames))
length(unique(fileNames))
library(ncdf4)
library(data.table)
# Functions ---------------------------------------------------------------
get_nc_data <- function(site.focus, directory, variable_name){
variable.path <- file.path(directory, variable_name)
nc.path <- file.path(variable.path, paste0(site.focus, "_1980_2022.nc")) # initially 1987
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
# Account for exception for naming scheme for vapourpres
variable_split <- strsplit(variable_name, split = "_")[[1]][[1]]
if(variable_split == 'vapourpres'){
var <- ncvar_get(nc, variable_split)
} else {
var <- ncvar_get(nc, variable_name)
}
daily.variable <- data.table(variable_name = var, time = dates)
return(daily.variable)
}
file.list.dir <- read.csv("../DATASETS/AusPlots_Location/New_AusPlots_Locations_SW_Points.csv")
fileNames <- file.list.dir$site_location_name
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/ausplots_agcd_b/"
climate.variables <- c('precip', 'tmax', 'tmin', 'vapourpres_h09', 'vapourpres_h15') # climate variables of interest
for (site.name in fileNames) {
file.output.name <- paste0(site.name, '_1980_2022.csv') # get name of file
for(variable in climate.variables){ # for each climate variable, export the associated site data
data.export.precip <- get_nc_data(site.focus = site.name, directory = directory, variable_name = variable) # get data
colnames(data.export.precip)[colnames(data.export.precip) == 'variable_name'] <- variable # rename variable column
write.csv(data.export.precip, paste0("../DATASETS/Climate_Gridded/", variable, "/", file.output.name))  # write to csv
print(paste0("Exported ",variable," data for ",site.name))
}
}
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
library(dplyr)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical) %>%
left_join(modis)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
right_join(historical)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical)
View(AusPlots_burn)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical)
View(AusPlots_burn)
which(is.na(historical$ignition_d))
which(is.na(historical$ignition_d) == TRUE)
is.na(historical$ignition_d)
View(historical)
which(historical$ignition_d == '')
library(dplyr)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
historical <- historical[-which(historical$ignition_d == ''),] # Remove
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical)
View(AusPlots_burn)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
historical <- historical[-which(historical$ignition_d == ''),] # Remove
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
common <- c('st_lct_', 'ignition_d')
AusPlots_burn <- rbind(historical[,common], modis[, common])
AusPlots_burn <- unique(AusPlots_burn)
AusPlots_burn <- AusPlots_burn %>%
left_join(historical)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
View(AusPlots_burn)
library(dplyr)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
historical <- historical[-which(historical$ignition_d == ''),] # Remove
View(historical)
View(historical)
View(historical)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
historical <- historical[-which(historical$ignition_d == ''),] # Remove
historical$ignition_d <- as.Date(historical$ignition_d, format = '%Y/%m/%d')
View(historical)
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
View(modis)
View(modis)
modis$ignition_d <-  as.Date(modis$ignition_d, format = '%Y/%m/%d')
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
View(modis)
historical <- read.csv('../DATASETS/AusPlotsBurnData/Historical_Bush_Fires/AusPlots_Historical_BurnDates.csv')
historical$Data_Source <- rep('Historical_BushFires_Boundaries', nrow(historical))
historical <- historical[-which(historical$ignition_d == ''),] # Remove
historical$ignition_d <- as.Date(historical$ignition_d, format = '%Y/%m/%d')
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
View(modis)
modis$ignition_d <-  as.Date(modis$ignition_d, format = '%Y/%m/%d')
View(modis)
modis <- read.csv('../DATASETS/AusPlotsBurnData/MODIS_Burn/AusPlots_BurnDates_2024_Corrected_ColNames.csv')
colnames(modis)[3] <- c('ignition_d')
modis$Data_Source <- rep('MODIS/061/MCD64A1', nrow(modis))
View(modis)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
View(AusPlots_burn)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP4_EXPLORE_BURN/Combine_Historical_Burn_With_Modis.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
print(doc, target = "DEA_Extraction_Site_Validation_Report.docx")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_Validation_Report.R")
library(data.table)
library(dplyr)
library(sf)
library(ggplot2)
library(officer)
library(flextable)
library(sfheaders)
directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/MODELLED_PREPROCESSED/'
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
file.names <- unlist(lapply(strsplit(file.names, '_'), FUN = function(x){
unlist(x)[3]
}))
site.corners.data.cleaned <- read.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024_cleaned.csv') %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(3577)
evaluation.data <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv') %>%
select(c('site_location_name', 'green', 'brown', 'bare', 'visit_start_date' )) %>%
mutate(visit_start_date = as.Date(visit_start_date)) %>%
filter(is.na(green) == FALSE & is.na(brown) == FALSE & is.na(bare) == FALSE) %>%
rename(time = visit_start_date,
pv = green,
npv = brown,
bs = bare)
View(evaluation.data)
evaluation.data <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/DEA_FC_Ground_Truth_Evaluation.csv') %>%
select(c('site_location_name', 'green', 'brown', 'bare', 'visit_start_date' )) %>%
mutate(visit_start_date = as.Date(visit_start_date))
View(evaluation.data)
