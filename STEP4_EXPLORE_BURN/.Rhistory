# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
timing_result['elapsed']
View(result_list)
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 10  # Adjust as needed
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
View(result_list)
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 15  # Adjust as needed
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
timing_result['elapsed]
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 20  # Adjust as needed
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 100  # Adjust as needed
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
# Combine results
result <- do.call(rbind, result_list)
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 200  # Adjust as needed
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 2
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
kmz_data <- kmz_data[1:2,]
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 50  # Adjust as needed
## 100 -> ~ 93sec for 2
## 200 -> 93.52 sec for 2
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
timing_result['elapsed']
# Combine results
result <- do.call(rbind, result_list)
View(result)
gc()
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 6
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Read data
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
# Transform and filter data
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
# Determine the number of chunks
num_chunks <- 200  # Adjust as needed
## 100 -> ~ 93sec for 2
## 200 -> 93.52 sec for 2
# Split hist.shp into chunks
hist_chunks <- split(hist.shp, 1:num_chunks)
# Parallel processing
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
# Unregister the parallel backend
stopCluster(cl)
View(result_list)
timing_result['elapsed']
write.csv(result_list,'../DATASETS/AusPlots_Historical_BurnDates.csv')
historical.dates <- read.csv('../DATASETS/AusPlots_Historical_BurnDates.csv')
test <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf")
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
test <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf")
View(test)
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 6
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.shp")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
num_chunks <- 200  # Adjust as needed
## 100 -> ~ 93sec for 2
## 200 -> 93.52 sec for 2
hist_chunks <- split(hist.shp, 1:num_chunks)
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
stopCluster(cl)
View(result_list)
gc()
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 6
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
num_chunks <- 200  # Adjust as needed
## 100 -> ~ 93sec for 2
## 200 -> 93.52 sec for 2
hist_chunks <- split(hist.shp, 1:num_chunks)
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
stopCluster(cl)
View(result_list)
hist.shp[23647, ]
View(result_list[[18]][[261398]])
View(result_list[[18]][[212007]])
timing_result['elapsed']
library(sf)
library(ggplot2)
library(foreach)
library(doParallel)
library(bench)
# Main --------------------------------------------------------------------
num_cores <- 6
cl <- makeCluster(num_cores)
registerDoParallel(cl)
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf")
kmz_data <- st_read("../DATASETS/AusPlots_Location/site_subset.kml", quiet = TRUE)
#kmz_data <- st_centroid(kmz_data)[1:2, ]
# 113.25 for centroid
hist.shp <- st_transform(hist.shp, st_crs(kmz_data))
hist.shp <- hist.shp[-126888, ]
num_chunks <- 200  # Adjust as needed
## 100 -> ~ 93sec for 2
## 200 -> 93.52 sec for 2
hist_chunks <- split(hist.shp, 1:num_chunks)
timing_result <- system.time({
result_list <- foreach(chunk = hist_chunks, .combine = rbind, .packages = c("sf")) %dopar% {
# Perform intersection for each chunk
result_chunk <- st_intersection(chunk, kmz_data)
return(result_chunk)
}
})
stopCluster(cl)
View(result_list)
View(result_list[[18]][[212007]])
View(result_list[[18]][[160626]])
View(result_list[[18]][[126440]])
View(result_list[[18]][[23647]])
View(result_list[[18]][[73473]])
View(result_list[[18]][[168279]])
?st_write
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.dbf')
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.shp')
st_write(result_list,'../DATASETS/AusPlots_Historical_BurnDates.kml')
library(sf)
historical.dates <- read.csv('../DATASETS/AusPlots_Historical_BurnDates.shp')
historical.dates < st_read('../DATASETS/AusPlots_Historical_BurnDates.shp')
hist.shp <- st_read("../DATASETS/Historical_Bushfire_Boundaries/Historical_Bushfire_Boundaries.dbf")
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
View(hist.shp)
View(hist.shp)
hist.shp[hist.shp$igntn_d]
hist.shp[!na(hist.shp$igntn_d),]
hist.shp[!is.na(hist.shp$igntn_d),]
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
hist.shp <- hist.shp[!is.na(hist.shp$igntn_d)  | !is.na(hist.shp$captr_d),]
View(hist.shp)
View(burn.date)
View(hist.shp)
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
hist.shp <- hist.shp[!is.na(hist.shp$igntn_d)  | !is.na(hist.shp$captr_d),]
burn.date <- merge(burn.date, hist.shp, by.x = 'site_location_name', by.y = 'Name' )
View(burn.date)
burn.date <- merge(hist.shp, burn.date, by.y = 'site_location_name', by.x = 'Name' )
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
hist.shp <- hist.shp[!is.na(hist.shp$igntn_d)  | !is.na(hist.shp$captr_d),]
burn.date <- merge(hist.shp, burn.date, by.y = 'site_location_name', by.x = 'Name' )
View(burn.date)
View(burn.date)
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
hist.shp <- hist.shp[!is.na(hist.shp$igntn_d)  | !is.na(hist.shp$captr_d),]
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, hist.shp$igntn_d))
View(dates)
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, as.date(hist.shp$igntn_d)))
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, as.Date(hist.shp$igntn_d)))
View(dates)
View(hist.shp)
View(dates)
View(burn.date)
(hist.shp$igntn_d
)
burn.date$date
class(burn.date$date)
class(hist.shp$igntn_d)
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, hist.shp$igntn_d))
as.Date(dates$date)
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, as.character(hist.shp$igntn_d)))
View(dates)
plot_NBR_gg('NSANAN0002', burn.date, burn.reflectances)
# Library -----------------------------------------------------------------
library(ausplotsR)
library(TSstudio)
library(sf)
# Functions ---------------------------------------------------------------
apply_sliding_window <- function(file, window){
test.zoo <- read.zoo(file, index.column = 'time')
window.sum <- rollapply(test.zoo, window, FUN = sum, na.rm = T, fill = NA, align = 'right')
return(fortify.zoo(window.sum))
}
NBR <- function(NIR, SWIR) {
return((NIR-SWIR)/(NIR+SWIR))
}
BAI <- function(RED, NIR) {
denominator <- (0.1 - RED)^2 + (0.06 - NIR)^2
return(1/denominator)
}
plot_NBR <- function(site.name,burn.date, burn.reflectances) {
site.focus <- subset(burn.reflectances, subset = (site_location_name ==  site.name))
site.focus$NBR <- NBR(site.focus$modis_nir, site.focus$modis_swir)
site.focus$date <- as.Date(site.focus$date)
return(ts_plot(site.focus[,c("date", "NBR")]))
}
plot_NBR_gg <- function(site.name, burn.date, burn.reflectances) {
site.focus <- subset(burn.reflectances, subset = (site_location_name ==  site.name))
site.focus$NBR <- NBR(site.focus$modis_nir, site.focus$modis_swir)
site.focus$date <- as.Date(site.focus$date)
burn.date <- subset(burn.date, subset = (site_location_name ==  site.name))
burn.date$date <- as.Date(burn.date$date)
g <- ggplot(data = site.focus, mapping = aes(x = date, y = NBR)) +
geom_line() + labs(title = paste0(site.name, " NBR and Burn Dates")) +
geom_hline(yintercept = 0, linetype = 4, color = 'green')
for (d in 1:nrow(burn.date)) {
print(burn.date[d,]$date)
g <- g + geom_vline(xintercept = as.numeric(burn.date[d,]$date),
linetype = 4, color = 'red')
}
return(g)
}
plot_BAI <- function(site.name, burn.date, burn.reflectances) {
site.focus <- subset(burn.reflectances, subset = (site_location_name ==  site.name))
site.focus$BAI <- BAI(site.focus$modis_red, site.focus$modis_nir)
site.focus$date <- as.Date(site.focus$date)
return(ts_plot(site.focus[,c("date", "BAI")]))
}
# Individual
site.name <- 'NSANAN0002'
burn.date <- read.csv('../DATASETS/AusPlots_BurnDate.csv')
burn.reflectances <- read.csv('../DATASETS/AusPlots_BurnReflectances.csv')
hist.shp <- st_read("../DATASETS/AusPlots_Historical_BurnDates.shp")
hist.shp <- hist.shp[!is.na(hist.shp$igntn_d)  | !is.na(hist.shp$captr_d),]
dates <- data.frame("site_location_name" = c(burn.date$site_location_name, hist.shp$Name),
"date" = c(burn.date$date, as.character(hist.shp$igntn_d)))
plot_NBR_gg('NSANAN0002', dates, burn.reflectances)
plot_NBR_gg('NTAGFU0021', burn.date, burn.reflectances)
plot_NBR_gg('QDAEIU0010', burn.date, burn.reflectances)
plot_NBR_gg('WAAPIL0003', burn.date, burn.reflectances)
plot_NBR_gg('NSANSS0001', burn.date, burn.reflectances)
plot_NBR_gg('QDAEIU0010', burn.date, burn.reflectances)
unique(dates$site_location_name)
plot_NBR_gg('WAAGAS0002', burn.date, burn.reflectances)
View(dates)
plot_NBR_gg('NSANAN0002', dates, burn.reflectances)
plot_NBR_gg('NTAGFU0021', dates, burn.reflectances)
plot_NBR_gg('WAAPIL0003', dates, burn.reflectances)
plot_NBR_gg('NSANSS0001', dates, burn.reflectances)
plot_NBR_gg('WAAGAS0002', dates, burn.reflectances)
unique(dates$site_location_name)
plot_NBR_gg('QDASSD0015', dates, burn.reflectances)
plot_NBR_gg('NTAGFU0021', dates, burn.reflectances)
plot_NBR_gg('NSANSS0001', dates, burn.reflectances)
plot_NBR_gg('QDASSD0015', dates, burn.reflectances)
plot_NBR_gg('WAAPIL0003', dates, burn.reflectances)
plot_NBR_gg('NSANAN0002', dates, burn.reflectances)
plot_NBR_gg('WAAGAS0002', dates, burn.reflectances)
