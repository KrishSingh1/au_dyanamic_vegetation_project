////////////////////////////////////////////////////////////////////////////////
// Code based on code shared by Dr. Rachael Nolan
// Code to extract the burn date for plots. Provides a buffer around point data.
// following this example:
// https://developers.google.com/earth-engine/tutorials/community/extract-raster-values-for-points
////////////////////////////////////////////////////////////////////////////////

// TO DO: Get the centre points for each of the sites to import instead

//Import data

//Plot locations
//Import a csv with plot locations (first added to "Assets")
//var pts = ee.FeatureCollection('projects/krishsingh0921/assets/site_subset_lat_lon');
//print(pts)    

  //Import the MODIS burn area dataset:

var dataset = ee.ImageCollection('MODIS/061/MCD64A1');
print(dataset)
var burnedArea = dataset.select('BurnDate');
print(burnedArea)

var table_2 = ee.FeatureCollection("projects/krishsingh0921/assets/site_subset_coords");
var siteNames = table_2.aggregate_array('Name'); // get the name 
var siteNames = ee.List(siteNames).distinct().getInfo();
var siteCoords2 = table_2.geometry().coordinates().getInfo();
var polygons = ee.FeatureCollection([]); // empty list for ee.Geometry.Point objects (used for filtering image)
var minPoints =  ee.FeatureCollection([]);

// populate polygons with site coordinates 
for(var i = 0; i < siteCoords2.length/4; i++) {
  //print(siteCoords2[i])
  
  polygons = polygons.merge(ee.FeatureCollection(ee.Feature(ee.Geometry.Polygon([
    siteCoords2[i*4],
    siteCoords2[i*4 + 1],
    siteCoords2[i*4 + 2],
    siteCoords2[i*4 + 3]
  ]))))
  
  
  //Map.addLayer(polygons[i], {}, siteNames[i] + "_Polygon") // to visualise the site's coverage
  
  var feature = ee.Feature(ee.Geometry.Point(
    (siteCoords2[i*4][0]+
    siteCoords2[i*4 + 1][0]+
    siteCoords2[i*4 + 2][0]+
    siteCoords2[i*4 + 3][0])/4,
    (siteCoords2[i*4][1]+
    siteCoords2[i*4 + 1][1]+
    siteCoords2[i*4 + 2][1]+
    siteCoords2[i*4 + 3][1])/4
    ), {'site_location_name' : siteNames[i]}) // calculate the centre point
    minPoints = minPoints.merge(ee.FeatureCollection([feature]))  
}

Map.addLayer(minPoints, {},"MidPoints")
Map.addLayer(polygons, {}, "Polygons")

print(minPoints)
print(polygons)

var pts = minPoints;




//Visualise the burn area:
  var burnedAreaVis = {
    min: 30.0,
    max: 341.0,
    palette: ['4e0400', '951003', 'c61503', 'ff1901'],
  };
  Map.setCenter(151, -33, 5);
  Map.addLayer(burnedArea, burnedAreaVis, 'Burned Area');
  Map.addLayer(pts);

////////////////////////////////////////////////////////////////////////////////

//Functions to extract raster values from points

  function bufferPoints(radius, bounds) {
    return function(pt) {
      pt = ee.Feature(pt);
      return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
    };
  }



  function zonalStats(ic, fc, params) {
    // Initialize internal params dictionary.
    var _params = {
      reducer: ee.Reducer.mean(),
      scale: null,
      crs: null,
      bands: null,
      bandsRename: null,
      imgProps: null,
      imgPropsRename: null,
      datetimeName: 'datetime',
      datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
      };
  
    // Replace initialized params with provided params.
    if (params) {
      for (var param in params) {
        _params[param] = params[param] || _params[param];
      }
    }
  
    // Set default parameters based on an image representative.
    var imgRep = ic.first();
    var nonSystemImgProps = ee.Feature(null)
      .copyProperties(imgRep).propertyNames();
    if (!_params.bands) _params.bands = imgRep.bandNames();
    if (!_params.bandsRename) _params.bandsRename = _params.bands;
    if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
    if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  
    // Map the reduceRegions function over the image collection.
    var results = ic.map(function(img) {
      // Select bands (optionally rename), set a datetime & timestamp property.
      img = ee.Image(img.select(_params.bands, _params.bandsRename))
        .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
        .set('timestamp', img.get('system:time_start'));
  
      // Define final image property dictionary to set in output features.
      var propsFrom = ee.List(_params.imgProps)
        .cat(ee.List([_params.datetimeName, 'timestamp']));
      var propsTo = ee.List(_params.imgPropsRename)
        .cat(ee.List([_params.datetimeName, 'timestamp']));
      var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
  
      // Subset points that intersect the given image.
      var fcSub = fc.filterBounds(img.geometry());
  
      // Reduce the image by regions.
      return img.reduceRegions({
        collection: fcSub,
        reducer: _params.reducer,
        scale: _params.scale,
        crs: _params.crs
      })
      // Add metadata to each feature.
      .map(function(f) {
        return f.set(imgProps);
      });
    }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  
    return results;
}

////////////////////////////////////////////////////////////////////////////////

//buffer plots to ensure coverage with MODIS burn area:
// edit: 100 metres, and set to true as it is a square boundary
var bufferRad = 100
var ptsbuffer = pts.map(bufferPoints(bufferRad, true)); //edit buffer distance here
Map.addLayer(ptsbuffer, {},"Buffer")
print(ptsbuffer)

// Define parameters for the zonalStats function.
var params = {
  reducer: ee.Reducer.median(),
  scale: 500, // this is the scale of the raster                       
  crs: 'EPSG:4326',
  datetimeName: 'date',
  datetimeFormat: 'YYYY-MM-dd'
};


// Extract zonal statistics per point per image.
var ptsModisStats = zonalStats(dataset, ptsbuffer, params);
print(ptsModisStats.limit(50));
print(ptsModisStats)

//Export to Google Drive as csv file
Export.table.toDrive({
  collection: ptsModisStats,
  description:'AusPlots_BurnDate',
  folder: 'AusPlots_Modis',
  fileFormat: 'csv',
  //selectors: ['site_location_name', 'date', 'BurnDate', 'FirstDay', 'LastDay']
});


var modisCol = ee.ImageCollection('MODIS/006/MOD09A1')

// Define parameters for the zonalStats function.
var params = {
  reducer: ee.Reducer.median(),
  scale: 500,
  crs: 'EPSG:4326',
  bands: ['sur_refl_b01', 'sur_refl_b02', 'sur_refl_b06'],
  bandsRename: ['modis_red', 'modis_nir', 'modis_swir'],
  datetimeName: 'date',
  datetimeFormat: 'YYYY-MM-dd'
};

// Extract zonal statistics per point per image.
var ptsModisStats = zonalStats(modisCol, ptsbuffer, params);

//Export to Google Drive as csv file
Export.table.toDrive({
  collection: ptsModisStats,
  description:'AusPlots_BurnReflectances',
  folder: 'AusPlots_Modis',
  fileFormat: 'csv',
  //selectors: ['site_location_name', 'date', 'BurnDate', 'FirstDay', 'LastDay']
});


print(ptsModisStats.limit(50));


