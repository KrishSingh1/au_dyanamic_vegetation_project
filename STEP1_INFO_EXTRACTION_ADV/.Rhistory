site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colname(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
return(corner.points)
}
get_corner_points(,df.sites.coords)
get_corner_points(df.sites.coords)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colname(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
return(corner.points)
}
get_corner_points(df.sites.coords)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
return(corner.points)
}
get_corner_points(df.sites.coords)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
return(corner.points)
}
get_corner_points(df.sites.coords)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
return(corner.points)
}
get_corner_points(df.sites.coords)[-1,]
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
return(corner.points)
}
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
return(corner.points)
}
get_corner_points(df.sites.coords)
corner.points <- get_corner_points(df.sites.coords)
View(corner.points)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
print(kmz_data)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
grouped_points <- aggregate(multiple.points$geometry,
by = list(multiple.points$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
colnames(grouped_points)[1] = 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
View(corner.points)
st_as_sf(corner.points, coords = c('X', 'Y'))
st_as_sf(corner.points, coords = c('X', 'Y', 'Z'))
View(grouped_points)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'))
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(multiple.points$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
st_write(grouped.points, 'doc.kml', append = FALSE)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,NE,SE,NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
st_write(grouped.points, 'doc.kml', append = FALSE)
# IMPORTS -----------------------------------------------------------------
library(sf)
library(sfheaders)
# FUNCTIONS ---------------------------------------------------------------
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
# MAIN --------------------------------------------------------------------
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
# print(kmz_data)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
# grouped_points <- aggregate(multiple.points$geometry,
#                             by = list(multiple.points$Name),
#                             FUN = function(x) {
#                               st_cast(st_combine(x),"POLYGON")
#                               })
colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
st_write(grouped.points, 'doc.kml', append = FALSE)
## Create a separate one for the subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
View(grouped.points)
# Create subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
colnames(grouped.points)[1] <- 'Name'
st_write(grouped.points, 'doc.kml', append = FALSE)
# Create subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
st_write(grouped.points, 'site_subset.kml', append = FALSE)
st_write(subset.points, 'site_subset.kml', append = FALSE)
View(site.subset)
View(subset.points)
View(site.subset)
print(one.point)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundary.R")
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
colnames(grouped.points)[1] <- 'Name'
# Create subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
st_write(subset.points, "site_subset.geojson")
# Convert to csv file
df.subset.sites.coords <- as.data.frame(cbind(subset.points$Name, st_coordinates(subset.points)))
# Convert to csv file
df.subset.sites.coords <- as.data.frame(cbind(subset.points$Name, st_coordinates(subset.points)))
# Create subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
# Convert to csv file
df.subset.sites.coords <- as.data.frame(cbind(subset.points$Name, st_coordinates(subset.points)))
subset.points
# Convert to csv file
corner.points
# Convert to csv file
write.csv(corner.points[,c('Name','X','Y')], file = site_subset.csv)
# Convert to csv file
write.csv(corner.points[,c('Name','X','Y')], file = 'site_subset.csv')
# Convert to csv file
write.csv(corner.points[,c('Name','X','Y')], file = 'site_subset.csv', row.names = F)
library(sf)
library(sfheaders)
# Get corner points for each site from a df with site names and a list of coordinates
get_corner_points <- function(coordinates) {
# template df to return
corner.points <- data.frame(Name = as.character(NA),
X = as.numeric(NA),
Y = as.numeric(NA),
Z = as.numeric(NA))
coordinates$X <- as.numeric(coordinates$X)
coordinates$Y <- as.numeric(coordinates$Y)
# iterate through list of site names
site.names <- unique(coordinates$V1)
for(n in site.names) {
site.coords <- subset(coordinates, V1 == n) # subset by site name
# perform operations to get corners
site.coords$sum_sw_ne <- with(site.coords,X+Y)
site.coords$sum_se_nw <- with(site.coords,X-Y)
SW <- which.min(site.coords$sum_sw_ne)
NE <- which.max(site.coords$sum_sw_ne)
NW <- which.min(site.coords$sum_se_nw)
SE <- which.max(site.coords$sum_se_nw)
corner <- site.coords[c(SW,SE,NE, NW),] # get corner rows
corner <- corner[,c('V1', 'X', 'Y', 'Z')]
colnames(corner)[1] <- 'Name'
corner.points <- rbind(corner.points, corner) # bind to template df
}
corner.points <- corner.points[-1,]
rownames(corner.points) <- 1:nrow(corner.points)
return(corner.points)
}
kmz_data <- st_read("../STEP1_INFO_EXTRACTION_ADV/AusPlots_Locations/All Plot points May 2023/doc.kml", quiet = TRUE)
## Sites with only one point:
one.point <- table(kmz_data$Name)[table(kmz_data$Name) < 4]
print(one.point)
table(kmz_data$Name)[table(kmz_data$Name) == 4]
##
names(one.point)
multiple.points <- subset(kmz_data,!(Name %in% names(one.point)))
#colnames(grouped_points)[1] <- 'Name'
df.sites.coords <- as.data.frame(cbind(multiple.points$Name, st_coordinates(multiple.points)))
corner.points <- get_corner_points(df.sites.coords)
corner.points.sf <- st_as_sf(corner.points, coords = c('X', 'Y', 'Z'),
crs =  4326)
grouped.points <- aggregate(corner.points.sf$geometry,
by = list(corner.points.sf$Name),
FUN = function(x) {
st_cast(st_combine(x),"POLYGON")
})
colnames(grouped.points)[1] <- 'Name'
# Create subset
site.subset <- read.csv('site_subset_lat_lon.csv')
subset.points <- subset(grouped.points, Name %in% site.subset$site_location_name)
# Convert to csv file
write.csv(corner.points[,c('Name','X','Y')], file = 'sites_corner_coords.csv', row.names = F)
subset.corner <- subset(corner.points, Name %in% site.subset$site_location_name)
write.csv(corner.points[,c('Name','X','Y')], file = 'subset_sites_corner_coords.csv', row.names = F)
write.csv(subset.corner[,c('Name','X','Y')], file = 'subset_sites_corner_coords.csv', row.names = F)
