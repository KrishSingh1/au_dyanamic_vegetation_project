site.corners.data){
dea.fc <- tryCatch({
temp <- fread(paste0(directory, "/", query, ".csv")) # use data.table for faster processing
temp <- trim_to_nearest_coord(site.corners.data, temp, query) # trim spatially
test.dea.trimed <- trim_to_nearest_coord(site.corners.data = site.corners.data.cleaned,
dea.fc.i = temp,
query = query, buffer = 20)
temp <- subset(temp, subset = (ue <= 25.5)) # filter based on unmixing error (25.5)
write.csv(temp, paste0('../DATASETS/DEA_FC_PROCESSED/SPATIAL/', query, '.csv')) # Save Separately for debugging purposes
temp <- aggregate(temp[,-1],
by = list(temp$time), FUN = mean, na.rm = T) # aggregate
colnames(temp)[1] = 'time'
return(temp)
}, error = function(e) {
print(paste0(conditionMessage(e), " in ", query))
return(NA)
})
return(dea.fc)
}
trim_to_nearest_coord <- function(site.corners.data, dea.fc.i, query, buffer = 30, plot_result = FALSE) {
# Subset the site corners data by the query
essential_points <- c('SW', 'SE', 'NE', 'NW')
site_4_points <- site.corners.data %>%
subset((site_location_name == query) & (point %in% essential_points))
SW <- st_coordinates(subset(site_4_points, subset = (point == 'SW')))[,c('X','Y')]
SE <- st_coordinates(subset(site_4_points, subset = (point == 'SE')))[,c('X','Y')]
NE <- st_coordinates(subset(site_4_points, subset = (point == 'NE')))[,c('X','Y')]
NW <- st_coordinates(subset(site_4_points, subset = (point == 'NW')))[,c('X','Y')]
trimmed <- dea.fc.i %>%
st_as_sf(crs = 3577, coords = c('x', 'y'))
boundary_polygon <- st_sfc(st_polygon(list(rbind(SW, SE, NE, NW, SW))), crs = 3577) %>%
st_buffer(dist = buffer)
trimmed <- trimmed[st_within(trimmed, boundary_polygon, sparse = FALSE),]
if(plot_result == TRUE) { # Plot the result if desired
g <- ggplot() +  geom_sf(data = boundary_polygon) + geom_sf(data = trimmed) +
geom_sf(data = site_4_points, colour = 'red')
plot(g)
}
trimmed -> trimmed %>%
sf_to_df(fill = T)
return(trimmed)
}
directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/RawDataCurrent/NewBatchCurrent'
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
site.corners.data <- read.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024_cleaned.csv')
site.corners.data.cleaned <- site.corners.data[, c('site_location_name', 'point', 'x', 'y')]
site.corners.data.cleaned <- site.corners.data.cleaned %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(3577) # Set crs to the original crs
plot(st_geometry(site.corners.data.cleaned)) # Plot to check if this roughly makes an Australian shape
error.messages <- c('')
counter_max <- length(file.names)
counter_current <- 1
for (query in file.names) {
# Get the progress bar
print(paste0(
'START: ', counter_current, '/',counter_max, ' {', query  ,'}'
))
site.fc <- get_preprocessed_dea_fc(query, site.corners.data = site.corners.data.cleaned, directory = directory)
if(class(site.fc) != 'data.frame') {
error.messages <- c(error.messages, paste0('Error in processing ', query, '.csv'))
} else {
write.csv(site.fc, paste0('../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/', query, '.csv'))
}
counter_current <- counter_current + 1
}
library(data.table)
library(ncdf4)
library(dplyr)
library(sf)
library(ggplot2)
library(ausplotsR)
library(sfheaders)
# Functions ---------------------------------------------------------------
get_preprocessed_dea_fc <- function(query,
directory = 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files',
site.corners.data){
dea.fc <- tryCatch({
temp <- fread(paste0(directory, "/", query, ".csv")) # use data.table for faster processing
temp <- trim_to_nearest_coord(site.corners.data, temp, query) # trim spatially
test.dea.trimed <- trim_to_nearest_coord(site.corners.data = site.corners.data.cleaned,
dea.fc.i = temp,
query = query, buffer = 20)
temp <- subset(temp, subset = (ue <= 25.5)) # filter based on unmixing error (25.5)
write.csv(temp, paste0('../DATASETS/DEA_FC_PROCESSED/SPATIAL/', query, '.csv')) # Save Separately for debugging purposes
temp <- aggregate(temp[,-1],
by = list(temp$time), FUN = mean, na.rm = T) # aggregate
colnames(temp)[1] = 'time'
return(temp)
}, error = function(e) {
print(paste0(conditionMessage(e), " in ", query))
return(NA)
})
return(dea.fc)
}
trim_to_nearest_coord <- function(site.corners.data, dea.fc.i, query, buffer = 30, plot_result = FALSE) {
# Subset the site corners data by the query
essential_points <- c('SW', 'SE', 'NE', 'NW')
site_4_points <- site.corners.data %>%
subset((site_location_name == query) & (point %in% essential_points))
SW <- st_coordinates(subset(site_4_points, subset = (point == 'SW')))[,c('X','Y')]
SE <- st_coordinates(subset(site_4_points, subset = (point == 'SE')))[,c('X','Y')]
NE <- st_coordinates(subset(site_4_points, subset = (point == 'NE')))[,c('X','Y')]
NW <- st_coordinates(subset(site_4_points, subset = (point == 'NW')))[,c('X','Y')]
trimmed <- dea.fc.i %>%
st_as_sf(crs = 3577, coords = c('x', 'y'))
boundary_polygon <- st_sfc(st_polygon(list(rbind(SW, SE, NE, NW, SW))), crs = 3577) %>%
st_buffer(dist = buffer)
trimmed <- trimmed[st_within(trimmed, boundary_polygon, sparse = FALSE),]
if(plot_result == TRUE) { # Plot the result if desired
g <- ggplot() +  geom_sf(data = boundary_polygon) + geom_sf(data = trimmed) +
geom_sf(data = site_4_points, colour = 'red')
plot(g)
}
trimmed <- trimmed %>%
sf_to_df(fill = T)
return(trimmed)
}
# Pre Main ----------------------------------------------------------------
# Preprocess the corners data so it has all corner points
#
# directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/RawDataCurrent/NewBatchCurrent'
# files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
# file.names <- tools::file_path_sans_ext(files)
#
# site.corners.data <- read.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024.csv')
# site.corners.data.cleaned <- site.corners.data[, c('site_location_name', 'point', 'latitude', 'longitude')]
# site.corners.data.cleaned$missing <- rep('FALSE', nrow(site.corners.data.cleaned))
#
# # There is a problem site: WAAPIL0019, where SE ~= NW, simply get rid of the SE point, and estimate it
# site.corners.data.cleaned <-site.corners.data.cleaned[-which(
#   site.corners.data.cleaned$site_location_name == 'WAAPIL0019' &  site.corners.data.cleaned$point == 'SE'),]
#
# missing.sites <- setdiff(file.names, site.corners.data.cleaned$site_location_name)
# missing.sites.data <- get_ausplots(missing.sites)
# missing.sites.data <- missing.sites.data$site.info[,c('site_location_name', 'point', 'longitude', 'latitude')]
# missing.sites.data$missing <- rep('True', nrow(missing.sites.data))
# missing.sites.data <- unique(missing.sites.data)
#
# site.corners.data.cleaned <- rbind(site.corners.data.cleaned, missing.sites.data)
# rownames(site.corners.data.cleaned) <- 1:nrow(site.corners.data.cleaned)
#
# site.corners.data.cleaned <- site.corners.data.cleaned %>%
#   st_as_sf(coords = c('longitude', 'latitude')) %>%
#   st_set_crs(4326) %>% # Set crs to the original crs
#   st_transform(3577, allow_ballpark = F ) # Convert to 3577, same as the DEA FC default
# site.corners.data.cleaned$estimation_2 <- rep('False', nrow(site.corners.data.cleaned))
# site.corners.data.cleaned$point <- toupper(site.corners.data.cleaned$point)
#
# # Subset the data to only include 'SW', 'SE', 'NE', and 'NW'
# unique_points <- site.corners.data.cleaned %>%
#   subset(subset = (point == 'SW' | point ==  'SE'  | point == 'NE' | point == 'NW') )
#
# # # Check for sites with missing corner points
# result <- unique_points %>%
#   group_by(site_location_name) %>%
#   summarize(count = n())
# results2 <- result[which(result$count < 4),]$site_location_name
# results2.site.data <- get_ausplots(results2)
# results2.site.data <- results2.site.data$site.info
#
# # Include Exception, where WAAPIL0019's points lead to self-intercepting points
#
# # Estimate the corner points
# for(sites in results2) {
#
#   # Subset based on the site
#   site.specifc.corner <- site.corners.data.cleaned %>%
#     subset(site_location_name == sites)
#
#   # In cases where more than 1 point, but less than 4 points are availiable, just extract the SW point
#   if(nrow(site.specifc.corner) > 1) {
#     site.specifc.corner <- site.specifc.corner %>%
#       subset(point == 'SW')
#   }
#
#   # Get coordinates
#   site.specifc.corner <- site.specifc.corner %>%
#     st_coordinates() %>%
#     as.data.frame()
#   rownames(site.specifc.corner) <- 'SW'
#
#   site.info.specific <- results2.site.data %>%
#     subset(site_location_name == sites)
#
#   # Estimate the other three points by the 100mx100m dimension
#   if(site.info.specific$plot_is_100m_by_100m[1] == TRUE){
#     NE <- c('X' = site.specifc.corner$X[1] + 100, 'Y' = site.specifc.corner$Y[1] + 100)
#     SE <- c('X' = site.specifc.corner$X[1] + 100, 'Y' = site.specifc.corner$Y[1])
#     NW <- c('X' = site.specifc.corner$X[1], 'Y' = site.specifc.corner$Y[1] + 100)
#     spare <- as.data.frame(rbind(NE, SE, NW))
#
#     site.specifc.corner <- rbind(site.specifc.corner,spare )
#     site.specifc.corner$point <- rownames(site.specifc.corner)
#     site.specifc.corner$site_location_name <- rep(sites, nrow(site.specifc.corner))
#     rownames(site.specifc.corner) <- 1:nrow(site.specifc.corner)
#
#     site.specifc.corner <- site.specifc.corner %>%
#       st_as_sf(coords = c('X','Y')) %>%
#       st_set_crs(3577)
#     site.specifc.corner$estimation_2 <- rep('True', nrow(site.specifc.corner))
#     site.specifc.corner$missing <- rep('NA', nrow(site.specifc.corner))
#
#     site.corners.data.cleaned <- rbind(site.corners.data.cleaned,site.specifc.corner)
#   } else{
#     print(paste0('WARNING, CHECK DIMENSION OF ', sites))
#   }
# }
#
# site.corners.data.cleaned %>%
#   sf_to_df(fill = T) %>%
#   select(c(site_location_name, point, estimation_2, missing, x, y)) %>%
#   write.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024_cleaned.csv')
# The above approach can lead to duplicated corner points if they had to be estimated due to the absence of other points
# We remove the duplicated corner points by removing corner points marked by estimation_2 == 'True' and keeping the original, as marked by 'False'
# site_unique <- unique(site.corners.data.cleaned$site_location_name)
# clean_set <- c()
# for(site in site_unique){
#
#   # Get the four corner points
#   temp <- site.corners.data.cleaned %>%
#     subset(site_location_name == site) %>%
#     subset((point == 'SW' | point ==  'SE'  | point == 'NE' | point == 'NW'))
#
#   # Get Counts of each corner point
#   freq_table <- table(temp$point)
#   dup_checker <- which(freq_table > 1)
#
#   # Check for any duplicates
#   if(any(dup_checker) == TRUE) {
#     duplicated_points <- names(freq_table[which(freq_table > 1)]) # get names of duplicates
#     for(dp in duplicated_points){ # Remove the duplicate
#       temp = temp[-which(temp$point == dp & temp$estimation_2 == 'True'),]
#     }
#   }
#   clean_set <- rbind(clean_set, temp)
# }
#
# clean_set %>%
#   sf_to_df(fill = T) %>%
#   select(c(site_location_name, point, estimation_2, missing, x, y)) %>%
#   write.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024_cleaned.csv')
# Main --------------------------------------------------------------------
# Alg:
# 1. Obtain all coordinate points for each sites via the published corner points
# 2. Convert the coordinates from the corner points into EPSG 3577
# 3. Read in the DEA FC from the site
# 4. Using the corner points from the published corner points, subset the DEA FC
#    --> such that all internal points are kept
# 5. Filter the DEA FC to include all points under ue <= 25.5
directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/RawDataCurrent/NewBatchCurrent'
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
site.corners.data <- read.csv('C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/AusPlots_Location/AusPlots_Published_Corner_Points_20240701/Published Plot Corners_extract26062024_cleaned.csv')
site.corners.data.cleaned <- site.corners.data[, c('site_location_name', 'point', 'x', 'y')]
site.corners.data.cleaned <- site.corners.data.cleaned %>%
st_as_sf(coords = c('x', 'y')) %>%
st_set_crs(3577) # Set crs to the original crs
plot(st_geometry(site.corners.data.cleaned)) # Plot to check if this roughly makes an Australian shape
error.messages <- c('')
counter_max <- length(file.names)
counter_current <- 1
for (query in file.names) {
# Get the progress bar
print(paste0(
'START: ', counter_current, '/',counter_max, ' {', query  ,'}'
))
site.fc <- get_preprocessed_dea_fc(query, site.corners.data = site.corners.data.cleaned, directory = directory)
if(class(site.fc) != 'data.frame') {
error.messages <- c(error.messages, paste0('Error in processing ', query, '.csv'))
} else {
write.csv(site.fc, paste0('../DATASETS/DEA_FC_PROCESSED/SPATIAL_AND_UE_FILTER/', query, '.csv'))
}
counter_current <- counter_current + 1
}
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
warnings()
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
counter_current <- 1
counter_max <- length(file.names)
View(sub_fc)
class(sub_fc)
library(data.table)
library(ggplot2)
library(dplyr)
directory <- 'C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/DATASETS/DEA_FC_PROCESSED/SPATIAL/'
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
file.names <- tools::file_path_sans_ext(files)
cols <- c('site_location_name', 'ue_filter', 'sd_dev', 'mean', 'n_datapoints', 'n_outliers')
ue_filter_diag <- t(data.frame(row.names = cols))
ue_filter_interval <- seq(from = 10, to = 127, length.out = 10)
counter_current <- 1
counter_max <- length(file.names)
for (query in file.names) {
# Get the progress bar
print(paste0(
'START: ', counter_current, '/',counter_max, ' {', query  ,'}'
))
site.fc <- fread(paste0(directory, "/", query, ".csv")) # use data.table for faster processing'
for(u in ue_filter_interval) {
sub_fc <- subset(site.fc, ue <= u)
print(class(sub_fc))
sub_fc <- sub_fc[, list(pv = mean(pv, na.rm = TRUE)), by = list(time)]
#  aggregate(sub_fc[,-1],
#                     by = list(sub_fc$time), FUN = mean, na.rm = T) # aggregate
pv <- sub_fc$pv
sd_pv <- sd(pv,na.rm = TRUE)
mean_pv <- mean(pv, na.rm = TRUE)
datapoints <- nrow(sub_fc)
n_outliers <- length(boxplot.stats(pv)$out)
row_fc <- c(site_location_name = query,
ue_filter = u,
sd_dev = sd_pv,
mean = mean_pv,
n_datapoints = datapoints,
n_outliers = n_outliers)
ue_filter_diag <- rbind(ue_filter_diag, row_fc)
}
#write.csv(ue_filter_diag, 'ue_filter_diagonistics.csv')
counter_current <- counter_current + 1
}
View(sub_fc)
View(ue_filter_diag)
View(ue_filter_diag)
ue_filter_diag_df <- as.data.frame(ue_filter_diag)
ue_filter_diag_df$ue_filter <- as.numeric(ue_filter_diag_df$ue_filter)
ue_filter_diag_df$sd_dev <- as.numeric(ue_filter_diag_df$sd_dev)
ue_filter_diag_df$mean <- as.numeric(ue_filter_diag_df$mean)
ue_filter_diag_df$n_datapoints <- as.numeric(ue_filter_diag_df$n_datapoints)
ggplot(data = ue_filter_diag_df) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, group = site_location_name))
dom_species_group <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_classification_by_dom_species_final_2-0-6.csv')
dom_species_group <- dom_species_group[,c('site_location_name', 'vegetation_type')]
ue_filter_diag_df_veg <- ue_filter_diag_df %>%
left_join(dom_species_group)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')
site_info <- site_info[,c('site.info.site_location_name', 'site.info.state')]
site_info <- unique(site_info)
colnames(site_info) <- c('site_location_name', 'state')
ue_filter_diag_df_veg <- ue_filter_diag_df %>%
left_join(site_info)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev)) +
geom_line(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers, color = sd_dev)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers)) +
facet_wrap(~state, ncol = 3)
ue_filter_diag_df$n_outliers <-as.numeric(ue_filter_diag_df$n_outliers)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers)) +
facet_wrap(~state, ncol = 3)
ue_filter_diag_df <- as.data.frame(ue_filter_diag)
ue_filter_diag_df$ue_filter <- as.numeric(ue_filter_diag_df$ue_filter)
ue_filter_diag_df$sd_dev <- as.numeric(ue_filter_diag_df$sd_dev)
ue_filter_diag_df$mean <- as.numeric(ue_filter_diag_df$mean)
ue_filter_diag_df$n_datapoints <- as.numeric(ue_filter_diag_df$n_datapoints)
ue_filter_diag_df$n_outliers <-as.numeric(ue_filter_diag_df$n_outliers)
ggplot(data = ue_filter_diag_df) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, group = site_location_name))
dom_species_group <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_classification_by_dom_species_final_2-0-6.csv')
dom_species_group <- dom_species_group[,c('site_location_name', 'vegetation_type')]
ue_filter_diag_df_veg <- ue_filter_diag_df %>%
left_join(dom_species_group)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')
site_info <- site_info[,c('site.info.site_location_name', 'site.info.state')]
site_info <- unique(site_info)
colnames(site_info) <- c('site_location_name', 'state')
ue_filter_diag_df_veg <- ue_filter_diag_df %>%
left_join(site_info)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev)) +
geom_line(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers)) +
facet_wrap(~vegetation_type, ncol = 3)
View(ue_filter_diag_df_veg)
ue_filter_diag_df <- as.data.frame(ue_filter_diag)
ue_filter_diag_df$ue_filter <- as.numeric(ue_filter_diag_df$ue_filter)
ue_filter_diag_df$sd_dev <- as.numeric(ue_filter_diag_df$sd_dev)
ue_filter_diag_df$mean <- as.numeric(ue_filter_diag_df$mean)
ue_filter_diag_df$n_datapoints <- as.numeric(ue_filter_diag_df$n_datapoints)
ue_filter_diag_df$n_outliers <-as.numeric(ue_filter_diag_df$n_outliers)
ggplot(data = ue_filter_diag_df) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, group = site_location_name))
dom_species_group <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_classification_by_dom_species_final_2-0-6.csv')
dom_species_group <- dom_species_group[,c('site_location_name', 'vegetation_type')]
ue_filter_diag_df_veg <- ue_filter_diag_df %>%
left_join(dom_species_group)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv')
site_info <- site_info[,c('site.info.site_location_name', 'site.info.state')]
site_info <- unique(site_info)
colnames(site_info) <- c('site_location_name', 'state')
ue_filter_diag_df_veg <- ue_filter_diag_df_veg %>%
left_join(site_info)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = sd_dev, color = n_datapoints,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev)) +
geom_line(mapping = aes(x = ue_filter, y = n_datapoints, color = sd_dev,
group = site_location_name)) +
facet_wrap(~state, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers, color = n_datapoints)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers, color = n_datapoints)) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers, color = n_datapoints, group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y = n_outliers, color = n_datapoints)) +
geom_line(mapping = aes(x = ue_filter, y = n_outliers, color = n_datapoints, group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = mean, y = pv_sd, color = n_datapoints))
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = mean, y = sd, color = n_datapoints))
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = mean, y = sd_dev, color = n_datapoints))
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = mean, y = sd_dev, group = vegetation_type))
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = mean, y = sd_dev)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y =mean)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y =mean)) +
geom_line(mapping = aes(x = ue_filter, y =mean, group = site_location_name)) +
facet_wrap(~vegetation_type, ncol = 3)
ggplot(data = ue_filter_diag_df_veg) +
geom_point(mapping = aes(x = ue_filter, y =mean, colour = state)) +
facet_wrap(~vegetation_type, ncol = 3)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
View(ue_filter_min_max)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
View(ue_filter_min_max)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
View(ue_filter_min_max)
ue_filter_diag_df <- as.data.frame(ue_filter_diag)
ue_filter_diag_df$ue_filter <- as.numeric(ue_filter_diag_df$ue_filter)
ue_filter_diag_df$sd_dev <- as.numeric(ue_filter_diag_df$sd_dev)
ue_filter_diag_df$mean <- as.numeric(ue_filter_diag_df$mean)
ue_filter_diag_df$n_datapoints <- as.numeric(ue_filter_diag_df$n_datapoints)
ue_filter_diag_df$n_outliers <-as.numeric(ue_filter_diag_df$n_outliers)
ue_filter_min_max <- as.data.frame(ue_filter_min_max)
ue_filter_min_max[,cols[-1]] <- as.numeric(ue_filter_min_max[,cols[-1]])
for (columns_to_numeric in cols[-1]) {
ue_filter_min_max[columns_to_numeric] <- as.numeric(ue_filter_min_max[columns_to_numeric])
}
for (columns_to_numeric in cols[-1]) {
ue_filter_min_max[columns_to_numeric] <- as.numeric(ue_filter_min_max[[columns_to_numeric]])
}
View(ue_filter_min_max)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
ue_filter_diag_df <- as.data.frame(ue_filter_diag)
ue_filter_diag_df$ue_filter <- as.numeric(ue_filter_diag_df$ue_filter)
ue_filter_diag_df$sd_dev <- as.numeric(ue_filter_diag_df$sd_dev)
ue_filter_diag_df$mean <- as.numeric(ue_filter_diag_df$mean)
ue_filter_diag_df$n_datapoints <- as.numeric(ue_filter_diag_df$n_datapoints)
ue_filter_diag_df$n_outliers <-as.numeric(ue_filter_diag_df$n_outliers)
ue_filter_min_max <- as.data.frame(ue_filter_min_max)
for (columns_to_numeric in cols[-1]) {
ue_filter_min_max[columns_to_numeric] <- as.numeric(ue_filter_min_max[[columns_to_numeric]])
}
View(ue_filter_min_max)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_GAPFILL_TEST/DEA_FC_UE_Derivation.R")
View(ue_filter_min_max)
