plot(test$window.sum, test$pv)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP5_DATASETS_COMPARISON/Product_Subset_Timeseries_Visualisation.R")
## Using ggplotly
pl <- ggplot(test.2, aes(x = date)) +
geom_line(mapping = aes(y = NDVI, colour = "Landsat_NDVI")) +
geom_line(mapping = aes(y = pv, colour = "DEA_FC")) +
geom_line(mapping = aes(y = green_mean, colour = "VegMachine_SFC")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(focus.site.name) +
geom_point(mapping = aes(y = green, colour = "insitu_green")) +
scale_color_manual(
name = "Cover Types",
values = c("Landsat_NDVI" = "red", "DEA_FC" = "blue", "VegMachine_SFC" = "green",
"insitu_green" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%Y %b",
date_minor_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
# Load Libraries ----------------------------------------------------------
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
# Load Datasets -----------------------------------------------------------
focus.site.name <- 'NSANAN0002'
# Load NDVI
NDVIs.path <- '../STEP2_NDVI_EXTRACTION/EarthEngine/Output/NDVI_Extraction_2/'
focus.site.file.name <- paste0(focus.site.name, '_NDVI', '.csv')
focus.site.ndvi <- read.csv(paste0(NDVIs.path,focus.site.file.name))
## Need to extract the dates from system index (left of the last '_' seperator)
focus.site.ndvi$date <- unlist(lapply(focus.site.ndvi$system.index,
FUN = function(string){
splitted.str <- strsplit(string, '_')
return(splitted.str[[1]][[length(unlist(splitted.str)) - 1]])
}
))
focus.site.ndvi$date <- as.Date(focus.site.ndvi$date, format = '%Y%m%d')
focus.site.ndvi <- focus.site.ndvi[order(focus.site.ndvi$date),]
focus.site.ndvi$NDVI_std <- (focus.site.ndvi$NDVI - mean(focus.site.ndvi$NDVI, na.rm = T))/
sd(focus.site.ndvi$NDVI, na.rm = T)
# Load SFC
SFC.path <- '../STEP2_FC_EXTRACTION/VegMachine/SFC/'
focus.site.file.name <- paste0(focus.site.name, '_SFC', '.csv')
focus.site.sfc <- readr::read_csv(paste0(SFC.path,focus.site.file.name))
# To convert to a date, I needed to append a day ('01') while in actuality
# there are no specific dates
focus.site.sfc$date <- as.Date(unlist(lapply(focus.site.sfc$date,
function(date)
{return(paste0(date, '-01'))}
)))
focus.site.sfc$green_mean <- as.numeric(focus.site.sfc$green_mean)
focus.site.sfc$green_mean_std <- (focus.site.sfc$green_mean - mean(focus.site.sfc$green_mean, na.rm = T))/
sd(focus.site.sfc$green_mean, na.rm = T)
focus.site.sfc <- as.data.frame(focus.site.sfc) # note parsing issue with the last column
dea.path <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
focus.site.file.name <- paste0(focus.site.name, '.csv')
focus.site.dea <- read.csv(paste0(dea.path,focus.site.file.name))
focus.site.dea <- aggregate(focus.site.dea, by = list(focus.site.dea$time), FUN = mean, na.rm = T)
focus.site.dea$date <- as.Date(focus.site.dea$Group.1)
focus.site.dea$pv_std <- (focus.site.dea$pv - mean(focus.site.dea$pv, na.rm = T))/
sd(focus.site.dea$pv, na.rm = T)
ausplots.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg_2-0-3.rds")
ausplots.focus.fc <- readRDS("../STEP2_VEG_EXTRACTION/insitu_fractional_cover_default_2-0-3.rds")
ausplots.info.focus <- ausplots.info$site.info[ausplots.info$site.info$site_location_name == focus.site.name,]
site.id <- ausplots.info.focus$site_unique
ausplots.fc.data <- merge(ausplots.info.focus, ausplots.focus.fc, by = 'site_unique')
date.visit <- as.Date(ausplots.fc.data$visit_start_date)
# NDVI time series
ts_plot(focus.site.ndvi[,c("date", "NDVI")])
ts_plot(focus.site.sfc[,c("date", "green_mean")]) # Not sure why this shows nothing
# NDVI time series
ts_plot(focus.site.ndvi[,c("date", "NDVI")])
# define date range to aggregate RS data for comparison
times.forwards <- seq(date.visit, by='1 days', length = 31)
times.backwards <- seq(date.visit, by='-1 days', length = 31)
closest.times.dea <- rbind(focus.site.dea[focus.site.dea$date %in%times.forwards,],
focus.site.dea[focus.site.dea$date %in%times.backwards,])
closest.times.dea <- closest.times.dea[order(closest.times.dea$date),]
closest.times.ndvi <- rbind(focus.site.ndvi[focus.site.ndvi$date %in%times.forwards,],
focus.site.ndvi[focus.site.ndvi$date %in%times.backwards,])
closest.times.ndvi <- closest.times.ndvi[order(closest.times.ndvi$date),]
# special case for sfc as it is seasonal - over 3
times.forwards.sfc <- seq(date.visit, by='1 days', length = 31*3)
# I generally want the earliest occurance of a non-na green_mean
closest.times.sfc <- rbind(focus.site.sfc[focus.site.sfc$date %in%times.forwards.sfc,])
closest.times.sfc <- closest.times.sfc[order(closest.times.sfc$date),]
closest.times.sfc <- subset(closest.times.sfc, !is.na(green_mean))
closest.times.sfc <- closest.times.sfc[which.min(closest.times.sfc$date),]
# Plot the nearest time series
ts_plot(closest.times.dea[,c("date", "pv")]) # dea time series
ts_plot(closest.times.ndvi[,c("date", "NDVI")]) # EE time series
ts_plot(closest.times.sfc[,c("date", "green_mean")]) # still empty
# merge dea and ee for side by side comparison
closest.times.binded <- merge(closest.times.ndvi, closest.times.dea, by = 'date')
closest.times.binded <- closest.times.binded[,c("date", "NDVI", "pv", "NDVI_std", "pv_std")]
# normalise NDVI and pv locally
closest.times.binded$NDVI_norm <- (
closest.times.binded$NDVI - mean(closest.times.binded$NDVI, na.rm = T))/
sd(closest.times.binded$NDVI, na.rm = T
)
closest.times.binded$pv_norm <- (
closest.times.binded$pv - mean(closest.times.binded$pv, na.rm = T))/
sd(closest.times.binded$pv, na.rm = T)
ts_plot(closest.times.binded[,c("date", "NDVI_std", "pv_std")]) # plot side by side comparison
ts_plot(closest.times.binded[,c("date", "NDVI_norm", "pv_norm")])
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
saveRDS(subset.veg.info, 'subset_veg_info.RDS')
subset.veg.info <- readRDS('subset_veg_info.RDS')
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
#saveRDS(all.veg.fc, 'all_veg_fc.RDS')
all.veg.fc <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_fc.RDS')
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
ved FC for these sites
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
library(ausplotsR)
get_individual_fcs <- function(site.names){
one.veg.info <- get_ausplots(site.names[1], veg.PI = T, site_info = T)
one.veg.fcs <- fractional_cover(one.veg.info$veg.PI)
one.veg.fcs <- one.veg.fcs[,c("site_unique", "green", "brown", "bare")]
empty.locations <- c()
for(name in site.names[-1]) {
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
temp <- fractional_cover(one.veg.info$veg.PI)
if(is.null(nrow(temp))) {
empty.locations <- c(empty.locations, name)
} else {
temp <- temp[,c("site_unique", "green", "brown", "bare")]
one.veg.fcs <- rbind(one.veg.fcs, temp)
}
}
return(list(fcs = one.veg.fcs, missing_fc = empty.locations))
}
#
get_fc_retrieval_methods <- function(subset.names, all.veg.fc, one.veg.fcs){
subset.veg.info <- get_ausplots(subset.names,
veg.PI = T, site_info = T)
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
return(list(fcs = all.veg.fc.test, missing_fc = one.veg.fcs$missing_fc))
}
all.sites <- read.csv("../STEP1_INFO_EXRACTION/sites_info_query.csv")
all.names <- all.sites$site_location_name
subset.sites <- read.csv("../STEP4_EXPORE_DATA/sites_subset.csv")
subset.names <- unique(subset.sites$site_location_name)
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.info <- get_ausplots(all.names, veg.PI = T, site_info = T)
#saveRDS(all.veg.info, 'all_veg_info.RDS')
all.veg.info <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_info.RDS')
subset.veg.info <- get_ausplots(subset.names, veg.PI = T, site_info = T)
# I saved the data to save time uncomment below to regenerate dataset
#all.veg.fc <- fractional_cover(all.veg.info$veg.PI)
#saveRDS(all.veg.fc, 'all_veg_fc.RDS')
all.veg.fc <- readRDS('../STEP3_VALIDATE_AUSPLOTS/all_veg_fc.RDS')
subset.veg.fc <- fractional_cover(subset.veg.info$veg.PI)
one.veg.fcs <- get_individual_fcs(subset.names)
one.veg.fcs <- one.veg.fcs$fcs
all.veg.fc.test <- subset(all.veg.fc, subset = site_unique %in% subset.veg.fc$site_unique)
all.veg.fc.test <- merge(all.veg.fc.test[,c('site_unique', 'green')],
subset.veg.fc[,c('site_unique', 'green')], by = 'site_unique')
all.veg.fc.test <- merge(all.veg.fc.test,
one.veg.fcs[,c('site_unique', 'green')], by = 'site_unique')
View(all.veg.fc.test)
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
library(dplyr)
library(zoo)
library(plotly)
site.subset.names <- read.csv('../STEP2_NDVI_EXTRACTION/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv')
site.subset.names <- unique(site.subset.names$site_location_name)
# Select main site
focus.site.name <- site.subset.names[which(site.subset.names == 'NSANAN0002')]
# Load NDVI
NDVIs.path <- '../STEP2_NDVI_EXTRACTION/EarthEngine/Output/NDVI_Extraction_2/'
focus.site.file.name <- paste0(focus.site.name, '_NDVI', '.csv')
focus.site.ndvi <- read.csv(paste0(NDVIs.path,focus.site.file.name))
## Need to extract the dates from system index (left of the last '_' seperator)
focus.site.ndvi$date <- unlist(lapply(focus.site.ndvi$system.index,
FUN = function(string){
splitted.str <- strsplit(string, '_')
return(splitted.str[[1]][[length(unlist(splitted.str)) - 1]])
}
))
focus.site.ndvi$date <- as.Date(focus.site.ndvi$date, format = '%Y%m%d')
focus.site.ndvi <- focus.site.ndvi[order(focus.site.ndvi$date),]
rownames(focus.site.ndvi) <- 1:nrow(focus.site.ndvi)
# Load SFC
SFC.path <- '../STEP2_FC_EXTRACTION/VegMachine/SFC/'
focus.site.file.name <- paste0(focus.site.name, '_SFC', '.csv')
focus.site.sfc <- readr::read_csv(paste0(SFC.path,focus.site.file.name))
# To convert to a date, I needed to append a day ('01') while in actuality
# there are no specific dates
focus.site.sfc$date <- as.Date(unlist(lapply(focus.site.sfc$date,
function(date)
{return(paste0(date, '-01'))}
)))
focus.site.sfc <- as.data.frame(focus.site.sfc) # note parsing issue with the last column
dea.path <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
focus.site.file.name <- paste0(focus.site.name, '.csv')
focus.site.dea <- read.csv(paste0(dea.path,focus.site.file.name))
focus.site.dea <- aggregate(focus.site.dea, by = list(focus.site.dea$time), FUN = mean, na.rm = T)
focus.site.dea$date <- as.Date(focus.site.dea$Group.1)
# Combine the datasets
focus.site.ndvi <- focus.site.ndvi[,c('date', 'NDVI')]
focus.site.sfc <- focus.site.sfc[,c('date', 'green_mean')]
focus.site.dea <- focus.site.dea[,c('date', 'pv')]
test <- focus.site.ndvi %>%
full_join(focus.site.sfc, by = 'date') %>%
full_join(focus.site.dea, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
gapfill.green_mean <- na.locf(test[,c("date", "green_mean")])
test <- test[, c("date", "NDVI", "pv")]
test <- test %>%
full_join(gapfill.green_mean, by = 'date')
test$NDVI <- test$NDVI*100
veg.info <- get_ausplots(focus.site.name, veg.PI = T, site_info = T)
insitu.fc <- fractional_cover(veg.info$veg.PI)
veg.info <- merge(as.data.frame(veg.info$site.info), insitu.fc, by = "site_unique")
veg.info.fc <- veg.info[,c("visit_start_date", "green")]
colnames(veg.info.fc)[1] <- 'date'
veg.info.fc$date <- as.Date(veg.info.fc$date)
test <- test %>% full_join(veg.info.fc, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
test.2 <- aggregate(test[,c("NDVI", "pv", "green_mean", "green")],
by = list(test$date),
FUN = mean, na.rm = T)
test.2 <- test.2[order(test.2$Group.1),]
rownames(test.2) <- 1:nrow(test.2)
colnames(test.2)[1] <- 'date'
## Using ggplotly
pl <- ggplot(test.2, aes(x = date)) +
geom_line(mapping = aes(y = NDVI, colour = "Landsat_NDVI")) +
geom_line(mapping = aes(y = pv, colour = "DEA_FC")) +
geom_line(mapping = aes(y = green_mean, colour = "VegMachine_SFC")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(focus.site.name) +
geom_point(mapping = aes(y = green, colour = "insitu_green")) +
scale_color_manual(
name = "Cover Types",
values = c("Landsat_NDVI" = "red", "DEA_FC" = "blue", "VegMachine_SFC" = "green",
"insitu_green" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%Y %b",
date_minor_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
#### Visualising Time Series of RS Products ###
## Author: Krish Singh
## Date: 20231209
## Purpose: To check for consistency of the fractional_cover calculations
# Algorithm ---------------------------------------------------------------
# Output: visual plots
# - all paired combinations of (NDVI, FC, SFC)
# - combined time series plot of NDVI, FC, SFC, and in-situ FC
# Input:
# - RS data for RS at site
# - In-situ data of FC of the recorded sites
# Process:
# - Retrieve RS data
# - Retrieve in-situ fc
# - Plot the NDVI, FC, and SFC
# Libraries ---------------------------------------------------------------
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
library(dplyr)
library(zoo)
library(plotly)
# Main --------------------------------------------------------------------
site.subset.names <- read.csv('../STEP2_NDVI_EXTRACTION/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv')
site.subset.names <- unique(site.subset.names$site_location_name)
# Select main site
focus.site.name <- site.subset.names[which(site.subset.names == 'NSANAN0002')]
# Load NDVI
NDVIs.path <- '../STEP2_NDVI_EXTRACTION/EarthEngine/Output/NDVI_Extraction_2/'
focus.site.file.name <- paste0(focus.site.name, '_NDVI', '.csv')
focus.site.ndvi <- read.csv(paste0(NDVIs.path,focus.site.file.name))
## Need to extract the dates from system index (left of the last '_' seperator)
focus.site.ndvi$date <- unlist(lapply(focus.site.ndvi$system.index,
FUN = function(string){
splitted.str <- strsplit(string, '_')
return(splitted.str[[1]][[length(unlist(splitted.str)) - 1]])
}
))
focus.site.ndvi$date <- as.Date(focus.site.ndvi$date, format = '%Y%m%d')
focus.site.ndvi <- focus.site.ndvi[order(focus.site.ndvi$date),]
rownames(focus.site.ndvi) <- 1:nrow(focus.site.ndvi)
# Load SFC
SFC.path <- '../STEP2_FC_EXTRACTION/VegMachine/SFC/'
focus.site.file.name <- paste0(focus.site.name, '_SFC', '.csv')
focus.site.sfc <- readr::read_csv(paste0(SFC.path,focus.site.file.name))
# To convert to a date, I needed to append a day ('01') while in actuality
# there are no specific dates
focus.site.sfc$date <- as.Date(unlist(lapply(focus.site.sfc$date,
function(date)
{return(paste0(date, '-01'))}
)))
focus.site.sfc <- as.data.frame(focus.site.sfc) # note parsing issue with the last column
# Load DEA FC
dea.path <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
focus.site.file.name <- paste0(focus.site.name, '.csv')
focus.site.dea <- read.csv(paste0(dea.path,focus.site.file.name))
focus.site.dea <- aggregate(focus.site.dea, by = list(focus.site.dea$time), FUN = mean, na.rm = T)
focus.site.dea$date <- as.Date(focus.site.dea$Group.1)
# Combine the datasets
focus.site.ndvi <- focus.site.ndvi[,c('date', 'NDVI')]
focus.site.sfc <- focus.site.sfc[,c('date', 'green_mean')]
focus.site.dea <- focus.site.dea[,c('date', 'pv')]
test <- focus.site.ndvi %>%
full_join(focus.site.sfc, by = 'date') %>%
full_join(focus.site.dea, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
gapfill.green_mean <- na.locf(test[,c("date", "green_mean")])
test <- test[, c("date", "NDVI", "pv")]
test <- test %>%
full_join(gapfill.green_mean, by = 'date')
test$NDVI <- test$NDVI*100
# Append the in-situ dataset
veg.info <- get_ausplots(focus.site.name, veg.PI = T, site_info = T)
insitu.fc <- fractional_cover(veg.info$veg.PI)
veg.info <- merge(as.data.frame(veg.info$site.info), insitu.fc, by = "site_unique")
veg.info.fc <- veg.info[,c("visit_start_date", "green")]
colnames(veg.info.fc)[1] <- 'date'
veg.info.fc$date <- as.Date(veg.info.fc$date)
test <- test %>% full_join(veg.info.fc, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
test.2 <- aggregate(test[,c("NDVI", "pv", "green_mean", "green")],
by = list(test$date),
FUN = mean, na.rm = T)
test.2 <- test.2[order(test.2$Group.1),]
rownames(test.2) <- 1:nrow(test.2)
colnames(test.2)[1] <- 'date'
# Visualisation
## Using ggplotly
pl <- ggplot(test.2, aes(x = date)) +
geom_line(mapping = aes(y = NDVI, colour = "Landsat_NDVI")) +
geom_line(mapping = aes(y = pv, colour = "DEA_FC")) +
geom_line(mapping = aes(y = green_mean, colour = "VegMachine_SFC")) +
xlab("Time") +
ylab("Fractional Cover (%)") +
labs(focus.site.name) +
geom_point(mapping = aes(y = green, colour = "insitu_green")) +
scale_color_manual(
name = "Cover Types",
values = c("Landsat_NDVI" = "red", "DEA_FC" = "blue", "VegMachine_SFC" = "green",
"insitu_green" = "darkgreen")) +
theme_minimal() +
scale_x_date(date_breaks = "3 months", date_labels = "%Y %b",
date_minor_breaks = "3 month") +
theme(axis.text.x=element_text(angle=60, hjust = 1)) +
geom_hline(yintercept = 0)
p <- ggplotly(pl) %>%
rangeslider()
p
#### FC and NDVI product Comparisons Single Site ####
## Author: Krish Singh
## DATE: 20231201
## Purpose: to explore the similarities between the FC and NDVI data products from
## - Vegmachine
## - DEA FC
## - NDVI
# Load Libraries ----------------------------------------------------------
library(TSstudio)
library(readr) # needed to resolve delimiter issue in sfc csv files
library(ausplotsR)
# Load Datasets -----------------------------------------------------------
focus.site.name <- 'NSANAN0002'
# Load NDVI
NDVIs.path <- '../STEP2_NDVI_EXTRACTION/EarthEngine/Output/NDVI_Extraction_2/'
focus.site.file.name <- paste0(focus.site.name, '_NDVI', '.csv')
focus.site.ndvi <- read.csv(paste0(NDVIs.path,focus.site.file.name))
## Need to extract the dates from system index (left of the last '_' seperator)
focus.site.ndvi$date <- unlist(lapply(focus.site.ndvi$system.index,
FUN = function(string){
splitted.str <- strsplit(string, '_')
return(splitted.str[[1]][[length(unlist(splitted.str)) - 1]])
}
))
focus.site.ndvi$date <- as.Date(focus.site.ndvi$date, format = '%Y%m%d')
focus.site.ndvi <- focus.site.ndvi[order(focus.site.ndvi$date),]
focus.site.ndvi$NDVI_std <- (focus.site.ndvi$NDVI - mean(focus.site.ndvi$NDVI, na.rm = T))/
sd(focus.site.ndvi$NDVI, na.rm = T)
# Load SFC
SFC.path <- '../STEP2_FC_EXTRACTION/VegMachine/SFC/'
focus.site.file.name <- paste0(focus.site.name, '_SFC', '.csv')
focus.site.sfc <- readr::read_csv(paste0(SFC.path,focus.site.file.name))
# To convert to a date, I needed to append a day ('01') while in actuality
# there are no specific dates
focus.site.sfc$date <- as.Date(unlist(lapply(focus.site.sfc$date,
function(date)
{return(paste0(date, '-01'))}
)))
focus.site.sfc$green_mean <- as.numeric(focus.site.sfc$green_mean)
focus.site.sfc$green_mean_std <- (focus.site.sfc$green_mean - mean(focus.site.sfc$green_mean, na.rm = T))/
sd(focus.site.sfc$green_mean, na.rm = T)
focus.site.sfc <- as.data.frame(focus.site.sfc) # note parsing issue with the last column
# Load DEA FC
dea.path <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
focus.site.file.name <- paste0(focus.site.name, '.csv')
focus.site.dea <- read.csv(paste0(dea.path,focus.site.file.name))
focus.site.dea <- aggregate(focus.site.dea, by = list(focus.site.dea$time), FUN = mean, na.rm = T)
focus.site.dea$date <- as.Date(focus.site.dea$Group.1)
focus.site.dea$pv_std <- (focus.site.dea$pv - mean(focus.site.dea$pv, na.rm = T))/
sd(focus.site.dea$pv, na.rm = T)
# Load AusPlots datasets
ausplots.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg_2-0-3.rds")
ausplots.focus.fc <- readRDS("../STEP2_VEG_EXTRACTION/insitu_fractional_cover_default_2-0-3.rds")
ausplots.info.focus <- ausplots.info$site.info[ausplots.info$site.info$site_location_name == focus.site.name,]
site.id <- ausplots.info.focus$site_unique
ausplots.fc.data <- merge(ausplots.info.focus, ausplots.focus.fc, by = 'site_unique')
date.visit <- as.Date(ausplots.fc.data$visit_start_date)
# Explore time series -----------------------------------------------------
# NDVI time series
ts_plot(focus.site.ndvi[,c("date", "NDVI")])
#ts_plot(focus.site.sfc[,c("date", "green_mean")])
ts_plot(focus.site.sfc[,c("date", "green_mean")]) # Not sure why this shows nothing
plot(focus.site.sfc[,c("date", "green_mean")])
ts_plot(focus.site.dea[,c("date","pv")])
# Process time series -----------------------------------------------------
# Compare time series  ----------------------------------------------------
# define date range to aggregate RS data for comparison
times.forwards <- seq(date.visit, by='1 days', length = 31)
times.backwards <- seq(date.visit, by='-1 days', length = 31)
closest.times.dea <- rbind(focus.site.dea[focus.site.dea$date %in%times.forwards,],
focus.site.dea[focus.site.dea$date %in%times.backwards,])
closest.times.dea <- closest.times.dea[order(closest.times.dea$date),]
closest.times.ndvi <- rbind(focus.site.ndvi[focus.site.ndvi$date %in%times.forwards,],
focus.site.ndvi[focus.site.ndvi$date %in%times.backwards,])
closest.times.ndvi <- closest.times.ndvi[order(closest.times.ndvi$date),]
# special case for sfc as it is seasonal - over 3
times.forwards.sfc <- seq(date.visit, by='1 days', length = 31*3)
# I generally want the earliest occurance of a non-na green_mean
closest.times.sfc <- rbind(focus.site.sfc[focus.site.sfc$date %in%times.forwards.sfc,])
closest.times.sfc <- closest.times.sfc[order(closest.times.sfc$date),]
closest.times.sfc <- subset(closest.times.sfc, !is.na(green_mean))
closest.times.sfc <- closest.times.sfc[which.min(closest.times.sfc$date),]
# Plot the nearest time series
ts_plot(closest.times.dea[,c("date", "pv")]) # dea time series
ts_plot(closest.times.ndvi[,c("date", "NDVI")]) # EE time series
ts_plot(closest.times.sfc[,c("date", "green_mean")]) # still empty
# merge dea and ee for side by side comparison
closest.times.binded <- merge(closest.times.ndvi, closest.times.dea, by = 'date')
closest.times.binded <- closest.times.binded[,c("date", "NDVI", "pv", "NDVI_std", "pv_std")]
# normalise NDVI and pv locally
closest.times.binded$NDVI_norm <- (
closest.times.binded$NDVI - mean(closest.times.binded$NDVI, na.rm = T))/
sd(closest.times.binded$NDVI, na.rm = T
)
closest.times.binded$pv_norm <- (
closest.times.binded$pv - mean(closest.times.binded$pv, na.rm = T))/
sd(closest.times.binded$pv, na.rm = T)
ts_plot(closest.times.binded[,c("date", "NDVI_std", "pv_std")]) # plot side by side comparison
ts_plot(closest.times.binded[,c("date", "NDVI_norm", "pv_norm")])
# combine into one dataset
site.focus.agg.nearest <- data.frame("site_unique" = site.id, lapply(
closest.times.binded[,c("pv","NDVI", "pv_norm", "NDVI_norm", "pv_std", "NDVI_std")],
FUN = mean, na.rm = T))
site.focus.agg.nearest$green_mean <- closest.times.sfc$green_mean
site.focus.agg.nearest$date <- date.visit
site.focus.agg.nearest$aus_green <- ausplots.fc.data$green
plots(site.focus.agg.nearest$aus_green, site.focus.agg.nearest$green_mean)
plot(site.focus.agg.nearest$aus_green, site.focus.agg.nearest$green_mean)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_PARAMETER_ENGINEERING/time_window_exploration.R")
View(test)
View(test)
windows[which.max(values)]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP6_PARAMETER_ENGINEERING/time_window_exploration.R")
windows[which.max(values)]
window <- 641
precip.window <- apply_sliding_window(get_precip_data(site.focus,directory), window)
colnames(precip.window)[1] <- 'date'
precip.window$date <- as.Date(precip.window$date)
# Visualise the dataset
ts_plot(precip.window)
site.greenness <- read.csv(paste0('../STEP6_PARAMETER_ENGINEERING/combined_data_', site.focus, '.csv'))
site.greenness$date <- as.Date(site.greenness$date)
test <- precip.window %>% full_join(site.greenness, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
test <- aggregate(test[,c('window.sum','NDVI', 'green_mean', 'pv', 'green')],
by = list(test$date), FUN = mean, na.rm = T)
ts_plot(na.locf(test[,c("Group.1", 'window.sum', 'NDVI', 'pv', 'green_mean')]), type = 'multiple', title =  site.focus)
plot(test$window.sum, test$pv)
