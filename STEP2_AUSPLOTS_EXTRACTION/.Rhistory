one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc <- fractional_cover(one.veg.info$veg.PI) # retrieve fc data
print(one.veg.fc)
if(is.character(one.veg.fc)){ # empty fc dataset is in the form of an empty character
error <- 2 # Error 2: fractional_cover returns empty character
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc$error <- rep(error, nrow(one.veg.fc))
# Check if all columns (exclude 'other') are present; 'site_unique' 'bare', 'green', 'brown'
columns.diff <- setdiff(c("site_unique", "bare", "green", "brown", "other", "error"), colnames(one.veg.fc))
# When we get partially missing data - either one or more of bare, green, or brown is missing
if(length(columns.diff) > 0){
error <- 4 # Error 4: Site obtains partially missing fractional cover data column (eg. missing one of or more between bare, green, brown)
print(error)
for(i in columns.diff) {
one.veg.fc[i] <- rep(NA, nrow(one.veg.fc))
}
one.veg.fc$error <- rep(error, nrow(one.veg.fc)) # change error to 4 for entire subset
}
one.veg.fc <- one.veg.fc[,c("site_unique", "green", "brown", "bare", "other", "error")]
# check for missing FC for site observations
missing.obs <- setdiff(one.veg.info$site.info$site_unique, one.veg.fc$site_unique)
if(length(missing.obs) > 0){
error <- 3 # Error 3: site obtains partially missing fractional cover data row-wise (missing observations entirely)
print(3)
temp <- create_error_fc_data(
subset(one.veg.info$site.info,subset = (site_unique %in% missing.obs)), error)
one.veg.fc <- rbind(one.veg.fc, temp)
}
}
}
fc <- rbind(fc, one.veg.fc)
}
fc <- fc[-1,]
rownames(fc) <- 1:nrow(fc)
return(fc)
}
sites <- read.csv("../DATASETS/sites_info_query.csv")
site.names <- sites$site_location_name
fcs <- get_individual_fcs("SASMDD0012")
View(fcs)
sites.sub <- read.csv("../DATASETS/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv")
site.names.sub <- sites$site_location_name
fcs <- get_individual_fcs(site.names.sub)
View(fcs)
View(fcs)
sites.sub <- read.csv("../DATASETS/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv")
site.names.sub <- unique(sites.sub$site_location_name)
fcs <- get_individual_fcs(site.names.sub)
View(fcs)
# Libraries ---------------------------------------------------------------
library(ausplotsR) # 2.0.6
# Functions ---------------------------------------------------------------
create_error_fc_data <- function(site.info, error){
one.veg.fc <- data.frame(site_unique = site.info$site_unique,
green = rep(NA, nrow(site.info)),
brown = rep(NA, nrow(site.info)),
bare = rep(NA, nrow(site.info)),
other = rep(NA, nrow(site.info)),
error = rep(error, nrow(site.info)))
return(one.veg.fc)
}
# iterating fractional cover on each site individually
get_individual_fcs <- function(site.names){
fc <- data.frame(site_unique = NA, green = NA,
brown = NA, bare = NA,other = NA,
error = NA)
for(name in site.names) {
error <- 0 # Error 0: No error
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
if(nrow(one.veg.info$veg.PI) == 0) {
error <- 1 # Error 1: missing veg.PI
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc <- fractional_cover(one.veg.info$veg.PI) # retrieve fc data
if(is.character(one.veg.fc)){ # empty fc dataset is in the form of an empty character
error <- 2 # Error 2: fractional_cover returns empty character
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc$error <- rep(error, nrow(one.veg.fc))
# Check if all columns (exclude 'other') are present; 'site_unique' 'bare', 'green', 'brown'
columns.diff <- setdiff(c("site_unique", "bare", "green", "brown", "other", "error"), colnames(one.veg.fc))
# When we get partially missing data - either one or more of bare, green, or brown is missing
if(length(columns.diff) > 0){
error <- 4 # Error 4: Site obtains partially missing fractional cover data column (eg. missing one of or more between bare, green, brown)
for(i in columns.diff) {
one.veg.fc[i] <- rep(NA, nrow(one.veg.fc))
}
one.veg.fc$error <- rep(error, nrow(one.veg.fc)) # change error to 4 for entire subset
}
one.veg.fc <- one.veg.fc[,c("site_unique", "green", "brown", "bare", "other", "error")]
# check for missing FC for site observations
missing.obs <- setdiff(one.veg.info$site.info$site_unique, one.veg.fc$site_unique)
if(length(missing.obs) > 0){
error <- 3 # Error 3: site obtains partially missing fractional cover data row-wise (missing observations entirely)
temp <- create_error_fc_data(
subset(one.veg.info$site.info,subset = (site_unique %in% missing.obs)), error)
one.veg.fc <- rbind(one.veg.fc, temp)
}
}
}
fc <- rbind(fc, one.veg.fc)
}
fc <- fc[-1,]
rownames(fc) <- 1:nrow(fc)
return(fc)
}
# Main --------------------------------------------------------------------
sites <- read.csv("../DATASETS/sites_info_query.csv")
site.names <- sites$site_location_name
fcs <- get_individual_fcs("SASMDD0012")
# Libraries ---------------------------------------------------------------
library(ausplotsR) # 2.0.6
# Functions ---------------------------------------------------------------
create_error_fc_data <- function(site.info, error){
one.veg.fc <- data.frame(site_unique = site.info$site_unique,
green = rep(NA, nrow(site.info)),
brown = rep(NA, nrow(site.info)),
bare = rep(NA, nrow(site.info)),
other = rep(NA, nrow(site.info)),
error = rep(error, nrow(site.info)))
return(one.veg.fc)
}
# iterating fractional cover on each site individually
get_individual_fcs <- function(site.names){
fc <- data.frame(site_unique = NA, green = NA,
brown = NA, bare = NA,other = NA,
error = NA)
for(name in site.names) {
error <- 0 # Error 0: No error
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
if(nrow(one.veg.info$veg.PI) == 0) {
error <- 1 # Error 1: missing veg.PI
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc <- fractional_cover(one.veg.info$veg.PI) # retrieve fc data
if(is.character(one.veg.fc)){ # empty fc dataset is in the form of an empty character
error <- 2 # Error 2: fractional_cover returns empty character
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc$error <- rep(error, nrow(one.veg.fc))
# Check if all columns (exclude 'other') are present; 'site_unique' 'bare', 'green', 'brown'
columns.diff <- setdiff(c("site_unique", "bare", "green", "brown", "other", "error"), colnames(one.veg.fc))
# When we get partially missing data - either one or more of bare, green, or brown is missing
if(length(columns.diff) > 0){
error <- 4 # Error 4: Site obtains partially missing fractional cover data column (eg. missing one of or more between bare, green, brown)
for(i in columns.diff) {
one.veg.fc[i] <- rep(NA, nrow(one.veg.fc))
}
one.veg.fc$error <- rep(error, nrow(one.veg.fc)) # change error to 4 for entire subset
}
one.veg.fc <- one.veg.fc[,c("site_unique", "green", "brown", "bare", "other", "error")]
# check for missing FC for site observations
missing.obs <- setdiff(one.veg.info$site.info$site_unique, one.veg.fc$site_unique)
if(length(missing.obs) > 0){
error <- 3 # Error 3: site obtains partially missing fractional cover data row-wise (missing observations entirely)
temp <- create_error_fc_data(
subset(one.veg.info$site.info,subset = (site_unique %in% missing.obs)), error)
one.veg.fc <- rbind(one.veg.fc, temp)
}
}
}
fc <- rbind(fc, one.veg.fc)
}
fc <- fc[-1,]
rownames(fc) <- 1:nrow(fc)
return(fc)
}
# Main --------------------------------------------------------------------
sites <- read.csv("../DATASETS/sites_info_query.csv")
site.names <- sites$site_location_name
fcs <- get_individual_fcs(site.names)
View(fcs)
write.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
write.csv(fcs,'../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
sites.sub <- read.csv("../DATASETS/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv")
site.names.sub <- unique(sites.sub$site_location_name)
fcs.sub <- get_individual_fcs(site.names.sub)
write.csv(fcs.sub,'../DATASETS/AusPlots_Sub_FC_Iter_2_0_6.csv')
library(ausplotsR)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
veg.info <- readRDS("../STEP2_VEG_EXTRACTION/site_veg.rds")
debug <- F
debug_msg <- function(msg) {
if (debug) {
print(msg)
}
}
library(ausplotsR)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_AUSPLOTS_EXTRACTION/site_veg_2-0-3.rds")
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
sites.query <- read.csv("/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/query/sites_info_query.csv")
library(ausplotsR)
directory <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files"
files <- list.files(directory, pattern = "\\.csv$", full.names = FALSE)
fileNames <- tools::file_path_sans_ext(files)
veg.info <- readRDS("../STEP2_AUSPLOTS_EXTRACTION/site_veg_2-0-3.rds")
sites.query <- read.csv("../DATASETS/sites_info_query.csv")
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
library(ggplot2)
library(ggpubr)
library(ggpmisc)
library(tune)
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_new_aggregation.csv")
library(ggplot2)
library(ggpubr)
library(ggpmisc)
library(tune)
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_pixel_inc.csv")
#dea.fc.sites.nearest <- read.csv("dea_fc_sites_nearest_filtered_ue.csv")
dea.fc.sites.nearest <- read.csv("../STEP4_EXPORE_DATA/dea_fc_sites_nearest_new_aggregation.csv")
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10))
View(insitu.fractional.cover)
insitu.fractional.cover <- read.csv('../DATASETS/AusPlots_FC_Iter_2_0_6.csv')
#insitu.fractional.cover <- readRDS("../STEP2_VEG_EXTRACTION/insitu_fractional_cover_canopy_2-0-3rds")
insitu.fractional.cover$other
#insitu.fractional.cover <- readRDS("../STEP2_VEG_EXTRACTION/insitu_fractional_cover_canopy_2-0-3rds")
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)]
#insitu.fractional.cover <- readRDS("../STEP2_VEG_EXTRACTION/insitu_fractional_cover_canopy_2-0-3rds")
insitu.fractional.cover$other[is.na(insitu.fractional.cover$other)] <- 0
insitu.fractional.cover
insitu.fractional.cover <- subset(insitu.fractional.cover, (other <= 10))
dea.fc.sites.plotting <- merge(dea.fc.sites.nearest, insitu.fractional.cover, by = 'site_unique')
dea.fc.sites.plotting <- subset(dea.fc.sites.plotting, subset = (npixels >= 100 & npixels <= 121))
pv.stats <- lm(pv~green,dea.fc.sites.plotting)
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = pv.stats$coefficients[["green"]],
intercept = pv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.green
Metrics::rmse(actual = dea.fc.sites.plotting$green,
predicted = dea.fc.sites.plotting$pv)
# Bare
bs.stats <- lm(bs~bare,dea.fc.sites.plotting)
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = bs.stats$coefficients[["bare"]],
intercept = bs.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
# Brown
npv.stats <- lm(npv~brown,dea.fc.sites.plotting)
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + geom_abline(slope = npv.stats$coefficients[["brown"]],
intercept = npv.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
cal.brown
growth.form <- readRDS("growth_form_matrix.rds")
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
growth.form.classification <- read.csv("Growth_Type_Classification.csv",header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form <- readRDS("growth_form_matrix.rds")
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form$site_location_name <- unlist(lapply(rownames(growth.form), get_location_name))
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
growth.form.classification <- read.csv("../DATASETS/Growth_Type_Classification.csv",header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
growth.form.essen <- growth.form.agg[,c("site_location_name", "vegetation_type")]
dea.fc.sites.plotting$site_location_name <- unlist(lapply(dea.fc.sites.plotting$site_unique, get_location_name))
dea.fc.sites.plotting <- merge(dea.fc.sites.plotting, growth.form.essen, by = 'site_location_name')
cal.green <- ggplot(dea.fc.sites.plotting, aes(y = pv, x = green)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "green cover (in-situ)", y = "green cover (remote)") +
facet_wrap(~vegetation_type) +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() +  stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = T)
cal.green
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$green,
predicted = tree$pv)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$green,
predicted = shrub$pv)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$green,
predicted = grass$pv)
# Bare
cal.bare <- ggplot(dea.fc.sites.plotting, aes(y = bs, x = bare)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100)  + labs(x = "bare cover (in-situ)", y = "bare cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + facet_wrap(~vegetation_type) + coord_obs_pred() + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = T)
cal.bare
Metrics::rmse(actual = dea.fc.sites.plotting$bare,
predicted = dea.fc.sites.plotting$bs)
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$bare,
predicted = tree$bs)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$bare,
predicted = shrub$bs)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$bare,
predicted = grass$bs)
# Brown
cal.brown <- ggplot(dea.fc.sites.plotting, aes(y = npv, x = brown)) + geom_point(alpha = 0.5) +
xlim(0,100) + ylim(0,100) + labs(x = "brown cover (in-situ)", y = "brown cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) + coord_obs_pred() + facet_wrap(~vegetation_type) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p'))) +
stat_smooth(method = 'lm', fullrange = T)
cal.brown
Metrics::rmse(actual = dea.fc.sites.plotting$brown,
predicted = dea.fc.sites.plotting$npv)
tree <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'tree',]
Metrics::rmse(actual = tree$brown,
predicted = tree$npv)
shrub <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'shrub',]
Metrics::rmse(actual = shrub$brown,
predicted = shrub$npv)
grass <- dea.fc.sites.plotting[dea.fc.sites.plotting$vegetation_type == 'grass',]
Metrics::rmse(actual = grass$brown,
predicted = grass$npv)
library(gridExtra)
library(grid)
library(ggplot2)
library(lattice)
gridExtra::grid.arrange(cal.green, cal.brown, cal.bare)
plot_space <- par(mfrow=c(3,1))
plot_space <- c(cal.green, cal.bare, cal.brown)
plot_space <- cal.bare
plot_space <- cal.brown
plot_space
########## Convert to long #######
dea.fc.sites.plotting.long <- reshape2::melt(dea.fc.sites.plotting[, c('site_unique','bs','npv','pv')], id.vars = c('site_unique'), value.name ="remote.cover")
site.fc.df.long <- reshape2::melt(dea.fc.sites.plotting[,c('site_unique','bare','brown','green')], id.vars = c('site_unique'), value.name = "insitu.cover")
dea.fc.sites.plotting.long$variable <- as.character(dea.fc.sites.plotting.long$variable)
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'pv')] <- 'green'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'npv')] <- 'brown'
dea.fc.sites.plotting.long$variable[which(dea.fc.sites.plotting.long$variable == 'bs')] <- 'bare'
both.plotting.df.long <- merge(dea.fc.sites.plotting.long, site.fc.df.long, by = c("site_unique", 'variable'))
all.stats <- lm(remote.cover~insitu.cover,both.plotting.df.long)
all.pl.validate <- ggplot(data = both.plotting.df.long, aes(x = insitu.cover, y = remote.cover, colour = variable)) + geom_point() + labs(x = "\u0394 cover (in-situ)", y = "\u0394 cover (remote)") +
geom_abline(slope = 1, intercept = 0, lty = 2) + coord_obs_pred()  + xlim(c(0,100)) + ylim(c(0,100)) + geom_abline(slope = all.stats$coefficients[["insitu.cover"]],
intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(mapping = use_label(c("eq", "R2", 'p')))
cal.all <- ggplot(dea.fc.sites.plotting) + geom_point(aes(x = bare, y = bs, colour = 'bare'), alpha = 0.5) + geom_point(aes(x = green, y = pv, colour = 'green'), alpha = 0.5) + geom_point(aes(x = brown, y = npv, colour = 'brown'), alpha = 0.5) + geom_abline(slope = 1, intercept = 0, lty = 2, size = 0.9) +
xlim(0,100) + ylim(0,100) + labs(x = "cover (in-situ)", y = "cover (remote)") + scale_colour_manual(name = 'Cover', values = c('brown' = '#0072B2', 'green' = '#009E73', 'bare' = 'red')) +
geom_abline(slope = all.stats$coefficients[["insitu.cover"]],intercept = all.stats$coefficients[["(Intercept)"]], size = 0.9) + stat_poly_eq(data = both.plotting.df.long,
mapping = use_label(c("eq", "R2", 'p'), aes(x = insitu.cover, y =remote.cover)))
cowplot::plot_grid(cal.green, cal.brown, cal.bare,all.pl.validate)
cowplot::plot_grid(cal.green, cal.brown, cal.bare,cal.all)
library(ncdf4)
library(zoo)
library(TSstudio)
library(dplyr)
apply_sliding_window <- function(file, window){
test.zoo <- read.zoo(file, index.column = 'time')
window.sum <- rollapply(test.zoo, window, FUN = sum, na.rm = T, fill = NA, align = 'right')
return(fortify.zoo(window.sum))
}
get_precip_data <- function(site.focus, directory) {
precip.path <- file.path(directory, "precip")
nc.path <- file.path(precip.path, paste0(site.focus, "_1987_2022.nc"))
nc <- nc_open(filename = nc.path)
time.var <- ncvar_get(nc, "time")
dates <- as.Date(time.var, origin = "1850-01-01")
var <- ncvar_get(nc, 'precip')
daily.precip <- data.frame(precip = var, time = dates)
return(daily.precip)
}
test.window <- function(window, site.focus, directory) {
precip.window <- apply_sliding_window(get_precip_data(site.focus,directory),
window)
colnames(precip.window)[1] <- 'date'
precip.window$date <- as.Date(precip.window$date)
# Visualise the dataset
site.greenness <- read.csv(paste0('../STEP6_PARAMETER_ENGINEERING/combined_data_', site.focus, '.csv'))
site.greenness$date <- as.Date(site.greenness$date)
test <- precip.window %>% full_join(site.greenness, by = 'date')
test <- test[order(test$date),]
rownames(test) <- 1:nrow(test)
test <- aggregate(test[,c('window.sum','NDVI', 'green_mean', 'pv', 'green')],
by = list(test$date), FUN = mean, na.rm = T)
ret <- c("window" =  window, summary(lm(pv ~ window.sum, test))$adj.r.squared)
name.score <- paste0(site.focus, ".adjusted.R2")
names(ret) <- c("window", name.score)
return(ret)
}
fit_linear_models <- function(site.names, windows,
directory = "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"){
first <- as.data.frame(t(sapply(windows, FUN = test.window,
site.focus = site.subset.names[1],
directory = directory)))
for (ssn in site.subset.names[-1]){
site.r2 <- as.data.frame(t(sapply(windows, FUN = test.window,
site.focus = ssn,
directory = directory)))
first <- cbind(first, site.r2[,2])
names(first)[length(names(first))] <- colnames(site.r2)[2]
}
return(first)
}
directory <- "C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/ausplots_agcd"
# Get names of the site subset
site.subset <- read.csv('../STEP2_NDVI_EXTRACTION/Sites_Subset_20231010/ausplots_site_info/sites_subset.csv')
site.subset.names <- unique(site.subset$site_location_name)
exception <- "NSABHC0023"
site.subset.names <- site.subset.names[-which(site.subset.names == exception)]
windows <- seq(1,365*3,5)
r2s <- read.csv("../DATASETS/linear_model_fitted_r2.csv")
plot(r2s$window,r2s$WAAPIL0003.adjusted.R2)
classifications <- read.csv("../DATASETS/AusPlots_Sites_Classified_2-0-6.csv")
# Grass
classifications[classifications$site_location_name == 'WAAPIL0003',]$vegetation_type
View(classifications)
classifications[classifications$site_location_name == 'TCATCH0006',]$vegetation_type
library('ausplotsR')
t <- get_ausplots('WAAGAS0002')
View(t)
t[["site.info"]][["comments"]]
t <- get_ausplots('WAAGAS0002', metadictionary = T)
t <- get_ausplots('WAAGAS0002', metadictionary = T)
?get_ausplots
t <- get_ausplots('WAAGAS0002', dictionary=T)
t.dict <- t$metadata.dictionary
View(t.dict)
plot(r2s$window,r2s$TCATCH0006.adjusted.R2) # Grass
classifications[classifications$site_location_name == 'TCATCH0006',]$vegetation_type
classifications[classifications$site_location_name == 'WAAGAS0002',]$vegetation_type
classifications[classifications$site_location_name == 'WAAGAS0002',]$vegetation_type
plot(r2s$window,r2s$TCATCH0006.adjusted.R2) # Grass
classifications[classifications$site_location_name == 'TCATCH0006',]$vegetation_type
classifications[classifications$site_location_name == 'TCATCH0006',]$vegetation_type
view(classifications[classifications$site_location_name == 'TCATCH0006',])
View(classifications[classifications$site_location_name == 'TCATCH0006',])
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
plot(r2s$window,r2s$NSAMDD0014.adjusted.R2)
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2)
plot(r2s$window,r2s$NSANSS0001.adjusted.R2)
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2)
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2)
plot(r2s$window,r2s$NSANSS0001.adjusted.R2)
plot(r2s$window,r2s$SATSTP0005.adjusted.R2)
plot(r2s$window,r2s$QDASSD0015.adjusted.R2)
plot(r2s$window,r2s$QDASSD0015.adjusted.R2)
plot(r2s$window,r2s$NSANAN0002.adjusted.R2)
plot(r2s$window,r2s$QDAEIU0010.adjusted.R2)
# Pattern
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAFIN0002.adjusted.R2) # Grass
plot(r2s$window,r2s$QDAEIU0010.adjusted.R2) # Grass
# Pattern
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
plot(r2s$window,r2s$QDAEIU0010.adjusted.R2) # Grass
# Pattern
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAFIN0002.adjusted.R2) # Grass
plot(r2s$window,r2s$QDAEIU0010.adjusted.R2) # Grass
# Pattern
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
t.2 <- ausplotsR('QDAEIU0010')
t.2 <- get_ausplots('QDAEIU0010')
View(t.2)
t.2[["site.info"]][["description"]]
t.2[["site.info"]][["comments"]]
# Tree
classifications[classifications$site_location_name == 'NSANSS0001',]$vegetation_type
classifications[classifications$site_location_name == 'NSANAN0002',]$vegetation_type
# Pattern
plot(r2s$window,r2s$WAAGAS0002.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAGFU0021.adjusted.R2) # Grass
plot(r2s$window,r2s$NTAFIN0002.adjusted.R2) # Grass
plot(r2s$window,r2s$QDAEIU0010.adjusted.R2) # Grass
# Tree
plot(r2s$window,r2s$NSANAN0002.adjusted.R2)
plot(r2s$window,r2s$NSANAN0002.adjusted.R2) # Tree
plot(r2s$window,r2s$NSANSS0001.adjusted.R2) # Tree
plot(r2s$window,r2s$NSANAN0002.adjusted.R2) # Tree
View(classifications[classifications$site_location_name == 'NSANAN0002',])
plot(r2s$window,r2s$NSANSS0001.adjusted.R2) # Tree
View(classifications[classifications$site_location_name == 'NSANSS0001',])
365*3
1095/5
219*11
