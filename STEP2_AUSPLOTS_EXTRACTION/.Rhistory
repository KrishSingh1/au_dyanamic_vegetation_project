return(x)
}))
# Export each dataframe from the downloaded r object as a csv file
for (i in names(veg_info)) {
if (i != 'citation') {
name <- gsub('\\.','_',i) # replace '.' with '_' for file naming
file <- paste0("../DATASETS/AusPlots_Extracted_Data/","extracted_",name,"_",version ,  ".csv")
write.csv(veg_info[i], file)
print(paste0('Exported ', i, ' as a csv file.'))
}
}
library(ausplotsR)
# Get list of sites
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
site.names <- tools::file_path_sans_ext(files)
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots(my.Plot_IDs= 'NSABHC0023', site_info=TRUE, structural_summaries=TRUE,
veg.vouchers=TRUE, veg.PI=TRUE, basal.wedge=TRUE, soil_subsites=TRUE,
soil_bulk_density=TRUE, soil_character=TRUE, dictionary= TRUE)
# Get list of sites
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
site.names <- tools::file_path_sans_ext(files)
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots(my.Plot_IDs= c('NSABHC0023'), site_info=TRUE, structural_summaries=TRUE,
veg.vouchers=TRUE, veg.PI=TRUE, basal.wedge=TRUE, soil_subsites=TRUE,
soil_bulk_density=TRUE, soil_character=TRUE, dictionary= TRUE)
View(my.data)
my.data[["soil.char"]][["horizon"]]
my.data[["soil.char"]][["site_location_name"]]
my.data[["soil.char"]][["site_unique"]]
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
View(growth.form.agg)
growth.form.agg[,c('grass','shrub', 'tree')]
rowsum(growth.form.agg[,c('grass','shrub', 'tree')])
rowsums(growth.form.agg[,c('grass','shrub', 'tree')])
rowSums(growth.form.agg[,c('grass','shrub', 'tree')])
veg_info <- readRDS("../DATASETS/AusPlots_Extracted_Data/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/AusPlots_Extracted_Data','growth_forms_pc_', version, '.csv'))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
View(growth.form.agg)
rowSums(growth.form.agg[,c('grass','shrub', 'tree')])
View(growth.form.agg)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/AusPlots_Extracted_Data/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/AusPlots_Extracted_Data/','growth_forms_pc_', version, '.csv'))
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/AusPlots_Extracted_Data/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
write.csv(growth.form.agg,paste0('../DATASETS/AusPlots_Extracted_Data','AusPlots_Sites_Classified_', version, '.csv'))
print(paste0('../DATASETS/AusPlots_Extracted_Data/','AusPlots_Sites_Classified_', version, '.csv'))
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
write.csv(growth.form.agg,file.pathd)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Veg.R")
write.csv(growth.form.agg,file.pathd)
library(ausplotsR)
veg_info <- readRDS("../DATASETS/AusPlots_Extracted_Data/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/AusPlots_Extracted_Data/','growth_forms_pc_', version, '.csv'))
library(ausplotsR)
veg_info <- readRDS("../DATASETS/AusPlots_Extracted_Data/site_veg_2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN")
write.csv(growth.forms, paste0('../DATASETS/AusPlots_Extracted_Data/','growth_forms_pc_', version, '.csv'))
library(ausplotsR)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/growth_forms_pc_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/AusPlots_Extracted_Data/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
file.pathd <- paste0('../DATASETS/AusPlots_Extracted_Data/','AusPlots_Sites_Classified_', version, '.csv')
write.csv(growth.form.agg,file.pathd)
rowSum(growth.form.agg[,c('grass','shrub','tree')])
rowSums(growth.form.agg[,c('grass','shrub','tree')])
library(ausplotsR)
# Get list of sites
query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots(site_info=TRUE, structural_summaries=TRUE,
veg.vouchers=TRUE, veg.PI=TRUE, basal.wedge=TRUE, soil_subsites=TRUE,
soil_bulk_density=TRUE, soil_character=TRUE, dictionary= TRUE)
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
# Get list of sites
#query.dir <- "/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/DataExtraction/BACKUP_DATA/csv_files/"
#files <- list.files(query.dir, pattern = "\\.csv$", full.names = FALSE)
#site.names <- tools::file_path_sans_ext(files)
# Obtain up-to-date data --------------------------------------------------
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots(site_info=TRUE, structural_summaries=TRUE,
veg.vouchers=TRUE, veg.PI=TRUE, basal.wedge=TRUE, soil_subsites=TRUE,
soil_bulk_density=TRUE, soil_character=TRUE)
file <- paste0("../DATASETS/AusPlots_Extracted_Data/","site_veg_Final", version, ".rds")
saveRDS(my.data, file = file)
veg_info <- readRDS(file)
# Export each dataframe from the downloaded r object as a csv file
for (i in names(veg_info)) {
if (i != 'citation') {
name <- gsub('\\.','_',i) # replace '.' with '_' for file naming
file <- paste0("../DATASETS/AusPlots_Extracted_Data/Final/","extracted_Final/",name,"_",version ,  ".csv")
write.csv(veg_info[i], file)
print(paste0('Exported ', i, ' as a csv file.'))
}
}
# Export each dataframe from the downloaded r object as a csv file
for (i in names(veg_info)) {
if (i != 'citation') {
name <- gsub('\\.','_',i) # replace '.' with '_' for file naming
file <- paste0("../DATASETS/AusPlots_Extracted_Data/Final/","extracted_Final_",name,"_",version ,  ".csv")
write.csv(veg_info[i], file)
print(paste0('Exported ', i, ' as a csv file.'))
}
}
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/Ausplots_Veg_Extraction_2-0-6.R")
View(veg_info)
library(sf)
library(sfheaders)
calculateEastingNorthing <- function(site_row, epsg_initial = '283'){
siteEPSG <- as.numeric(paste0(epsg_initial, as.character(site_row$estimated_mga)))
# print(siteEPSG)
# check if the easting/northing is avaliable first,
#   if na then use the SW latlon point to convert to easting/northing
point <- st_sfc(st_point(c(site_row$site.info.longitude[1],site_row$site.info.latitude[1])), crs = 4326)
point <- st_transform(point, siteEPSG, allow_ballpark = FALSE)
eastings <- st_coordinates(point)
site_row$pit_marker_easting_calc <- eastings[,1]
site_row$pit_marker_northing_calc <- eastings[,2]
return(site_row)
}
# The grid starts from 108 degree E to 156 degree E in increments of 6 degrees approximately
lower <- seq(108,150,6)
upper <- seq(114,156,6)
mga_zone <- 49:56
mga_zone_ref <- data.frame('mga' = mga_zone, 'lower' = lower, 'upper' = upper)
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv',
header = TRUE, row.names = 1)
View(site_info)
unique(site_info['site.info.site_location_name'])
length(unique(site_info['site.info.site_location_name']))
length(unique(site_info[['site.info.site_location_name']]))
?get_ausplots
test_new <- get_ausplots()
nrow(test_new$site.info)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/ExtractBoundaryFromAusPlotsR.R")
calculateEastingNorthing <- function(site_row, epsg_initial = '283'){
siteEPSG <- as.numeric(paste0(epsg_initial, as.character(site_row$estimated_mga)))
point <- st_sfc(st_point(c(site_row$site.info.longitude[1],site_row$site.info.latitude[1])), crs = 4326)
point <- st_transform(point, siteEPSG, allow_ballpark = FALSE)
eastings <- st_coordinates(point)
site_row$pit_marker_easting_calc <- eastings[,1]
site_row$pit_marker_northing_calc <- eastings[,2]
lower_bounds <- c(site$pit_marker_easting_calc, site$pit_marker_northing_calc)
upper_bounds <- lower_bounds + 100
box <- st_as_sfc(st_bbox(st_sfc(st_point(lower_bounds),
st_point(upper_bounds),
crs = siteEPSG)))
print(box)
return(site_row)
}
unique(site_info_essential[,c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'estimated_mga')])
unique(site_info_essential[,c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'estimated_mga')])
nrow(unique(site_info_essential[,c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'estimated_mga')]))
nrow(unique(site_info_essential[,c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'estimated_mga')]))
site_info_essential_polygon <- unique(site_info_essential[,c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'estimated_mga')])
site_info <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv',
header = TRUE, row.names = 1)
View(site_info)
site_info$site.info.plot_is_aligned_to_grid
site_info[which(site_info['site.info.plot_is_aligned_to_grid'])]
site_info[which(site_info['site.info.plot_is_aligned_to_grid']) == TRUE]
site_info[which(site_info['site.info.plot_is_aligned_to_grid'] == TRUE)]
site_info[which(site_info['site.info.plot_is_aligned_to_grid'] == TRUE),]
site_info_aligned <- site_info[which(site_info['site.info.plot_is_aligned_to_grid'] == TRUE),]
essentials_attributes <- c('site.info.site_location_name',
'site.info.latitude',
'site.info.longitude',
'site.info.point',
'site.info.pit_marker_easting',
'site.info.pit_marker_northing',
'site.info.pit_marker_datum',
'site.info.pit_marker_mga_zones')
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/AusPlotsExtraction.R")
View(site_info_aligned)
unique(site_info_aligned['site.info.site_location_name'])
unique(site_info_aligned[['site.info.site_location_name']])
site_info_essential_polygon_aligned <- subset(site_info_essential_polygon_aligned,
subset = (aligned_sites_list %in% 'site.info.site_location_name'))
site_info_essential_polygon_aligned <- subset(site_info_essential_polygon,
subset = (aligned_sites_list %in%
'site.info.site_location_name'))
aligned_sites_list <- unique(site_info_aligned[['site.info.site_location_name']])
site_info_essential_polygon_aligned <- subset(site_info_essential_polygon,
subset = (aligned_sites_list %in%
'site.info.site_location_name'))
View(site_info_essential_polygon_aligned)
View(site_info_essential_polygon)
site_info_essential_polygon_aligned <- subset(site_info_essential_polygon,
subset = (aligned_sites_list %in%
site.info.site_location_name))
View(site_info_essential_polygon)
View(site_info_essential_polygon_aligned)
site_info_essential_polygon_aligned <- subset(site_info_essential_polygon,
subset = (site.info.site_location_name %in%
aligned_sites_list ))
aligned_sites_list
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/AusPlotsExtraction.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP1_INFO_EXTRACTION_ADV/AusPlotsExtraction.R")
# Libraries ---------------------------------------------------------------
library(ausplotsR) # 2.0.6
# Functions ---------------------------------------------------------------
create_error_fc_data <- function(site.info, error){
one.veg.fc <- data.frame(site_unique = site.info$site_unique,
green = rep(NA, nrow(site.info)),
brown = rep(NA, nrow(site.info)),
bare = rep(NA, nrow(site.info)),
other = rep(NA, nrow(site.info)),
error = rep(error, nrow(site.info)))
return(one.veg.fc)
}
# iterating fractional cover on each site individually
get_individual_fcs <- function(site.names){
fc <- data.frame(site_unique = NA, green = NA,
brown = NA, bare = NA,other = NA,
error = NA)
for(name in site.names) {
error <- 0 # Error 0: No error
one.veg.info <- get_ausplots(name, veg.PI = T, site_info = T)
if(nrow(one.veg.info$veg.PI) == 0) {
error <- 1 # Error 1: missing veg.PI
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc <- fractional_cover(one.veg.info$veg.PI) # retrieve fc data
if(is.character(one.veg.fc)){ # empty fc dataset is in the form of an empty character
error <- 2 # Error 2: fractional_cover returns empty character
one.veg.fc <- create_error_fc_data(one.veg.info$site.info, error)
} else {
one.veg.fc$error <- rep(error, nrow(one.veg.fc))
# Check if all columns (exclude 'other') are present; 'site_unique' 'bare', 'green', 'brown'
columns.diff <- setdiff(c("site_unique", "bare", "green", "brown", "other", "error"), colnames(one.veg.fc))
# When we get partially missing data - either one or more of bare, green, or brown is missing
if(length(columns.diff) > 0){
error <- 4 # Error 4: Site obtains partially missing fractional cover data column (eg. missing one of or more between bare, green, brown)
for(i in columns.diff) {
one.veg.fc[i] <- rep(NA, nrow(one.veg.fc))
}
one.veg.fc$error <- rep(error, nrow(one.veg.fc)) # change error to 4 for entire subset
}
one.veg.fc <- one.veg.fc[,c("site_unique", "green", "brown", "bare", "other", "error")]
# check for missing FC for site observations
missing.obs <- setdiff(one.veg.info$site.info$site_unique, one.veg.fc$site_unique)
if(length(missing.obs) > 0){
error <- 3 # Error 3: site obtains partially missing fractional cover data row-wise (missing observations entirely)
temp <- create_error_fc_data(
subset(one.veg.info$site.info,subset = (site_unique %in% missing.obs)), error)
one.veg.fc <- rbind(one.veg.fc, temp)
}
}
}
fc <- rbind(fc, one.veg.fc)
}
fc <- fc[-1,]
rownames(fc) <- 1:nrow(fc)
return(fc)
}
# Main --------------------------------------------------------------------
sites <- read.csv("../DATASETS/AusPlots_Extracted_Data/Final/extracted_Final_site_info_2-0-6.csv")
site.names <- unique(sites$site.info.site_location_name)
fcs <- get_individual_fcs(site.names)
write.csv(fcs,'../DATASETS/Final/AusPlots_FC_Iter_2_0_6.csv')
write.csv(fcs,'../DATASETS/AusPlots_Extracted_Data/Final/AusPlots_FC_Iter_2_0_6.csv')
View(fcs)
library(ausplotsR)
?ausplotsR
?growth_form_table
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Main --------------------------------------------------------------------
veg_info <- readRDS("../DATASETS/AusPlots_Extracted_Data/Final/site_veg_Final2-0-6.rds")
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
growth.forms <- growth_form_table(veg_info$veg.PI, m_kind = "percent_cover",
cover_type = "PFC", species_name = "SN", cumulative = F)
write.csv(growth.forms, paste0('../DATASETS/AusPlots_Extracted_Data/Final/','growth_forms_pc_final_', version, '.csv'))
View(growth.forms)
library(ausplotsR)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_final_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
classify <- function(dataset.row) {
return(names(which.max(dataset.row[colnames(growth.form.agg)[which(colnames(growth.form.agg) != 'site_location_name')]])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
View(growth.form.agg)
library(ausplotsR)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_2-0-6.csv')
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_2-0-6.csv')
library(ausplotsR)
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_final_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/AusPlots_Extracted_Data/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
View(growth.form.agg)
#### AusPlots Site Classification by Veg Type ####
# By Krish Singh
# Date: 240105
# Purpose: To classify ausplots sites by veg type
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_final_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
# Sum Growth Forms by Classification --------------------------------------
# Load classification scheme
growth.form.classification <- read.csv("../DATASETS/AusPlots_Extracted_Data/Growth_Type_Classification.csv", header = F)
growth.form.classification <- na.omit(growth.form.classification)
grass.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Grass']
shrub.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Shrub']
tree.names <- growth.form.classification$V1[growth.form.classification$V2 == 'Tree']
# Give row sum based on the groupings
growth.form.agg$grass <- rowSums(growth.form.agg[,grass.names], na.rm = T)
growth.form.agg$shrub <- rowSums(growth.form.agg[,shrub.names], na.rm = T)
growth.form.agg$tree <- rowSums(growth.form.agg[,tree.names], na.rm = T)
# Begin classification ----------------------------------------------------
classify <- function(dataset.row) {
return(names(which.max(dataset.row[c("grass","shrub","tree")])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
file.pathd <- paste0('../DATASETS/AusPlots_Extracted_Data/Final','AusPlots_Sites_Classified_', version, '.csv')
write.csv(growth.form.agg,file.pathd)
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
get_location_name <- function(site.unique) {
return(unlist(strsplit(site.unique, split =  '-'))[1])
}
# Main --------------------------------------------------------------------
growth.form <- read.csv('../DATASETS/AusPlots_Extracted_Data/Final/growth_forms_pc_final_2-0-6.csv')
# Get Site location names from unique_site_name
growth.form$site_location_name <- unlist(lapply(growth.form$X, get_location_name))
# Aggregate the percent coverage by site location name, by the mean
growth.form.agg <- aggregate(growth.form, by = list(growth.form$site_location_name), FUN = mean, na.rm = T)
# Remove columns 'X' and 'site_location_name'
growth.form.agg <- growth.form.agg[,!(names(growth.form.agg) %in% c("X","site_location_name"))]
# Rename group.1, the actual aggregate as site_location_name
colnames(growth.form.agg)[which(colnames(growth.form.agg) == 'Group.1')] <- 'site_location_name'
classify <- function(dataset.row) {
return(names(which.max(dataset.row[colnames(growth.form.agg)[which(colnames(growth.form.agg) != 'site_location_name')]])))
}
growth.form.agg$vegetation_type <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = classify))
# Now calculate the relative dominance: percent of dominant species/total sum of percentage of species
calc.relative.dominance <- function(dataset.row) {
# Get and covert species percent into numeric
site.species.percentages <- as.numeric(dataset.row[which(!(names(dataset.row) %in% c('site_location_name', 'vegetation_type')))])
site.sum <- sum(site.species.percentages, na.rm = T) # calc the sum
dominant.species.percent <- as.numeric(dataset.row[dataset.row['vegetation_type'][[1]]])
rel_dom <- dominant.species.percent/site.sum # get the relative dominance
return(rel_dom)
}
growth.form.agg$relative_dominance <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = calc.relative.dominance))
# Now calculate the relative dominance: percent of dominant species/total sum of percentage of species
calc.scaled.dominance <- function(dataset.row) {
# Get and covert species percent into numeric
dominant.species.percent <- as.numeric(dataset.row[dataset.row['vegetation_type'][[1]]])
rel_dom <- as.numeric(dataset.row['relative_dominance'])
scaled_dom <- dominant.species.percent * rel_dom # get the scaled dominance
return(scaled_dom)
}
growth.form.agg$scaled_dom <- unlist(apply(growth.form.agg, MARGIN = 1, FUN = calc.scaled.dominance))
write.csv(growth.form.agg,'../DATASETS/growth_forms_classification_by_dom_species_2-0-6.csv')
View(growth.form.agg)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Dominant_Species.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/STEP2_AUSPLOTS_EXTRACTION/AusPlots_Classification_by_Dominant_Species.R")
length(unlist(lapply(growth.form$X, get_location_name)))
unlist(lapply(growth.form$X, get_location_name))
unique(unlist(lapply(growth.form$X, get_location_name)))
install.packages('ausplotsR')
library(ausplotsR)
Version()
version()
library(ausplotsR)
install.packages('ausplotsR')
library(ausplotsR)
?ausplotsR
version <- gsub('\\.', '-', packageVersion("ausplotsR"))
my.data <- get_ausplots()
View(my.data)
unique(my.data$site.info$site_location_name)
length(unique(my.data$site.info$site_location_name))
