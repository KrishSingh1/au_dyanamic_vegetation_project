ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
View(ausplots_calc_species_table)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
rowSums(species_fraction)
rowSums(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
nrow(ausplots_calc_species_table)
ncol(ausplots_calc_species_table)
ncol(species_fraction)
View(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
ncol(ausplots_calc_species_table)
ncol(species_fraction)
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
rowSums(ausplots_calc_species_table)
colnames(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
intersection(colnames(ausplots_calc_species_table), colnames(species_fraction))
intersect(colnames(ausplots_calc_species_table), colnames(species_fraction))
colnames(ausplots_calc_species_table)
colnames(species_fraction)
species_fraction = c()
for(s in species_list){
if (is.na(s) == F) {
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
}
names(species_fraction) = species_list
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_list
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))[1]
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_list
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
ausplots_calc_species_table
View(species_fraction)
rowSums(species_fraction)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list
View(grass_pp_list)
grass_list$genus <- unlist(lapply(grass_pp_list$species,
FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])
}
)
)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list[]
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species,
FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])
}
)
)
View(grass_pp_list)
# Libraries ---------------------------------------------------------------
library(ausplotsR)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
View(grass_pp_list)
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
print(table(tribe_names)) # print the number of species that were labelled Andropogoneae or Chloridoideae
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Pre-main ----------------------------------------------------------------
# Preprocess and clean the grass tribes data
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
# Main --------------------------------------------------------------------
# Using Veg PI already Collected  -----------------------------------------
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("GS"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
########## AusPlots Grass Cover by Tribe Extractor ############
# Krish Singh
# 20240630
# Purpose: Use the reference grass species list to aggregate
#          grass cover by their tribe
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Pre-main ----------------------------------------------------------------
# Preprocess and clean the grass tribes data
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
# Main --------------------------------------------------------------------
# Using Veg PI already Collected  -----------------------------------------
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("GS"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe[[1]]
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
print(table(tribe_names)) # print the number of species that were labelled Andropogoneae or Chloridoideae
# Now aggregate (sum up) cover by tribe
grass_cover <- aggregate(test[, -ncol(test)],
by = list(test$tribe_name),
FUN = 'sum')
rownames(grass_cover) <- grass_cover$Group.1
# Transpose the cover data back to the original configuration
grass_cover <- as.data.frame(t(grass_cover[,-which(colnames(grass_cover) == 'Group.1')]))
# Output Results ----------------------------------------------------------
write.csv(test, 'Output/ausplots_species_cover_tribe_labelled.csv')
write.csv(grass_cover, 'Output/ausplots_grass_cover_by_tribe.csv')
View(test)
View(grass_cover)
# TESTING -----------------------------------------------------------------
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
order(colnames(species_fraction))
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
ausplots_calc_species_table == species_fraction
all(ausplots_calc_species_table == species_fraction)
sum(ausplots_calc_species_table == species_fraction)
sum(ausplots_calc_species_table == species_fraction) == nrow(species_fraction)
sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction)
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[2]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[3]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[4]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(grass_cover)
View(grass_cover)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
?ausplotsR::species_table
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
site_info_df <- site_info$site.info
library(dplyr)
grass_cover %>%
left_join(site_info_df)
View(grass_cover)
grass_cover$site_unique <- rownames(grass_cover)
View(grass_cover)
grass_cover %>%
left_join(site_info_df)
View(grass_cover)
grass_cover <- grass_cover %>%
left_join(site_info_df)
View(grass_cover)
grass_cover <- grass_cover[, c('site_unique', 'Andropogoneae', 'Chloridoideae',
'non_applicable/non-tribe', 'latitude', 'longitude' 'description')]
grass_cover <- grass_cover[, c('site_unique', 'Andropogoneae', 'Chloridoideae',
'non_applicable/non-tribe', 'latitude', 'longitude')]
grass_cover <- grass_cover[, c('site_unique', 'Andropogoneae', 'Chloridoideae','non_applicable/no_tribe', 'latitude', 'longitude')]
View(grass_cover)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
grass_traits <- read.csv('Output/ausplots_grass_cover_by_tribe.csv')
grass_tribes <- read.csv('Output/ausplots_grass_cover_by_tribe.csv')
View(grass_tribes)
grass_tribes_agg <- aggregate(grass_tribes[c('site_location_name', 'Andropogonae',
'Chloridoideae')], by = list(grass_tribes$site_location_name))
grass_tribes_agg <- aggregate(grass_tribes[,c('site_location_name', 'Andropogonae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name))
grass_tribes <- read.csv('Output/ausplots_grass_cover_by_tribe.csv')
grass_tribes_agg <- aggregate(grass_tribes[,c('site_location_name', 'Andropogonae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name))
View(grass_tribes)
grass_tribes_agg <- aggregate(grass_tribes[,c('site_location_name', 'Andropogonae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name))
grass_tribes_agg <- aggregate(grass_tribes[,c('site_location_name', 'Andropogoneae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name))
grass_tribes_agg <- aggregate(grass_tribes[,c('site_location_name', 'Andropogoneae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name), FUN = mean)
warnings()
View(grass_traits)
View(grass_tribes_agg)
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
View(grass_tribes_agg)
# For the Purposes of visualising this on a map, I will need to aggregate the percent cover, FUN = mean
grass_tribes_agg <- aggregate(grass_tribes[,c('Andropogoneae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name), FUN = mean)
# Functions ---------------------------------------------------------------
plot_aus_map <- function(df, variable){
df["var"] <- df[variable]
col.var <- colorNumeric(palette = c("green", "red"), domain = df$var)
aus.map.var <- leaflet(df) %>% addTiles %>%
addCircleMarkers(data = df,
lat = ~latitude,
lng = ~longitude,
color = ~col.var(var),
radius = 3,
fillOpacity = 1,
popup= ~paste0(variable, " :", var, "<br>",
"time: ", time, "<br>",
"diff: ", diff,"<br>",
"site_unique", site_unique)
)  %>%
addLegend("bottomright", pal = col.var, values = ~var,
title = variable, opacity = 1)
return(aus.map.var)
}
colnames(grass_tribes_agg)[1] <- 'site_location_name'
View(grass_tribes_agg)
colnames(grass_tribes_agg)[1] <- 'site_location_name'
grass_tribes_agg %>%
left_join(grass_tribes[,c('site_location_name', 'latitude', 'longitude')])
grass_tribes_agg <- grass_tribes_agg %>%
left_join(grass_tribes[,c('site_location_name', 'latitude', 'longitude')])
View(grass_tribes_agg)
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Functions ---------------------------------------------------------------
plot_aus_map <- function(df, variable){
df["var"] <- df[variable]
col.var <- colorNumeric(palette = c("green", "red"), domain = df$var)
aus.map.var <- leaflet(df) %>% addTiles %>%
addCircleMarkers(data = df,
lat = ~latitude,
lng = ~longitude,
color = ~col.var(var),
radius = 3,
fillOpacity = 1,
popup= ~paste0(variable, " :", var, "<br>",
"site", site_location_name)
)  %>%
addLegend("bottomright", pal = col.var, values = ~var,
title = variable, opacity = 1)
return(aus.map.var)
}
grass_tribes <- read.csv('Output/ausplots_grass_cover_by_tribe.csv')
# For the Purposes of visualising this on a map, I will need to aggregate the percent cover, FUN = mean
grass_tribes_agg <- aggregate(grass_tribes[,c('Andropogoneae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name), FUN = mean)
colnames(grass_tribes_agg)[1] <- 'site_location_name'
grass_tribes_agg <- grass_tribes_agg %>%
left_join(grass_tribes[,c('site_location_name', 'latitude', 'longitude')])
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
# Libraries  --------------------------------------------------------------
library(dplyr)
library(leaflet)
# Functions ---------------------------------------------------------------
plot_aus_map <- function(df, variable){
df["var"] <- df[variable]
col.var <- colorNumeric(palette = c("red", 'green'), domain = df$var)
aus.map.var <- leaflet(df) %>% addTiles %>%
addCircleMarkers(data = df,
lat = ~latitude,
lng = ~longitude,
color = ~col.var(var),
radius = 1,
fillOpacity = 0.5,
popup= ~paste0(variable, " :", var, "<br>",
"site: ", site_location_name)
)  %>%
addLegend("bottomright", pal = col.var, values = ~var,
title = variable, opacity = 1)
return(aus.map.var)
}
# Main --------------------------------------------------------------------
grass_tribes <- read.csv('Output/ausplots_grass_cover_by_tribe.csv')
# For the Purposes of visualising this on a map, I will need to aggregate the percent cover, FUN = mean
grass_tribes_agg <- aggregate(grass_tribes[,c('Andropogoneae', 'Chloridoideae')],
by = list(grass_tribes$site_location_name), FUN = mean)
colnames(grass_tribes_agg)[1] <- 'site_location_name'
grass_tribes_agg <- grass_tribes_agg %>%
left_join(grass_tribes[,c('site_location_name', 'latitude', 'longitude')])
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
source("C:/Users/krish/Desktop/DYNAMIC MODEL VEGETATION PROJECT/au_dyanamic_vegetation_project/AusPlots_Grass_Tribes/AusPlots_Species_Extractor/AusPlots_Map_Visualisation.R")
# Plot Andropogoneae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[2])
# Plot Chloridoideae
plot_aus_map(grass_tribes_agg, colnames(grass_tribes_agg)[3])
