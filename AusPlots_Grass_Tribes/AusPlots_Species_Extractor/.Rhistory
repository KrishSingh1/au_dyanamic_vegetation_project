by = list(test$tribe_name),
FUN = 'sum'))
View(grass_cover)
grass_cover <- aggregate(test[, -ncol(test)],
by = list(test$tribe_name),
FUN = 'sum')
rownames(grass_cover) <- grass_cover$Group.1
View(grass_cover)
grass_cover <- t(grass_cover[,-1])
View(grass_cover)
grass_cover <- as.data.frame(t(grass_cover[,-1]))
View(grass_cover)
grass_cover <- as.data.frame(t(grass_cover[,-1]))
View(grass_cover)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
grass_cover <- as.data.frame(t(grass_cover[,-which(colnames(grass_cover) == 'Group.1')]))
View(grass_cover)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(test)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(grass_cover)
?species_table
species_table
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(grass_cover)
print(table(tribe_names))
View(test)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
grass_pp_list <- read.csv('Grass_Tribes.csv')
# Preprocess and clean the grass tribes data
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(grass_cover)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
# Libraries ---------------------------------------------------------------
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- hits/total_points * 100
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction$Dead.tree.shrub
View(species_fraction)
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100,2)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100,2)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
View(species_fraction)
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction)
rowSums(species_fraction) - species_fraction$Dead.tree.shrub
rowSums(species_fraction) - species_fraction$Dead.tree.shrub
rowSums(species_fraction)
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("PFC"), species_name=c("HD"),
strip_bryophytes=FALSE))
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE))
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction$Dead.tree.shrub
rowSums(species_fraction)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- hits/total_points * 100
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction)
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE))
species_fraction$Dead.tree.shrub
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- hits/total_points * 100
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
View(species_fraction)
rowSums(species_fraction) - species_fraction$Deadtree/shrub
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE))
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("PFC"), species_name=c("HD"),
strip_bryophytes=FALSE))
rowSums(species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE))
rowSums(species_fraction)
?species_table
species_table
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
View(ausplots_calc_species_table)
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
rowSums(species_fraction)
rowSums(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
nrow(ausplots_calc_species_table)
ncol(ausplots_calc_species_table)
ncol(species_fraction)
View(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
ncol(ausplots_calc_species_table)
ncol(species_fraction)
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
rowSums(ausplots_calc_species_table)
colnames(ausplots_calc_species_table)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
intersection(colnames(ausplots_calc_species_table), colnames(species_fraction))
intersect(colnames(ausplots_calc_species_table), colnames(species_fraction))
colnames(ausplots_calc_species_table)
colnames(species_fraction)
species_fraction = c()
for(s in species_list){
if (is.na(s) == F) {
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
}
names(species_fraction) = species_list
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_list
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))[1]
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_list
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_list <- na.omit(unique(site_data_veg_pi$herbarium_determination))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (herbarium_determination == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
rowSums(species_fraction) - species_fraction['Dead tree/shrub']
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("HD"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
ausplots_calc_species_table
View(species_fraction)
rowSums(species_fraction)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list
View(grass_pp_list)
grass_list$genus <- unlist(lapply(grass_pp_list$species,
FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])
}
)
)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list[]
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species,
FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])
}
)
)
View(grass_pp_list)
# Libraries ---------------------------------------------------------------
library(ausplotsR)
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
View(grass_pp_list)
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("HD"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
print(table(tribe_names)) # print the number of species that were labelled Andropogoneae or Chloridoideae
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Pre-main ----------------------------------------------------------------
# Preprocess and clean the grass tribes data
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
# Main --------------------------------------------------------------------
# Using Veg PI already Collected  -----------------------------------------
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("GS"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
########## AusPlots Grass Cover by Tribe Extractor ############
# Krish Singh
# 20240630
# Purpose: Use the reference grass species list to aggregate
#          grass cover by their tribe
# Libraries ---------------------------------------------------------------
library(ausplotsR)
# Functions ---------------------------------------------------------------
# Pre-main ----------------------------------------------------------------
# Preprocess and clean the grass tribes data
grass_pp_list <- read.csv('Input/Grass_Tribes.csv')
grass_pp_list <- grass_pp_list[-c(136,137,143),] # Clean the list
colnames(grass_pp_list) <- c('species', 'pp', 'tribe', 'endemic', 'age_class', 'distribution_genus')
grass_pp_list$genus <- unlist(lapply(grass_pp_list$species, FUN = function(x){
return(unlist(strsplit(x, split = ' '))[1])}))
grass_pp_list <- grass_pp_list[, c('species', 'genus','pp', 'tribe', 'endemic', 'age_class')]
write.csv(grass_pp_list, 'Input/Grass_Tribes_Cleaned.csv')
# Main --------------------------------------------------------------------
# Using Veg PI already Collected  -----------------------------------------
site_info <- readRDS('Input/site_veg_Final2-0-6.rds')
grass_pp_list <- read.csv('Input/Grass_Tribes_Cleaned.csv')
# This function basically counts the frequency of each species of each hit against the total number of point intercepts (1010)
species_pc <- species_table(site_info$veg.PI, m_kind=c( "percent_cover"),
cover_type=c("OCC"), species_name=c("GS"),
strip_bryophytes=FALSE)
test <- as.data.frame(t(species_pc)) # Transpose the df so the species names are on the row and visit id as columns --> enables tribe-level aggregation
# Get tribe names
tribe_names <- unlist(lapply(rownames(test), species_reference = grass_pp_list,
FUN = function(x, species_reference){
# Preprocess Species Name
genus_name <- unlist(strsplit(x, split = '\\.'))[1] # remove the '.'s
# Now Search from the species_reference, and allocate 'tribe'
search <- species_reference[which(species_reference$genus == genus_name),]
if(nrow(search) > 0) {
tribe_name = search$tribe[[1]]
} else{
tribe_name = 'non_applicable/no_tribe'
}
return(tribe_name)
}))
test$tribe_name <- tribe_names
print(table(tribe_names)) # print the number of species that were labelled Andropogoneae or Chloridoideae
# Now aggregate (sum up) cover by tribe
grass_cover <- aggregate(test[, -ncol(test)],
by = list(test$tribe_name),
FUN = 'sum')
rownames(grass_cover) <- grass_cover$Group.1
# Transpose the cover data back to the original configuration
grass_cover <- as.data.frame(t(grass_cover[,-which(colnames(grass_cover) == 'Group.1')]))
# Output Results ----------------------------------------------------------
write.csv(test, 'Output/ausplots_species_cover_tribe_labelled.csv')
write.csv(grass_cover, 'Output/ausplots_grass_cover_by_tribe.csv')
View(test)
View(grass_cover)
# TESTING -----------------------------------------------------------------
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[1]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$herbarium_determination)
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
ausplots_calc_species_table == species_fraction
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
order(colnames(species_fraction))
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
ausplots_calc_species_table == species_fraction
all(ausplots_calc_species_table == species_fraction)
sum(ausplots_calc_species_table == species_fraction)
sum(ausplots_calc_species_table == species_fraction) == nrow(species_fraction)
sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction)
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[2]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[3]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
library(ausplotsR)
sites_list <- get_ausplots()
site_location_name <- unique(sites_list$site.info$site_location_name)
test_site_name <- site_location_name[4]
site_data <- get_ausplots(test_site_name, veg.PI = T)
site_data_veg_pi <- site_data$veg.PI
total_points <- length(unique(site_data_veg_pi$hits_unique))
species_list <- unique(site_data_veg_pi$genus_species)
species_list <- na.omit(unique(site_data_veg_pi$genus_species))
species_fraction = c()
for(s in species_list){
hits <- nrow(unique(subset(site_data_veg_pi,
subset = (genus_species == s)))) # have each species count only once per hit
percent_cover <- round(hits/total_points * 100, 1)
species_fraction <- c(species_fraction, percent_cover)
}
names(species_fraction) = species_list
species_fraction <- as.data.frame(t(as.data.frame(species_fraction)))
rownames(species_fraction) <- site_data_veg_pi$site_unique[1]
species_fraction <- species_fraction[,order(colnames(species_fraction)) ]
ausplots_calc_species_table <- species_table(site_data_veg_pi, m_kind=c( "percent_cover"),
cover_type=c("OFC"), species_name=c("GS"),
strip_bryophytes=FALSE)
rowSums(ausplots_calc_species_table)
rowSums(species_fraction)
print(sum(ausplots_calc_species_table == species_fraction) == ncol(species_fraction))
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
View(grass_cover)
View(grass_cover)
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
?ausplotsR::species_table
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
source("C:/Users/krish/Desktop/AusPlots_Species_Extractor/AusPlots_Species_Extractor.R")
